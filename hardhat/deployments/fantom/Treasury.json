{
  "address": "0x8b25FcC21e9B55f638C3775E17206AD7445e06D0",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seigniorage",
          "type": "uint256"
        }
      ],
      "name": "BoardroomFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "graveAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bondAmount",
          "type": "uint256"
        }
      ],
      "name": "BoughtBonds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bondAmount",
          "type": "uint256"
        }
      ],
      "name": "BurnedBonds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seigniorage",
          "type": "uint256"
        }
      ],
      "name": "DaoFundFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seigniorage",
          "type": "uint256"
        }
      ],
      "name": "DevFundFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "at",
          "type": "uint256"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "graveAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bondAmount",
          "type": "uint256"
        }
      ],
      "name": "RedeemedBonds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seigniorage",
          "type": "uint256"
        }
      ],
      "name": "TreasuryFunded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allocateSeigniorage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondDepletionFloorPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondSupplyExpansionPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bootstrapEpochs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bootstrapSupplyExpansionPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_graveAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetPrice",
          "type": "uint256"
        }
      ],
      "name": "buyBonds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoFund",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoFundSharedPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devFund",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devFundSharedPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "discountPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochSupplyContractionLeft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "excludedFromTotalSupply",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBondDiscountRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBondPremiumRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBurnableGraveLeft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_burnableGraveLeft",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGraveCirculatingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGravePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gravePrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGraveUpdatedPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_gravePrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRedeemableBonds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_redeemableBonds",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "governanceRecoverUnsupported",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "grave",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "graveOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gravePriceCeiling",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gravePriceOne",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_grave",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_xbond",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_xshare",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_graveOracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_masonry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_genesisPool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masonry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "masonryAllocateSeigniorage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "masonryGovernanceRecoverUnsupported",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawLockupEpochs",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewardLockupEpochs",
          "type": "uint256"
        }
      ],
      "name": "masonrySetLockUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "masonrySetOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDebtRatioPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDiscountRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "maxExpansionTiers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPremiumRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupplyContractionPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupplyExpansionPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintingFactorForPayingDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextEpochPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "premiumPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "premiumThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "previousEpochGravePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bondAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetPrice",
          "type": "uint256"
        }
      ],
      "name": "redeemBonds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seigniorageExpansionFloorPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seigniorageSaved",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_masonry",
          "type": "address"
        }
      ],
      "name": "setBoardroom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bondDepletionFloorPercent",
          "type": "uint256"
        }
      ],
      "name": "setBondDepletionFloorPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bondSupplyExpansionPercent",
          "type": "uint256"
        }
      ],
      "name": "setBondSupplyExpansionPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bootstrapEpochs",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bootstrapSupplyExpansionPercent",
          "type": "uint256"
        }
      ],
      "name": "setBootstrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_discountPercent",
          "type": "uint256"
        }
      ],
      "name": "setDiscountPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_daoFund",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_daoFundSharedPercent",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_devFund",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_devFundSharedPercent",
          "type": "uint256"
        }
      ],
      "name": "setExtraFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_graveOracle",
          "type": "address"
        }
      ],
      "name": "setGraveOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gravePriceCeiling",
          "type": "uint256"
        }
      ],
      "name": "setGravePriceCeiling",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxDebtRatioPercent",
          "type": "uint256"
        }
      ],
      "name": "setMaxDebtRatioPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxDiscountRate",
          "type": "uint256"
        }
      ],
      "name": "setMaxDiscountRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_index",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "setMaxExpansionTiersEntry",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxPremiumRate",
          "type": "uint256"
        }
      ],
      "name": "setMaxPremiumRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxSupplyContractionPercent",
          "type": "uint256"
        }
      ],
      "name": "setMaxSupplyContractionPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxSupplyExpansionPercent",
          "type": "uint256"
        }
      ],
      "name": "setMaxSupplyExpansionPercents",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintingFactorForPayingDebt",
          "type": "uint256"
        }
      ],
      "name": "setMintingFactorForPayingDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_premiumPercent",
          "type": "uint256"
        }
      ],
      "name": "setPremiumPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_premiumThreshold",
          "type": "uint256"
        }
      ],
      "name": "setPremiumThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_index",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "setSupplyTiersEntry",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "supplyTiers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xbond",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xshare",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xec6638f4ea52cb3f0fe2338c0248f3f946094896dd3b513efd701747a0317974",
  "receipt": {
    "to": null,
    "from": "0xB8be57502Ff91CC20BF172FA2dDeef8de117ed59",
    "contractAddress": "0x8b25FcC21e9B55f638C3775E17206AD7445e06D0",
    "transactionIndex": 6,
    "gasUsed": "4352674",
    "logsBloom": "0x
    "blockHash": "0x0002327d000004d498c644c0268a00ab0f94c415b158bfc5bcab24613571f659",
    "transactionHash": "0xec6638f4ea52cb3f0fe2338c0248f3f946094896dd3b513efd701747a0317974",
    "logs": [],
    "blockNumber": 44958776,
    "cumulativeGasUsed": "5376886",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "016aede46e161bc0b817367f139c4eee",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seigniorage\",\"type\":\"uint256\"}],\"name\":\"BoardroomFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"graveAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"}],\"name\":\"BoughtBonds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"}],\"name\":\"BurnedBonds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seigniorage\",\"type\":\"uint256\"}],\"name\":\"DaoFundFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seigniorage\",\"type\":\"uint256\"}],\"name\":\"DevFundFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"at\",\"type\":\"uint256\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"graveAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"}],\"name\":\"RedeemedBonds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seigniorage\",\"type\":\"uint256\"}],\"name\":\"TreasuryFunded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocateSeigniorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondDepletionFloorPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondSupplyExpansionPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bootstrapEpochs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bootstrapSupplyExpansionPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_graveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetPrice\",\"type\":\"uint256\"}],\"name\":\"buyBonds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoFundSharedPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFundSharedPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discountPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochSupplyContractionLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"excludedFromTotalSupply\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBondDiscountRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBondPremiumRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnableGraveLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnableGraveLeft\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGraveCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGravePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gravePrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGraveUpdatedPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_gravePrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRedeemableBonds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_redeemableBonds\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"governanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"grave\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"graveOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gravePriceCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gravePriceOne\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_grave\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_xbond\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_xshare\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_graveOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_masonry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_genesisPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masonry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"masonryAllocateSeigniorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"masonryGovernanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawLockupEpochs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardLockupEpochs\",\"type\":\"uint256\"}],\"name\":\"masonrySetLockUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"masonrySetOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDebtRatioPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDiscountRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maxExpansionTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPremiumRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyContractionPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyExpansionPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingFactorForPayingDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEpochPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premiumPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premiumThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousEpochGravePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetPrice\",\"type\":\"uint256\"}],\"name\":\"redeemBonds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seigniorageExpansionFloorPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seigniorageSaved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masonry\",\"type\":\"address\"}],\"name\":\"setBoardroom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondDepletionFloorPercent\",\"type\":\"uint256\"}],\"name\":\"setBondDepletionFloorPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondSupplyExpansionPercent\",\"type\":\"uint256\"}],\"name\":\"setBondSupplyExpansionPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bootstrapEpochs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bootstrapSupplyExpansionPercent\",\"type\":\"uint256\"}],\"name\":\"setBootstrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_discountPercent\",\"type\":\"uint256\"}],\"name\":\"setDiscountPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_daoFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_daoFundSharedPercent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_devFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_devFundSharedPercent\",\"type\":\"uint256\"}],\"name\":\"setExtraFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_graveOracle\",\"type\":\"address\"}],\"name\":\"setGraveOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gravePriceCeiling\",\"type\":\"uint256\"}],\"name\":\"setGravePriceCeiling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDebtRatioPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxDebtRatioPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDiscountRate\",\"type\":\"uint256\"}],\"name\":\"setMaxDiscountRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMaxExpansionTiersEntry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPremiumRate\",\"type\":\"uint256\"}],\"name\":\"setMaxPremiumRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupplyContractionPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxSupplyContractionPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupplyExpansionPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxSupplyExpansionPercents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintingFactorForPayingDebt\",\"type\":\"uint256\"}],\"name\":\"setMintingFactorForPayingDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_premiumPercent\",\"type\":\"uint256\"}],\"name\":\"setPremiumPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_premiumThreshold\",\"type\":\"uint256\"}],\"name\":\"setPremiumThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setSupplyTiersEntry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supplyTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xbond\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xshare\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Treasury.sol\":\"Treasury\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\",\"keccak256\":\"0x9486045e189facd2e868ece35249872598ef03f1087fb6fa4d1161842daa2287\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/Treasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./lib/Babylonian.sol\\\";\\nimport \\\"./owner/Operator.sol\\\";\\nimport \\\"./utils/ContractGuard.sol\\\";\\nimport \\\"./interfaces/IBasisAsset.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\nimport \\\"./interfaces/IBoardroom.sol\\\";\\n\\n// interface IBondTreasury {\\n//     function totalVested() external view returns (uint256);\\n// }\\n\\ncontract Treasury is ContractGuard {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    /* ========= CONSTANT VARIABLES ======== */\\n\\n    uint256 public constant PERIOD = 6 hours;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    // governance\\n    address public operator;\\n\\n    // flags\\n    bool public initialized = false;\\n\\n    // epoch\\n    uint256 public startTime;\\n    uint256 public epoch = 0;\\n    uint256 public epochSupplyContractionLeft = 0;\\n\\n    // exclusions from total supply\\n    address[] public excludedFromTotalSupply;\\n\\n    // core components\\n    address public grave;\\n    address public xbond;\\n    address public xshare;\\n\\n    address public masonry;\\n    // address public bondTreasury;\\n    address public graveOracle;\\n\\n    // price\\n    uint256 public gravePriceOne;\\n    uint256 public gravePriceCeiling;\\n\\n    uint256 public seigniorageSaved;\\n\\n    uint256[] public supplyTiers;\\n    uint256[] public maxExpansionTiers;\\n\\n    uint256 public maxSupplyExpansionPercent;\\n    uint256 public bondDepletionFloorPercent;\\n    uint256 public seigniorageExpansionFloorPercent;\\n    uint256 public maxSupplyContractionPercent;\\n    uint256 public maxDebtRatioPercent;\\n\\n    uint256 public bondSupplyExpansionPercent;\\n\\n    // 28 first epochs (1 week) with 4.5% expansion regardless of GRAVE price\\n    uint256 public bootstrapEpochs;\\n    uint256 public bootstrapSupplyExpansionPercent;\\n\\n    /* =================== Added variables =================== */\\n    uint256 public previousEpochGravePrice;\\n    uint256 public maxDiscountRate; // when purchasing bond\\n    uint256 public maxPremiumRate; // when redeeming bond\\n    uint256 public discountPercent;\\n    uint256 public premiumThreshold;\\n    uint256 public premiumPercent;\\n    uint256 public mintingFactorForPayingDebt; // print extra GRAVE during debt phase\\n\\n    address public daoFund;\\n    uint256 public daoFundSharedPercent;\\n\\n    address public devFund;\\n    uint256 public devFundSharedPercent;\\n\\n    /* =================== Events =================== */\\n\\n    event Initialized(address indexed executor, uint256 at);\\n    event BurnedBonds(address indexed from, uint256 bondAmount);\\n    event RedeemedBonds(address indexed from, uint256 graveAmount, uint256 bondAmount);\\n    event BoughtBonds(address indexed from, uint256 graveAmount, uint256 bondAmount);\\n    event TreasuryFunded(uint256 timestamp, uint256 seigniorage);\\n    event BoardroomFunded(uint256 timestamp, uint256 seigniorage);\\n    event DaoFundFunded(uint256 timestamp, uint256 seigniorage);\\n    event DevFundFunded(uint256 timestamp, uint256 seigniorage);\\n\\n    /* =================== Modifier =================== */\\n\\n    modifier onlyOperator() {\\n        require(operator == msg.sender, \\\"Treasury: caller is not the operator\\\");\\n        _;\\n    }\\n\\n    modifier checkCondition {\\n        require(now >= startTime, \\\"Treasury: not started yet\\\");\\n\\n        _;\\n    }\\n\\n    modifier checkEpoch {\\n        require(now >= nextEpochPoint(), \\\"Treasury: not opened yet\\\");\\n\\n        _;\\n\\n        epoch = epoch.add(1);\\n        epochSupplyContractionLeft = (getGravePrice() > gravePriceCeiling) ? 0 : getGraveCirculatingSupply().mul(maxSupplyContractionPercent).div(10000);\\n    }\\n\\n    modifier checkOperator {\\n        require(\\n            IBasisAsset(grave).operator() == address(this) &&\\n                IBasisAsset(xbond).operator() == address(this) &&\\n                IBasisAsset(xshare).operator() == address(this) &&\\n                Operator(masonry).operator() == address(this),\\n            \\\"Treasury: need more permission\\\"\\n        );\\n\\n        _;\\n    }\\n\\n    modifier notInitialized {\\n        require(!initialized, \\\"Treasury: already initialized\\\");\\n\\n        _;\\n    }\\n\\n    /* ========== VIEW FUNCTIONS ========== */\\n\\n    function isInitialized() public view returns (bool) {\\n        return initialized;\\n    }\\n\\n    // epoch\\n    function nextEpochPoint() public view returns (uint256) {\\n        return startTime.add(epoch.mul(PERIOD));\\n    }\\n\\n    // oracle\\n    function getGravePrice() public view returns (uint256 gravePrice) {\\n        try IOracle(graveOracle).consult(grave, 1e18) returns (uint144 price) {\\n            return uint256(price);\\n        } catch {\\n            revert(\\\"Treasury: failed to consult GRAVE price from the oracle\\\");\\n        }\\n    }\\n\\n    function getGraveUpdatedPrice() public view returns (uint256 _gravePrice) {\\n        try IOracle(graveOracle).twap(grave, 1e18) returns (uint144 price) {\\n            return uint256(price);\\n        } catch {\\n            revert(\\\"Treasury: failed to consult GRAVE price from the oracle\\\");\\n        }\\n    }\\n\\n    // budget\\n    function getReserve() public view returns (uint256) {\\n        return seigniorageSaved;\\n    }\\n\\n    function getBurnableGraveLeft() public view returns (uint256 _burnableGraveLeft) {\\n        uint256 _gravePrice = getGravePrice();\\n        if (_gravePrice <= gravePriceOne) {\\n            uint256 _graveSupply = getGraveCirculatingSupply();\\n            uint256 _bondMaxSupply = _graveSupply.mul(maxDebtRatioPercent).div(10000);\\n            uint256 _bondSupply = IERC20(xbond).totalSupply();\\n            if (_bondMaxSupply > _bondSupply) {\\n                uint256 _maxMintableBond = _bondMaxSupply.sub(_bondSupply);\\n                uint256 _maxBurnableGrave = _maxMintableBond.mul(_gravePrice).div(1e18);\\n                _burnableGraveLeft = Math.min(epochSupplyContractionLeft, _maxBurnableGrave);\\n            }\\n        }\\n    }\\n\\n    function getRedeemableBonds() public view returns (uint256 _redeemableBonds) {\\n        uint256 _gravePrice = getGravePrice();\\n        if (_gravePrice > gravePriceCeiling) {\\n            uint256 _totalGrave = IERC20(grave).balanceOf(address(this));\\n            uint256 _rate = getBondPremiumRate();\\n            if (_rate > 0) {\\n                _redeemableBonds = _totalGrave.mul(1e18).div(_rate);\\n            }\\n        }\\n    }\\n\\n    function getBondDiscountRate() public view returns (uint256 _rate) {\\n        uint256 _gravePrice = getGravePrice();\\n        if (_gravePrice <= gravePriceOne) {\\n            if (discountPercent == 0) {\\n                // no discount\\n                _rate = gravePriceOne;\\n            } else {\\n                uint256 _bondAmount = gravePriceOne.mul(1e18).div(_gravePrice); // to burn 1 GRAVE\\n                uint256 _discountAmount = _bondAmount.sub(gravePriceOne).mul(discountPercent).div(10000);\\n                _rate = gravePriceOne.add(_discountAmount);\\n                if (maxDiscountRate > 0 && _rate > maxDiscountRate) {\\n                    _rate = maxDiscountRate;\\n                }\\n            }\\n        }\\n    }\\n\\n    function getBondPremiumRate() public view returns (uint256 _rate) {\\n        uint256 _gravePrice = getGravePrice();\\n        if (_gravePrice > gravePriceCeiling) {\\n            uint256 _gravePricePremiumThreshold = gravePriceOne.mul(premiumThreshold).div(100);\\n            if (_gravePrice >= _gravePricePremiumThreshold) {\\n                //Price > 1.10\\n                uint256 _premiumAmount = _gravePrice.sub(gravePriceOne).mul(premiumPercent).div(10000);\\n                _rate = gravePriceOne.add(_premiumAmount);\\n                if (maxPremiumRate > 0 && _rate > maxPremiumRate) {\\n                    _rate = maxPremiumRate;\\n                }\\n            } else {\\n                // no premium bonus\\n                _rate = gravePriceOne;\\n            }\\n        }\\n    }\\n\\n    /* ========== GOVERNANCE ========== */\\n\\n    function initialize(\\n        address _grave,\\n        address _xbond,\\n        address _xshare,\\n        address _graveOracle,\\n        address _masonry,\\n        address _genesisPool,\\n        // address _bondTreasury,\\n        uint256 _startTime\\n    ) public notInitialized {\\n        grave = _grave;\\n        xbond = _xbond;\\n        xshare = _xshare;\\n        graveOracle = _graveOracle;\\n        masonry = _masonry;\\n        // bondTreasury = _bondTreasury;\\n        startTime = _startTime;\\n\\n        gravePriceOne = 10**18;\\n        gravePriceCeiling = gravePriceOne.mul(101).div(100);\\n\\n        // exclude contracts from total supply\\n        excludedFromTotalSupply.push(_genesisPool);\\n        // excludedFromTotalSupply.push(_bondTreasury);\\n\\n        // Dynamic max expansion percent\\n        supplyTiers = [10000 ether, 15000 ether, 25000 ether, 35000 ether, 60000 ether, 250000 ether, 500000 ether, 1000000 ether];\\n        maxExpansionTiers = [450, 400, 350, 300, 250, 200, 150, 125];\\n\\n        maxSupplyExpansionPercent = 450; // Upto 4.5% supply for expansion\\n\\n        bondDepletionFloorPercent = 10000; // 100% of Bond supply for depletion floor\\n        seigniorageExpansionFloorPercent = 3500; // At least 35% of expansion reserved for masonry\\n        maxSupplyContractionPercent = 300; // Upto 3.0% supply for contraction (to burn GRAVE and mint tBOND)\\n        maxDebtRatioPercent = 3500; // Upto 35% supply of tBOND to purchase\\n\\n        bondSupplyExpansionPercent = 500; // maximum 5% emissions per epoch for POL bonds\\n\\n        premiumThreshold = 110;\\n        premiumPercent = 7000;\\n\\n        // First 28 epochs with 2.5% expansion\\n        bootstrapEpochs = 12;\\n        bootstrapSupplyExpansionPercent = 250;\\n\\n        // set seigniorageSaved to it's balance\\n        seigniorageSaved = IERC20(grave).balanceOf(address(this));\\n\\n        initialized = true;\\n        operator = msg.sender;\\n        emit Initialized(msg.sender, block.number);\\n    }\\n\\n    function setOperator(address _operator) external onlyOperator {\\n        operator = _operator;\\n    }\\n\\n    function setBoardroom(address _masonry) external onlyOperator {\\n        masonry = _masonry;\\n    }\\n\\n    // function setBondTreasury(address _bondTreasury) external onlyOperator {\\n    //     bondTreasury = _bondTreasury;\\n    // }\\n\\n    function setGraveOracle(address _graveOracle) external onlyOperator {\\n        graveOracle = _graveOracle;\\n    }\\n\\n    function setGravePriceCeiling(uint256 _gravePriceCeiling) external onlyOperator {\\n        require(_gravePriceCeiling >= gravePriceOne && _gravePriceCeiling <= gravePriceOne.mul(120).div(100), \\\"out of range\\\"); // [$1.0, $1.2]\\n        gravePriceCeiling = _gravePriceCeiling;\\n    }\\n\\n    function setMaxSupplyExpansionPercents(uint256 _maxSupplyExpansionPercent) external onlyOperator {\\n        require(_maxSupplyExpansionPercent >= 10 && _maxSupplyExpansionPercent <= 1000, \\\"_maxSupplyExpansionPercent: out of range\\\"); // [0.1%, 10%]\\n        maxSupplyExpansionPercent = _maxSupplyExpansionPercent;\\n    }\\n\\n    function setSupplyTiersEntry(uint8 _index, uint256 _value) external onlyOperator returns (bool) {\\n        require(_index >= 0, \\\"Index has to be higher than 0\\\");\\n        require(_index < 9, \\\"Index has to be lower than count of tiers\\\");\\n        if (_index > 0) {\\n            require(_value > supplyTiers[_index - 1]);\\n        }\\n        if (_index < 8) {\\n            require(_value < supplyTiers[_index + 1]);\\n        }\\n        supplyTiers[_index] = _value;\\n        return true;\\n    }\\n\\n    function setMaxExpansionTiersEntry(uint8 _index, uint256 _value) external onlyOperator returns (bool) {\\n        require(_index >= 0, \\\"Index has to be higher than 0\\\");\\n        require(_index < 9, \\\"Index has to be lower than count of tiers\\\");\\n        require(_value >= 10 && _value <= 1000, \\\"_value: out of range\\\"); // [0.1%, 10%]\\n        maxExpansionTiers[_index] = _value;\\n        return true;\\n    }\\n\\n    function setBondDepletionFloorPercent(uint256 _bondDepletionFloorPercent) external onlyOperator {\\n        require(_bondDepletionFloorPercent >= 500 && _bondDepletionFloorPercent <= 10000, \\\"out of range\\\"); // [5%, 100%]\\n        bondDepletionFloorPercent = _bondDepletionFloorPercent;\\n    }\\n\\n    function setMaxSupplyContractionPercent(uint256 _maxSupplyContractionPercent) external onlyOperator {\\n        require(_maxSupplyContractionPercent >= 100 && _maxSupplyContractionPercent <= 1500, \\\"out of range\\\"); // [0.1%, 15%]\\n        maxSupplyContractionPercent = _maxSupplyContractionPercent;\\n    }\\n\\n    function setMaxDebtRatioPercent(uint256 _maxDebtRatioPercent) external onlyOperator {\\n        require(_maxDebtRatioPercent >= 1000 && _maxDebtRatioPercent <= 10000, \\\"out of range\\\"); // [10%, 100%]\\n        maxDebtRatioPercent = _maxDebtRatioPercent;\\n    }\\n\\n    function setBootstrap(uint256 _bootstrapEpochs, uint256 _bootstrapSupplyExpansionPercent) external onlyOperator {\\n        require(_bootstrapEpochs <= 120, \\\"_bootstrapEpochs: out of range\\\"); // <= 1 month\\n        require(_bootstrapSupplyExpansionPercent >= 100 && _bootstrapSupplyExpansionPercent <= 1000, \\\"_bootstrapSupplyExpansionPercent: out of range\\\"); // [1%, 10%]\\n        bootstrapEpochs = _bootstrapEpochs;\\n        bootstrapSupplyExpansionPercent = _bootstrapSupplyExpansionPercent;\\n    }\\n\\n    function setExtraFunds(\\n        address _daoFund,\\n        uint256 _daoFundSharedPercent,\\n        address _devFund,\\n        uint256 _devFundSharedPercent\\n    ) external onlyOperator {\\n        require(_daoFund != address(0), \\\"zero\\\");\\n        require(_daoFundSharedPercent <= 3000, \\\"out of range\\\"); // <= 30%\\n        require(_devFund != address(0), \\\"zero\\\");\\n        require(_devFundSharedPercent <= 1000, \\\"out of range\\\"); // <= 10%\\n        daoFund = _daoFund;\\n        daoFundSharedPercent = _daoFundSharedPercent;\\n        devFund = _devFund;\\n        devFundSharedPercent = _devFundSharedPercent;\\n    }\\n\\n    function setMaxDiscountRate(uint256 _maxDiscountRate) external onlyOperator {\\n        maxDiscountRate = _maxDiscountRate;\\n    }\\n\\n    function setMaxPremiumRate(uint256 _maxPremiumRate) external onlyOperator {\\n        maxPremiumRate = _maxPremiumRate;\\n    }\\n\\n    function setDiscountPercent(uint256 _discountPercent) external onlyOperator {\\n        require(_discountPercent <= 20000, \\\"_discountPercent is over 200%\\\");\\n        discountPercent = _discountPercent;\\n    }\\n\\n    function setPremiumThreshold(uint256 _premiumThreshold) external onlyOperator {\\n        require(_premiumThreshold >= gravePriceCeiling, \\\"_premiumThreshold exceeds gravePriceCeiling\\\");\\n        require(_premiumThreshold <= 150, \\\"_premiumThreshold is higher than 1.5\\\");\\n        premiumThreshold = _premiumThreshold;\\n    }\\n\\n    function setPremiumPercent(uint256 _premiumPercent) external onlyOperator {\\n        require(_premiumPercent <= 20000, \\\"_premiumPercent is over 200%\\\");\\n        premiumPercent = _premiumPercent;\\n    }\\n\\n    function setMintingFactorForPayingDebt(uint256 _mintingFactorForPayingDebt) external onlyOperator {\\n        require(_mintingFactorForPayingDebt >= 10000 && _mintingFactorForPayingDebt <= 20000, \\\"_mintingFactorForPayingDebt: out of range\\\"); // [100%, 200%]\\n        mintingFactorForPayingDebt = _mintingFactorForPayingDebt;\\n    }\\n\\n    function setBondSupplyExpansionPercent(uint256 _bondSupplyExpansionPercent) external onlyOperator {\\n        bondSupplyExpansionPercent = _bondSupplyExpansionPercent;\\n    }\\n\\n    /* ========== MUTABLE FUNCTIONS ========== */\\n\\n    function _updateGravePrice() internal {\\n        try IOracle(graveOracle).update() {} catch {}\\n    }\\n\\n    function getGraveCirculatingSupply() public view returns (uint256) {\\n        IERC20 graveErc20 = IERC20(grave);\\n        uint256 totalSupply = graveErc20.totalSupply();\\n        uint256 balanceExcluded = 0;\\n        for (uint8 entryId = 0; entryId < excludedFromTotalSupply.length; ++entryId) {\\n            balanceExcluded = balanceExcluded.add(graveErc20.balanceOf(excludedFromTotalSupply[entryId]));\\n        }\\n        return totalSupply.sub(balanceExcluded);\\n    }\\n\\n    function buyBonds(uint256 _graveAmount, uint256 targetPrice) external onlyOneBlock checkCondition checkOperator {\\n        require(_graveAmount > 0, \\\"Treasury: cannot purchase bonds with zero amount\\\");\\n\\n        uint256 gravePrice = getGravePrice();\\n        require(gravePrice == targetPrice, \\\"Treasury: GRAVE price moved\\\");\\n        require(\\n            gravePrice < gravePriceOne, // price < $1\\n            \\\"Treasury: gravePrice not eligible for bond purchase\\\"\\n        );\\n\\n        require(_graveAmount <= epochSupplyContractionLeft, \\\"Treasury: not enough bond left to purchase\\\");\\n\\n        uint256 _rate = getBondDiscountRate();\\n        require(_rate > 0, \\\"Treasury: invalid bond rate\\\");\\n\\n        uint256 _bondAmount = _graveAmount.mul(_rate).div(1e18);\\n        uint256 graveSupply = getGraveCirculatingSupply();\\n        uint256 newBondSupply = IERC20(xbond).totalSupply().add(_bondAmount);\\n        require(newBondSupply <= graveSupply.mul(maxDebtRatioPercent).div(10000), \\\"over max debt ratio\\\");\\n\\n        IBasisAsset(grave).burnFrom(msg.sender, _graveAmount);\\n        IBasisAsset(xbond).mint(msg.sender, _bondAmount);\\n\\n        epochSupplyContractionLeft = epochSupplyContractionLeft.sub(_graveAmount);\\n        _updateGravePrice();\\n\\n        emit BoughtBonds(msg.sender, _graveAmount, _bondAmount);\\n    }\\n\\n    function redeemBonds(uint256 _bondAmount, uint256 targetPrice) external onlyOneBlock checkCondition checkOperator {\\n        require(_bondAmount > 0, \\\"Treasury: cannot redeem bonds with zero amount\\\");\\n\\n        uint256 gravePrice = getGravePrice();\\n        require(gravePrice == targetPrice, \\\"Treasury: GRAVE price moved\\\");\\n        require(\\n            gravePrice > gravePriceCeiling, // price > $1.01\\n            \\\"Treasury: gravePrice not eligible for bond purchase\\\"\\n        );\\n\\n        uint256 _rate = getBondPremiumRate();\\n        require(_rate > 0, \\\"Treasury: invalid bond rate\\\");\\n\\n        uint256 _graveAmount = _bondAmount.mul(_rate).div(1e18);\\n        require(IERC20(grave).balanceOf(address(this)) >= _graveAmount, \\\"Treasury: treasury has no more budget\\\");\\n\\n        seigniorageSaved = seigniorageSaved.sub(Math.min(seigniorageSaved, _graveAmount));\\n\\n        IBasisAsset(xbond).burnFrom(msg.sender, _bondAmount);\\n        IERC20(grave).safeTransfer(msg.sender, _graveAmount);\\n\\n        _updateGravePrice();\\n\\n        emit RedeemedBonds(msg.sender, _graveAmount, _bondAmount);\\n    }\\n\\n    function _sendToBoardroom(uint256 _amount) internal {\\n        IBasisAsset(grave).mint(address(this), _amount);\\n\\n        uint256 _daoFundSharedAmount = 0;\\n        if (daoFundSharedPercent > 0) {\\n            _daoFundSharedAmount = _amount.mul(daoFundSharedPercent).div(10000);\\n            IERC20(grave).transfer(daoFund, _daoFundSharedAmount);\\n            emit DaoFundFunded(now, _daoFundSharedAmount);\\n        }\\n\\n        uint256 _devFundSharedAmount = 0;\\n        if (devFundSharedPercent > 0) {\\n            _devFundSharedAmount = _amount.mul(devFundSharedPercent).div(10000);\\n            IERC20(grave).transfer(devFund, _devFundSharedAmount);\\n            emit DevFundFunded(now, _devFundSharedAmount);\\n        }\\n\\n        _amount = _amount.sub(_daoFundSharedAmount).sub(_devFundSharedAmount);\\n\\n        IERC20(grave).safeApprove(masonry, 0);\\n        IERC20(grave).safeApprove(masonry, _amount);\\n        IBoardroom(masonry).allocateSeigniorage(_amount);\\n        emit BoardroomFunded(now, _amount);\\n    }\\n\\n    // function _sendToBondTreasury(uint256 _amount) internal {\\n    //     uint256 treasuryBalance = IERC20(grave).balanceOf(bondTreasury);\\n    //     uint256 treasuryVested = IBondTreasury(bondTreasury).totalVested();\\n    //     if (treasuryVested >= treasuryBalance) return;\\n    //     uint256 unspent = treasuryBalance.sub(treasuryVested);\\n    //     if (_amount > unspent) {\\n    //         IBasisAsset(grave).mint(bondTreasury, _amount.sub(unspent));\\n    //     }\\n    // }\\n\\n    function _calculateMaxSupplyExpansionPercent(uint256 _graveSupply) internal returns (uint256) {\\n        for (uint8 tierId = 8; tierId >= 0; --tierId) {\\n            if (_graveSupply >= supplyTiers[tierId]) {\\n                maxSupplyExpansionPercent = maxExpansionTiers[tierId];\\n                break;\\n            }\\n        }\\n        return maxSupplyExpansionPercent;\\n    }\\n\\n    function allocateSeigniorage() external onlyOneBlock checkCondition checkEpoch checkOperator {\\n        _updateGravePrice();\\n        previousEpochGravePrice = getGravePrice();\\n        uint256 graveSupply = getGraveCirculatingSupply().sub(seigniorageSaved);\\n        // _sendToBondTreasury(graveSupply.mul(bondSupplyExpansionPercent).div(10000));\\n        if (epoch < bootstrapEpochs) {\\n            // 28 first epochs with 4.5% expansion\\n            _sendToBoardroom(graveSupply.mul(bootstrapSupplyExpansionPercent).div(10000));\\n        } else {\\n            if (previousEpochGravePrice > gravePriceCeiling) {\\n                // Expansion ($GRAVE Price > 1 $FTM): there is some seigniorage to be allocated\\n                uint256 bondSupply = IERC20(xbond).totalSupply();\\n                uint256 _percentage = previousEpochGravePrice.sub(gravePriceOne);\\n                uint256 _savedForBond;\\n                uint256 _savedForBoardroom;\\n                uint256 _mse = _calculateMaxSupplyExpansionPercent(graveSupply).mul(1e14);\\n                if (_percentage > _mse) {\\n                    _percentage = _mse;\\n                }\\n                if (seigniorageSaved >= bondSupply.mul(bondDepletionFloorPercent).div(10000)) {\\n                    // saved enough to pay debt, mint as usual rate\\n                    _savedForBoardroom = graveSupply.mul(_percentage).div(1e18);\\n                } else {\\n                    // have not saved enough to pay debt, mint more\\n                    uint256 _seigniorage = graveSupply.mul(_percentage).div(1e18);\\n                    _savedForBoardroom = _seigniorage.mul(seigniorageExpansionFloorPercent).div(10000);\\n                    _savedForBond = _seigniorage.sub(_savedForBoardroom);\\n                    if (mintingFactorForPayingDebt > 0) {\\n                        _savedForBond = _savedForBond.mul(mintingFactorForPayingDebt).div(10000);\\n                    }\\n                }\\n                if (_savedForBoardroom > 0) {\\n                    _sendToBoardroom(_savedForBoardroom);\\n                }\\n                if (_savedForBond > 0) {\\n                    seigniorageSaved = seigniorageSaved.add(_savedForBond);\\n                    IBasisAsset(grave).mint(address(this), _savedForBond);\\n                    emit TreasuryFunded(now, _savedForBond);\\n                }\\n            }\\n        }\\n    }\\n\\n    function governanceRecoverUnsupported(\\n        IERC20 _token,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyOperator {\\n        // do not allow to drain core tokens\\n        require(address(_token) != address(grave), \\\"grave\\\");\\n        require(address(_token) != address(xbond), \\\"bond\\\");\\n        require(address(_token) != address(xshare), \\\"share\\\");\\n        _token.safeTransfer(_to, _amount);\\n    }\\n\\n    function masonrySetOperator(address _operator) external onlyOperator {\\n        IBoardroom(masonry).setOperator(_operator);\\n    }\\n\\n    function masonrySetLockUp(uint256 _withdrawLockupEpochs, uint256 _rewardLockupEpochs) external onlyOperator {\\n        IBoardroom(masonry).setLockUp(_withdrawLockupEpochs, _rewardLockupEpochs);\\n    }\\n\\n    function masonryAllocateSeigniorage(uint256 amount) external onlyOperator {\\n        IBoardroom(masonry).allocateSeigniorage(amount);\\n    }\\n\\n    function masonryGovernanceRecoverUnsupported(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyOperator {\\n        IBoardroom(masonry).governanceRecoverUnsupported(_token, _amount, _to);\\n    }\\n}\\n\",\"keccak256\":\"0x7849747a66f6bcc1618368bca68c1e8636d8a8cec5b834763adccee9e59c1060\",\"license\":\"MIT\"},\"contracts/interfaces/IBasisAsset.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface IBasisAsset {\\n    function mint(address recipient, uint256 amount) external returns (bool);\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address from, uint256 amount) external;\\n\\n    function isOperator() external returns (bool);\\n\\n    function operator() external view returns (address);\\n\\n    function transferOperator(address newOperator_) external;\\n}\\n\",\"keccak256\":\"0x65d4e44c274e77cdee82cdc89c39332cea229611813ba471a28b422ebc97020b\"},\"contracts/interfaces/IBoardroom.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IBoardroom {\\n    function balanceOf(address _mason) external view returns (uint256);\\n\\n    function earned(address _mason) external view returns (uint256);\\n\\n    function canWithdraw(address _mason) external view returns (bool);\\n\\n    function canClaimReward(address _mason) external view returns (bool);\\n\\n    function epoch() external view returns (uint256);\\n\\n    function nextEpochPoint() external view returns (uint256);\\n\\n    function getGravePrice() external view returns (uint256);\\n\\n    function setOperator(address _operator) external;\\n\\n    function setLockUp(uint256 _withdrawLockupEpochs, uint256 _rewardLockupEpochs) external;\\n\\n    function stake(uint256 _amount) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function exit() external;\\n\\n    function claimReward() external;\\n\\n    function allocateSeigniorage(uint256 _amount) external;\\n\\n    function governanceRecoverUnsupported(address _token, uint256 _amount, address _to) external;\\n}\\n\",\"keccak256\":\"0x8ae09d7301f4543746d757912a8af6f34647cd4f2f7f6e30197f18267fecf4c9\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IOracle {\\n    function update() external;\\n\\n    function consult(address _token, uint256 _amountIn) external view returns (uint144 amountOut);\\n\\n    function twap(address _token, uint256 _amountIn) external view returns (uint144 _amountOut);\\n}\\n\",\"keccak256\":\"0xfe915dcf8502dacae92ed455f5e9e3c5cc159a7ad809f11b333de493c98828d3\",\"license\":\"MIT\"},\"contracts/lib/Babylonian.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nlibrary Babylonian {\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n        // else z = 0\\n    }\\n}\\n\",\"keccak256\":\"0xc61b631f3af3985b803e3b42434d3aca198e0880eb338afe46483d7f36e93eeb\"},\"contracts/owner/Operator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Operator is Context, Ownable {\\n    address private _operator;\\n\\n    event OperatorTransferred(address indexed previousOperator, address indexed newOperator);\\n\\n    constructor() internal {\\n        _operator = _msgSender();\\n        emit OperatorTransferred(address(0), _operator);\\n    }\\n\\n    function operator() public view returns (address) {\\n        return _operator;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(_operator == msg.sender, \\\"operator: caller is not the operator\\\");\\n        _;\\n    }\\n\\n    function isOperator() public view returns (bool) {\\n        return _msgSender() == _operator;\\n    }\\n\\n    function transferOperator(address newOperator_) public onlyOwner {\\n        _transferOperator(newOperator_);\\n    }\\n\\n    function _transferOperator(address newOperator_) internal {\\n        require(newOperator_ != address(0), \\\"operator: zero address given for new operator\\\");\\n        emit OperatorTransferred(address(0), newOperator_);\\n        _operator = newOperator_;\\n    }\\n}\\n\",\"keccak256\":\"0x1ae1bc52c72e3ad2fc80f7863e454f2bff37b902fa1ad639859681369e9b82db\",\"license\":\"MIT\"},\"contracts/utils/ContractGuard.sol\":{\"content\":\"pragma solidity 0.6.12;\\n\\ncontract ContractGuard {\\n    mapping(uint256 => mapping(address => bool)) private _status;\\n\\n    function checkSameOriginReentranted() internal view returns (bool) {\\n        return _status[block.number][tx.origin];\\n    }\\n\\n    function checkSameSenderReentranted() internal view returns (bool) {\\n        return _status[block.number][msg.sender];\\n    }\\n\\n    modifier onlyOneBlock() {\\n        require(!checkSameOriginReentranted(), \\\"ContractGuard: one block, one function\\\");\\n        require(!checkSameSenderReentranted(), \\\"ContractGuard: one block, one function\\\");\\n\\n        _;\\n\\n        _status[block.number][tx.origin] = true;\\n        _status[block.number][msg.sender] = true;\\n    }\\n}\\n\",\"keccak256\":\"0xd03133e993eda67ef61eac7a1bbdfc605b4eaec6503ba5614d7c77984fb0589e\"}},\"version\":1}",
  "bytecode": "0x60806040526001805460ff60a01b191690556000600381905560045534801561002757600080fd5b50614c8c806100376000396000f3fe608060405234801561001057600080fd5b50600436106104de5760003560e01c806378e9792511610286578063b4a5e9281161016b578063d4b14944116100e3578063f14698de11610097578063fb260df11161007c578063fb260df114610aab578063fcb6f00814610ab3578063ffff6dfb14610abb576104de565b8063f14698de14610a86578063f245245a14610a8e576104de565b8063da3ed419116100c8578063da3ed41914610a59578063e90b245414610a61578063e9c2ce1114610a69576104de565b8063d4b1494414610a2b578063d98f249514610a51576104de565b8063be266d541161013a578063c8412d021161011f578063c8412d02146109fe578063c8f987f314610a06578063cecce38e14610a0e576104de565b8063be266d54146109d9578063c5967c26146109f6576104de565b8063b4a5e92814610987578063b4d1d7951461098f578063b8a878f914610997578063bcc81f191461099f576104de565b8063951357d4116101fe578063a204452b116101cd578063b2a5fd81116101b2578063b2a5fd8114610933578063b3ab15fb1461093b578063b3ffc77714610961576104de565b8063a204452b1461090e578063a41cd0341461092b576104de565b8063951357d41461088157806398b762a1146108b757806399820025146108d4578063a0487eea146108f1576104de565b80638c664db611610255578063900cf0cf1161023a578063900cf0cf1461083057806391bbfed514610838578063940e60641461085b576104de565b80638c664db61461080b5780638d934f7414610828576104de565b806378e97925146107d657806381d11eaf146107de57806382cad838146107e6578063874106cc14610803576104de565b80634363f654116103c75780635a0fc79c1161033f57806366c17ead116102f35780636e5973f1116102d85780636e5973f1146107a357806372c054f9146107ab578063734f7096146107b3576104de565b806366c17ead146107935780636deec4731461079b576104de565b80635b86d859116103245780635b86d8591461075d57806362ac58e41461076557806363f96cf41461078b576104de565b80635a0fc79c1461074d5780635b75617914610755576104de565b806354f04a1111610396578063570ca7351161037b578063570ca73514610720578063591663e11461072857806359bf5d3914610745576104de565b806354f04a11146106f557806355ebdeef14610718576104de565b80634363f654146106925780634390d2a81461069a578063499f3f19146106a257806354575af4146106bf576104de565b8063154ec2db1161045a5780632e9c7b6511610429578063392e53cd1161040e578063392e53cd146106655780634013a08e1461066d57806340af7ba514610675576104de565b80632e9c7b6514610655578063349aa30a1461065d576104de565b8063154ec2db1461060c578063158ef93e1461062957806322f832cd1461064557806329ef19191461064d576104de565b80630b5bcec7116104b15780630db7eb0b116104965780630db7eb0b1461058b578063118ebbf9146105935780631460e390146105b6576104de565b80630b5bcec7146105665780630cf6017514610583576104de565b806303be7e76146104e357806304e5c7b1146104fd57806307e36ee31461051c5780630945958214610540575b600080fd5b6104eb610ac3565b60408051918252519081900360200190f35b61051a6004803603602081101561051357600080fd5b5035610ac9565b005b610524610b98565b604080516001600160a01b039092168252519081900360200190f35b61051a6004803603602081101561055657600080fd5b50356001600160a01b0316610ba7565b61051a6004803603602081101561057c57600080fd5b5035610c1f565b6104eb610cbb565b6104eb610d6d565b61051a600480360360408110156105a957600080fd5b5080359060200135610e0f565b61051a600480360360e08110156105cc57600080fd5b506001600160a01b038135811691602081013582169160408201358116916060810135821691608082013581169160a08101359091169060c001356114a2565b61051a6004803603602081101561062257600080fd5b5035611847565b6106316118ec565b604080519115158252519081900360200190f35b6104eb61190d565b6104eb611913565b6104eb611919565b6104eb61191f565b610631611925565b6104eb611947565b61051a6004803603602081101561068b57600080fd5b503561194d565b6105246119f2565b610524611a01565b61051a600480360360208110156106b857600080fd5b5035611a10565b61051a600480360360608110156106d557600080fd5b506001600160a01b03813581169160208101359160409091013516611aad565b61051a6004803603604081101561070b57600080fd5b5080359060200135611c3a565b6104eb6123b9565b6105246123bf565b61051a6004803603602081101561073e57600080fd5b50356123ce565b6104eb612481565b6104eb612487565b61051a61248d565b6104eb612b75565b61051a6004803603602081101561077b57600080fd5b50356001600160a01b0316612b7b565b610524612c46565b6104eb612c55565b610524612d4b565b6104eb612d5a565b6104eb612d60565b61051a600480360360408110156107c957600080fd5b5080359060200135612e39565b6104eb612f0b565b6104eb612f11565b610524600480360360208110156107fc57600080fd5b5035612f17565b6104eb612f3e565b61051a6004803603602081101561082157600080fd5b5035612f44565b610524612ff7565b6104eb613006565b61051a6004803603604081101561084e57600080fd5b508035906020013561300c565b6106316004803603604081101561087157600080fd5b5060ff8135169060200135613104565b61051a6004803603606081101561089757600080fd5b506001600160a01b03813581169160208101359160409091013516613220565b61051a600480360360208110156108cd57600080fd5b50356132fc565b6104eb600480360360208110156108ea57600080fd5b503561334a565b6104eb6004803603602081101561090757600080fd5b5035613368565b61051a6004803603602081101561092457600080fd5b5035613375565b6105246133c3565b6104eb6133d2565b61051a6004803603602081101561095157600080fd5b50356001600160a01b03166134d9565b61051a6004803603602081101561097757600080fd5b50356001600160a01b0316613551565b6104eb6135c9565b6104eb6135cf565b6104eb6135d5565b61051a600480360360808110156109b557600080fd5b506001600160a01b03813581169160208101359160408201351690606001356135db565b61051a600480360360208110156109ef57600080fd5b50356137d1565b6104eb613880565b6104eb6138aa565b6104eb6138b0565b61051a60048036036020811015610a2457600080fd5b50356138b6565b61063160048036036040811015610a4157600080fd5b5060ff8135169060200135613968565b6104eb613a6b565b6104eb613a71565b6104eb613a77565b61051a60048036036020811015610a7f57600080fd5b5035613a7d565b6104eb613b48565b61051a60048036036020811015610aa457600080fd5b5035613b4e565b6104eb613b9c565b6104eb613c17565b6104eb613c1d565b60225481565b6001546001600160a01b03163314610b125760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b600c54811015610b535760405162461bcd60e51b815260040180806020018281038252602b815260200180614bd4602b913960400191505060405180910390fd5b6096811115610b935760405162461bcd60e51b81526004018080602001828103825260248152602001806149866024913960400191505060405180910390fd5b601c55565b6008546001600160a01b031681565b6001546001600160a01b03163314610bf05760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b600a805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001546001600160a01b03163314610c685760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b600a8110158015610c7b57506103e88111155b610cb65760405162461bcd60e51b8152600401808060200182810382526028815260200180614aa26028913960400191505060405180910390fd5b601055565b600080610cc6613b9c565b9050600b548111610d6957601b54610ce257600b549150610d69565b6000610d0b82610d05670de0b6b3a7640000600b54613d8e90919063ffffffff16565b90613dee565b90506000610d36612710610d05601b54610d30600b5487613e5590919063ffffffff16565b90613d8e565b600b54909150610d469082613eb2565b93506000601954118015610d5b575060195484115b15610d665760195493505b50505b5090565b600080610d78613b9c565b9050600c54811115610d69576000610da26064610d05601c54600b54613d8e90919063ffffffff16565b9050808210610e04576000610dce612710610d05601d54610d30600b5488613e5590919063ffffffff16565b600b54909150610dde9082613eb2565b93506000601a54118015610df35750601a5484115b15610dfe57601a5493505b50610e0a565b600b5492505b505090565b610e17613f0c565b15610e535760405162461bcd60e51b8152600401808060200182810382526026815260200180614b786026913960400191505060405180910390fd5b610e5b613f2b565b15610e975760405162461bcd60e51b8152600401808060200182810382526026815260200180614b786026913960400191505060405180910390fd5b600254421015610eee576040805162461bcd60e51b815260206004820152601960248201527f54726561737572793a206e6f7420737461727465642079657400000000000000604482015290519081900360640190fd5b6006546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b158015610f3257600080fd5b505afa158015610f46573d6000803e3d6000fd5b505050506040513d6020811015610f5c57600080fd5b50516001600160a01b0316148015610fea57506007546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b158015610fb357600080fd5b505afa158015610fc7573d6000803e3d6000fd5b505050506040513d6020811015610fdd57600080fd5b50516001600160a01b0316145b801561106c57506008546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561103557600080fd5b505afa158015611049573d6000803e3d6000fd5b505050506040513d602081101561105f57600080fd5b50516001600160a01b0316145b80156110ee57506009546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b1580156110b757600080fd5b505afa1580156110cb573d6000803e3d6000fd5b505050506040513d60208110156110e157600080fd5b50516001600160a01b0316145b61113f576040805162461bcd60e51b815260206004820152601e60248201527f54726561737572793a206e656564206d6f7265207065726d697373696f6e0000604482015290519081900360640190fd5b6000821161117e5760405162461bcd60e51b815260040180806020018281038252602e815260200180614958602e913960400191505060405180910390fd5b6000611188613b9c565b90508181146111de576040805162461bcd60e51b815260206004820152601b60248201527f54726561737572793a204752415645207072696365206d6f7665640000000000604482015290519081900360640190fd5b600c54811161121e5760405162461bcd60e51b8152600401808060200182810382526033815260200180614a466033913960400191505060405180910390fd5b6000611228610d6d565b90506000811161127f576040805162461bcd60e51b815260206004820152601b60248201527f54726561737572793a20696e76616c696420626f6e6420726174650000000000604482015290519081900360640190fd5b6000611297670de0b6b3a7640000610d058785613d8e565b600654604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905192935083926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561130057600080fd5b505afa158015611314573d6000803e3d6000fd5b505050506040513d602081101561132a57600080fd5b505110156113695760405162461bcd60e51b81526004018080602001828103825260258152602001806149d06025913960400191505060405180910390fd5b611381611378600d5483613f4a565b600d5490613e55565b600d55600754604080517f79cc67900000000000000000000000000000000000000000000000000000000081523360048201526024810188905290516001600160a01b03909216916379cc67909160448082019260009290919082900301818387803b1580156113f057600080fd5b505af1158015611404573d6000803e3d6000fd5b505060065461142092506001600160a01b031690503383613f60565b611428613fe0565b6040805182815260208101879052815133927f51e0d16595cabc591e64da08e45bb223577e5b9a39cd947b4ddc3472b2dd8878928290030190a25050436000908152602081815260408083203284529091528082208054600160ff1991821681179092553384529190922080549091169091179055505050565b60015474010000000000000000000000000000000000000000900460ff1615611512576040805162461bcd60e51b815260206004820152601d60248201527f54726561737572793a20616c726561647920696e697469616c697a6564000000604482015290519081900360640190fd5b6006805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b038a811691909117909255600780548216898416179055600880548216888416179055600a80548216878416179055600980549091169185169190911790556002819055670de0b6b3a7640000600b81905561159a90606490610d05906065613d8e565b600c55600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038416179055604080516101008101825269021e19e0c9bab2400000815269032d26d12e980b600000602082015269054b40b1f852bda00000918101919091526907695a92c20d6fe000006060820152690cb49b44ba602d80000060808201526934f086f3b33b6840000060a08201526969e10de76676d080000060c082015269d3c21bcecceda100000060e082015261168d90600e9060086148ac565b5060408051610100810182526101c28152610190602082015261015e9181019190915261012c606082015260fa608082015260c860a0820152609660c0820152607d60e08201526116e290600f906008614901565b506101c2601055612710601155610dac601281905561012c6013556014556101f4601555606e601c55611b58601d55600c60165560fa601755600654604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561177f57600080fd5b505afa158015611793573d6000803e3d6000fd5b505050506040513d60208110156117a957600080fd5b5051600d556001805473ffffffffffffffffffffffffffffffffffffffff197fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff909116740100000000000000000000000000000000000000001716339081179091556040805143815290517f25ff68dd81b34665b5ba7e553ee5511bf6812e12adb4a7e2c0d9e26b3099ce799181900360200190a250505050505050565b6001546001600160a01b031633146118905760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b614e208111156118e7576040805162461bcd60e51b815260206004820152601d60248201527f5f646973636f756e7450657263656e74206973206f7665722032303025000000604482015290519081900360640190fd5b601b55565b60015474010000000000000000000000000000000000000000900460ff1681565b60125481565b601b5481565b601a5481565b60155481565b60015474010000000000000000000000000000000000000000900460ff165b90565b601e5481565b6001546001600160a01b031633146119965760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b614e208111156119ed576040805162461bcd60e51b815260206004820152601c60248201527f5f7072656d69756d50657263656e74206973206f766572203230302500000000604482015290519081900360640190fd5b601d55565b6007546001600160a01b031681565b6021546001600160a01b031681565b6001546001600160a01b03163314611a595760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b6127108110158015611a6d5750614e208111155b611aa85760405162461bcd60e51b8152600401808060200182810382526029815260200180614a796029913960400191505060405180910390fd5b601e55565b6001546001600160a01b03163314611af65760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b6006546001600160a01b0384811691161415611b59576040805162461bcd60e51b815260206004820152600560248201527f6772617665000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6007546001600160a01b0384811691161415611bbe576040805162461bcd60e51b8152602060048083019190915260248201527f626f6e6400000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6008546001600160a01b0384811691161415611c21576040805162461bcd60e51b815260206004820152600560248201527f7368617265000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b611c356001600160a01b0384168284613f60565b505050565b611c42613f0c565b15611c7e5760405162461bcd60e51b8152600401808060200182810382526026815260200180614b786026913960400191505060405180910390fd5b611c86613f2b565b15611cc25760405162461bcd60e51b8152600401808060200182810382526026815260200180614b786026913960400191505060405180910390fd5b600254421015611d19576040805162461bcd60e51b815260206004820152601960248201527f54726561737572793a206e6f7420737461727465642079657400000000000000604482015290519081900360640190fd5b6006546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b158015611d5d57600080fd5b505afa158015611d71573d6000803e3d6000fd5b505050506040513d6020811015611d8757600080fd5b50516001600160a01b0316148015611e1557506007546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b158015611dde57600080fd5b505afa158015611df2573d6000803e3d6000fd5b505050506040513d6020811015611e0857600080fd5b50516001600160a01b0316145b8015611e9757506008546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b158015611e6057600080fd5b505afa158015611e74573d6000803e3d6000fd5b505050506040513d6020811015611e8a57600080fd5b50516001600160a01b0316145b8015611f1957506009546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b158015611ee257600080fd5b505afa158015611ef6573d6000803e3d6000fd5b505050506040513d6020811015611f0c57600080fd5b50516001600160a01b0316145b611f6a576040805162461bcd60e51b815260206004820152601e60248201527f54726561737572793a206e656564206d6f7265207065726d697373696f6e0000604482015290519081900360640190fd5b60008211611fa95760405162461bcd60e51b8152600401808060200182810382526030815260200180614a166030913960400191505060405180910390fd5b6000611fb3613b9c565b9050818114612009576040805162461bcd60e51b815260206004820152601b60248201527f54726561737572793a204752415645207072696365206d6f7665640000000000604482015290519081900360640190fd5b600b5481106120495760405162461bcd60e51b8152600401808060200182810382526033815260200180614a466033913960400191505060405180910390fd5b60045483111561208a5760405162461bcd60e51b815260040180806020018281038252602a815260200180614bff602a913960400191505060405180910390fd5b6000612094610cbb565b9050600081116120eb576040805162461bcd60e51b815260206004820152601b60248201527f54726561737572793a20696e76616c696420626f6e6420726174650000000000604482015290519081900360640190fd5b6000612103670de0b6b3a7640000610d058785613d8e565b9050600061210f613c1d565b9050600061219783600760009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561216557600080fd5b505afa158015612179573d6000803e3d6000fd5b505050506040513d602081101561218f57600080fd5b505190613eb2565b90506121b4612710610d0560145485613d8e90919063ffffffff16565b811115612208576040805162461bcd60e51b815260206004820152601360248201527f6f766572206d6178206465627420726174696f00000000000000000000000000604482015290519081900360640190fd5b600654604080517f79cc6790000000000000000000000000000000000000000000000000000000008152336004820152602481018a905290516001600160a01b03909216916379cc67909160448082019260009290919082900301818387803b15801561227457600080fd5b505af1158015612288573d6000803e3d6000fd5b5050600754604080517f40c10f190000000000000000000000000000000000000000000000000000000081523360048201526024810188905290516001600160a01b0390921693506340c10f1992506044808201926020929091908290030181600087803b1580156122f957600080fd5b505af115801561230d573d6000803e3d6000fd5b505050506040513d602081101561232357600080fd5b50506004546123329088613e55565b60045561233d613fe0565b6040805188815260208101859052815133927f73017f1b70789e2e66759eeb3c7ec11f59e6eedb55d921cfaec5410dd42a4799928290030190a25050436000908152602081815260408083203284529091528082208054600160ff19918216811790925533845291909220805490911690911790555050505050565b60205481565b6001546001600160a01b031681565b6001546001600160a01b031633146124175760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b6103e8811015801561242b57506127108111155b61247c576040805162461bcd60e51b815260206004820152600c60248201527f6f7574206f662072616e67650000000000000000000000000000000000000000604482015290519081900360640190fd5b601455565b600d5490565b600d5481565b612495613f0c565b156124d15760405162461bcd60e51b8152600401808060200182810382526026815260200180614b786026913960400191505060405180910390fd5b6124d9613f2b565b156125155760405162461bcd60e51b8152600401808060200182810382526026815260200180614b786026913960400191505060405180910390fd5b60025442101561256c576040805162461bcd60e51b815260206004820152601960248201527f54726561737572793a206e6f7420737461727465642079657400000000000000604482015290519081900360640190fd5b612574613880565b4210156125c8576040805162461bcd60e51b815260206004820152601860248201527f54726561737572793a206e6f74206f70656e6564207965740000000000000000604482015290519081900360640190fd5b6006546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561260c57600080fd5b505afa158015612620573d6000803e3d6000fd5b505050506040513d602081101561263657600080fd5b50516001600160a01b03161480156126c457506007546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561268d57600080fd5b505afa1580156126a1573d6000803e3d6000fd5b505050506040513d60208110156126b757600080fd5b50516001600160a01b0316145b801561274657506008546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561270f57600080fd5b505afa158015612723573d6000803e3d6000fd5b505050506040513d602081101561273957600080fd5b50516001600160a01b0316145b80156127c857506009546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561279157600080fd5b505afa1580156127a5573d6000803e3d6000fd5b505050506040513d60208110156127bb57600080fd5b50516001600160a01b0316145b612819576040805162461bcd60e51b815260206004820152601e60248201527f54726561737572793a206e656564206d6f7265207065726d697373696f6e0000604482015290519081900360640190fd5b612821613fe0565b612829613b9c565b601855600d546000906128449061283e613c1d565b90613e55565b9050601654600354101561287a57612875612870612710610d0560175485613d8e90919063ffffffff16565b614044565b612af9565b600c546018541115612af957600754604080517f18160ddd00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b1580156128e457600080fd5b505afa1580156128f8573d6000803e3d6000fd5b505050506040513d602081101561290e57600080fd5b5051600b5460185491925060009161292591613e55565b9050600080600061293f655af3107a4000610d30886143eb565b90508084111561294d578093505b612968612710610d0560115488613d8e90919063ffffffff16565b600d541061298d57612986670de0b6b3a7640000610d058887613d8e565b91506129f9565b60006129a5670de0b6b3a7640000610d058988613d8e565b90506129c2612710610d0560125484613d8e90919063ffffffff16565b92506129ce8184613e55565b601e54909450156129f7576129f4612710610d05601e5487613d8e90919063ffffffff16565b93505b505b8115612a0857612a0882614044565b8215612af357600d54612a1b9084613eb2565b600d55600654604080517f40c10f190000000000000000000000000000000000000000000000000000000081523060048201526024810186905290516001600160a01b03909216916340c10f19916044808201926020929091908290030181600087803b158015612a8b57600080fd5b505af1158015612a9f573d6000803e3d6000fd5b505050506040513d6020811015612ab557600080fd5b5050604080514281526020810185905281517ff705142bf09f04297640495ddf7c59b7fd6f51894c5aea9602d631cf05f0efc2929181900390910190a15b50505050505b50600354612b08906001613eb2565b600355600c54612b16613b9c565b11612b3457612b2f612710610d05601354610d30613c1d565b612b37565b60005b600455436000908152602081815260408083203284529091528082208054600160ff1991821681179092553384529190922080549091169091179055565b600b5481565b6001546001600160a01b03163314612bc45760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b600954604080517fb3ab15fb0000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301529151919092169163b3ab15fb91602480830192600092919082900301818387803b158015612c2b57600080fd5b505af1158015612c3f573d6000803e3d6000fd5b5050505050565b6009546001600160a01b031681565b600a54600654604080517f6808a1280000000000000000000000000000000000000000000000000000000081526001600160a01b039283166004820152670de0b6b3a7640000602482015290516000939290921691636808a12891604480820192602092909190829003018186803b158015612cd057600080fd5b505afa925050508015612cf557506040513d6020811015612cf057600080fd5b505160015b612d305760405162461bcd60e51b8152600401808060200182810382526037815260200180614af36037913960400191505060405180910390fd5b71ffffffffffffffffffffffffffffffffffff169050611944565b600a546001600160a01b031681565b60185481565b600080612d6b613b9c565b9050600c54811115610d6957600654604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015612ddb57600080fd5b505afa158015612def573d6000803e3d6000fd5b505050506040513d6020811015612e0557600080fd5b505190506000612e13610d6d565b90508015610d6657612e3181610d0584670de0b6b3a7640000613d8e565b935050505090565b6001546001600160a01b03163314612e825760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b600954604080517f2ffaaa09000000000000000000000000000000000000000000000000000000008152600481018590526024810184905290516001600160a01b0390921691632ffaaa099160448082019260009290919082900301818387803b158015612eef57600080fd5b505af1158015612f03573d6000803e3d6000fd5b505050505050565b60025481565b60115481565b60058181548110612f2457fe5b6000918252602090912001546001600160a01b0316905081565b60175481565b6001546001600160a01b03163314612f8d5760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b6101f48110158015612fa157506127108111155b612ff2576040805162461bcd60e51b815260206004820152600c60248201527f6f7574206f662072616e67650000000000000000000000000000000000000000604482015290519081900360640190fd5b601155565b601f546001600160a01b031681565b60035481565b6001546001600160a01b031633146130555760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b60788211156130ab576040805162461bcd60e51b815260206004820152601e60248201527f5f626f6f74737472617045706f6368733a206f7574206f662072616e67650000604482015290519081900360640190fd5b606481101580156130be57506103e88111155b6130f95760405162461bcd60e51b815260040180806020018281038252602e815260200180614c29602e913960400191505060405180910390fd5b601691909155601755565b6001546000906001600160a01b031633146131505760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b60098360ff16106131925760405162461bcd60e51b8152600401808060200182810382526029815260200180614aca6029913960400191505060405180910390fd5b60ff8316156131c457600e6001840360ff16815481106131ae57fe5b906000526020600020015482116131c457600080fd5b60088360ff1610156131f957600e8360010160ff16815481106131e357fe5b906000526020600020015482106131f957600080fd5b81600e8460ff168154811061320a57fe5b6000918252602090912001555060015b92915050565b6001546001600160a01b031633146132695760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b600954604080517f54575af40000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152602482018690528481166044830152915191909216916354575af491606480830192600092919082900301818387803b1580156132df57600080fd5b505af11580156132f3573d6000803e3d6000fd5b50505050505050565b6001546001600160a01b031633146133455760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b601955565b600e818154811061335757fe5b600091825260209091200154905081565b600f818154811061335757fe5b6001546001600160a01b031633146133be5760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b601a55565b6006546001600160a01b031681565b6000806133dd613b9c565b9050600b548111610d695760006133f2613c1d565b90506000613411612710610d0560145485613d8e90919063ffffffff16565b90506000600760009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561346357600080fd5b505afa158015613477573d6000803e3d6000fd5b505050506040513d602081101561348d57600080fd5b50519050808211156134d25760006134a58383613e55565b905060006134bf670de0b6b3a7640000610d058489613d8e565b90506134cd60045482613f4a565b965050505b5050505090565b6001546001600160a01b031633146135225760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001546001600160a01b0316331461359a5760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b6009805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600c5481565b61546081565b60195481565b6001546001600160a01b031633146136245760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b6001600160a01b038416613681576040805162461bcd60e51b8152602060048083019190915260248201527f7a65726f00000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b610bb88311156136d8576040805162461bcd60e51b815260206004820152600c60248201527f6f7574206f662072616e67650000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038216613735576040805162461bcd60e51b8152602060048083019190915260248201527f7a65726f00000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6103e881111561378c576040805162461bcd60e51b815260206004820152600c60248201527f6f7574206f662072616e67650000000000000000000000000000000000000000604482015290519081900360640190fd5b601f805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b03968716179091556020939093556021805490931691909316179055602255565b6001546001600160a01b0316331461381a5760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b600954604080517f97ffe1d70000000000000000000000000000000000000000000000000000000081526004810184905290516001600160a01b03909216916397ffe1d79160248082019260009290919082900301818387803b158015612c2b57600080fd5b60006138a561389c615460600354613d8e90919063ffffffff16565b60025490613eb2565b905090565b601d5481565b601c5481565b6001546001600160a01b031633146138ff5760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b6064811015801561391257506105dc8111155b613963576040805162461bcd60e51b815260206004820152600c60248201527f6f7574206f662072616e67650000000000000000000000000000000000000000604482015290519081900360640190fd5b601355565b6001546000906001600160a01b031633146139b45760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b60098360ff16106139f65760405162461bcd60e51b8152600401808060200182810382526029815260200180614aca6029913960400191505060405180910390fd5b600a8210158015613a0957506103e88211155b613a5a576040805162461bcd60e51b815260206004820152601460248201527f5f76616c75653a206f7574206f662072616e6765000000000000000000000000604482015290519081900360640190fd5b81600f8460ff168154811061320a57fe5b60105481565b60145481565b60135481565b6001546001600160a01b03163314613ac65760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b600b548110158015613af25750613aee6064610d056078600b54613d8e90919063ffffffff16565b8111155b613b43576040805162461bcd60e51b815260206004820152600c60248201527f6f7574206f662072616e67650000000000000000000000000000000000000000604482015290519081900360640190fd5b600c55565b60165481565b6001546001600160a01b03163314613b975760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b601555565b600a54600654604080517f3ddac9530000000000000000000000000000000000000000000000000000000081526001600160a01b039283166004820152670de0b6b3a7640000602482015290516000939290921691633ddac95391604480820192602092909190829003018186803b158015612cd057600080fd5b60045481565b600654604080517f18160ddd00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691839183916318160ddd916004808301926020929190829003018186803b158015613c7f57600080fd5b505afa158015613c93573d6000803e3d6000fd5b505050506040513d6020811015613ca957600080fd5b505190506000805b60055460ff82161015613d8357613d79846001600160a01b03166370a0823160058460ff1681548110613ce057fe5b60009182526020918290200154604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b0390921660048301525160248083019392829003018186803b158015613d4657600080fd5b505afa158015613d5a573d6000803e3d6000fd5b505050506040513d6020811015613d7057600080fd5b50518390613eb2565b9150600101613cb1565b50612e318282613e55565b600082613d9d5750600061321a565b82820282848281613daa57fe5b0414613de75760405162461bcd60e51b81526004018080602001828103825260218152602001806149f56021913960400191505060405180910390fd5b9392505050565b6000808211613e44576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381613e4d57fe5b049392505050565b600082821115613eac576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082820183811015613de7576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b4360009081526020818152604080832032845290915290205460ff1690565b4360009081526020818152604080832033845290915290205460ff1690565b6000818310613f595781613de7565b5090919050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052611c35908490614466565b600a60009054906101000a90046001600160a01b03166001600160a01b031663a2e620456040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561403057600080fd5b505af1925050508015614041575060015b50565b600654604080517f40c10f190000000000000000000000000000000000000000000000000000000081523060048201526024810184905290516001600160a01b03909216916340c10f19916044808201926020929091908290030181600087803b1580156140b157600080fd5b505af11580156140c5573d6000803e3d6000fd5b505050506040513d60208110156140db57600080fd5b5050602054600090156141df57614103612710610d0560205485613d8e90919063ffffffff16565b600654601f54604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015260248101859052905193945091169163a9059cbb916044808201926020929091908290030181600087803b15801561417757600080fd5b505af115801561418b573d6000803e3d6000fd5b505050506040513d60208110156141a157600080fd5b5050604080514281526020810183905281517fcb3f34aaa3445b461e6da5492dc89e5c257a59fa598131f3b6bbc97a3638e409929181900390910190a15b602254600090156142e157614205612710610d0560225486613d8e90919063ffffffff16565b600654602154604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015260248101859052905193945091169163a9059cbb916044808201926020929091908290030181600087803b15801561427957600080fd5b505af115801561428d573d6000803e3d6000fd5b505050506040513d60208110156142a357600080fd5b5050604080514281526020810183905281517fdc8b715b18523e58b7fd0da53259dfa91efd91df4a854d94b136e3333a3b9395929181900390910190a15b6142ef8161283e8585613e55565b600954600654919450614310916001600160a01b0390811691166000614517565b60095460065461432d916001600160a01b03918216911685614517565b600954604080517f97ffe1d70000000000000000000000000000000000000000000000000000000081526004810186905290516001600160a01b03909216916397ffe1d79160248082019260009290919082900301818387803b15801561439357600080fd5b505af11580156143a7573d6000803e3d6000fd5b5050604080514281526020810187905281517f03ca7276ab7799bf73fb79d27ff0610cd7049574f2508ef8445162833d439aea9450908190039091019150a1505050565b600060085b600e8160ff168154811061440057fe5b9060005260206000200154831061443557600f8160ff168154811061442157fe5b60009182526020909120015460105561445c565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016143f0565b5050601054919050565b60606144bb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166146719092919063ffffffff16565b805190915015611c35578080602001905160208110156144da57600080fd5b5051611c355760405162461bcd60e51b815260040180806020018281038252602a815260200180614b4e602a913960400191505060405180910390fd5b8015806145b65750604080517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b15801561458857600080fd5b505afa15801561459c573d6000803e3d6000fd5b505050506040513d60208110156145b257600080fd5b5051155b6145f15760405162461bcd60e51b8152600401808060200182810382526036815260200180614b9e6036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b300000000000000000000000000000000000000000000000000000000179052611c35908490614466565b60606146808484600085614688565b949350505050565b6060824710156146c95760405162461bcd60e51b81526004018080602001828103825260268152602001806149aa6026913960400191505060405180910390fd5b6146d285614802565b614723576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061478057805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101614743565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146147e2576040519150601f19603f3d011682016040523d82523d6000602084013e6147e7565b606091505b50915091506147f7828286614808565b979650505050505050565b3b151590565b60608315614817575081613de7565b8251156148275782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614871578181015183820152602001614859565b50505050905090810190601f16801561489e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b8280548282559060005260206000209081019282156148f5579160200282015b828111156148f5578251829069ffffffffffffffffffff169055916020019190600101906148cc565b50610d69929150614942565b8280548282559060005260206000209081019282156148f5579160200282015b828111156148f5578251829061ffff16905591602001919060010190614921565b5b80821115610d69576000815560010161494356fe54726561737572793a2063616e6e6f742072656465656d20626f6e64732077697468207a65726f20616d6f756e745f7072656d69756d5468726573686f6c6420697320686967686572207468616e20312e35416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c54726561737572793a20747265617375727920686173206e6f206d6f726520627564676574536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7754726561737572793a2063616e6e6f7420707572636861736520626f6e64732077697468207a65726f20616d6f756e7454726561737572793a2067726176655072696365206e6f7420656c696769626c6520666f7220626f6e642070757263686173655f6d696e74696e67466163746f72466f72506179696e67446562743a206f7574206f662072616e67655f6d6178537570706c79457870616e73696f6e50657263656e743a206f7574206f662072616e6765496e6465782068617320746f206265206c6f776572207468616e20636f756e74206f6620746965727354726561737572793a206661696c656420746f20636f6e73756c742047524156452070726963652066726f6d20746865206f7261636c6554726561737572793a2063616c6c6572206973206e6f7420746865206f70657261746f725361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564436f6e747261637447756172643a206f6e6520626c6f636b2c206f6e652066756e6374696f6e5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e63655f7072656d69756d5468726573686f6c64206578636565647320677261766550726963654365696c696e6754726561737572793a206e6f7420656e6f75676820626f6e64206c65667420746f2070757263686173655f626f6f747374726170537570706c79457870616e73696f6e50657263656e743a206f7574206f662072616e6765a2646970667358221220ecf0c0c4fb54a85e692e934edcd8769fbc7b630102fddc17e4c4cdb9550e937e64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106104de5760003560e01c806378e9792511610286578063b4a5e9281161016b578063d4b14944116100e3578063f14698de11610097578063fb260df11161007c578063fb260df114610aab578063fcb6f00814610ab3578063ffff6dfb14610abb576104de565b8063f14698de14610a86578063f245245a14610a8e576104de565b8063da3ed419116100c8578063da3ed41914610a59578063e90b245414610a61578063e9c2ce1114610a69576104de565b8063d4b1494414610a2b578063d98f249514610a51576104de565b8063be266d541161013a578063c8412d021161011f578063c8412d02146109fe578063c8f987f314610a06578063cecce38e14610a0e576104de565b8063be266d54146109d9578063c5967c26146109f6576104de565b8063b4a5e92814610987578063b4d1d7951461098f578063b8a878f914610997578063bcc81f191461099f576104de565b8063951357d4116101fe578063a204452b116101cd578063b2a5fd81116101b2578063b2a5fd8114610933578063b3ab15fb1461093b578063b3ffc77714610961576104de565b8063a204452b1461090e578063a41cd0341461092b576104de565b8063951357d41461088157806398b762a1146108b757806399820025146108d4578063a0487eea146108f1576104de565b80638c664db611610255578063900cf0cf1161023a578063900cf0cf1461083057806391bbfed514610838578063940e60641461085b576104de565b80638c664db61461080b5780638d934f7414610828576104de565b806378e97925146107d657806381d11eaf146107de57806382cad838146107e6578063874106cc14610803576104de565b80634363f654116103c75780635a0fc79c1161033f57806366c17ead116102f35780636e5973f1116102d85780636e5973f1146107a357806372c054f9146107ab578063734f7096146107b3576104de565b806366c17ead146107935780636deec4731461079b576104de565b80635b86d859116103245780635b86d8591461075d57806362ac58e41461076557806363f96cf41461078b576104de565b80635a0fc79c1461074d5780635b75617914610755576104de565b806354f04a1111610396578063570ca7351161037b578063570ca73514610720578063591663e11461072857806359bf5d3914610745576104de565b806354f04a11146106f557806355ebdeef14610718576104de565b80634363f654146106925780634390d2a81461069a578063499f3f19146106a257806354575af4146106bf576104de565b8063154ec2db1161045a5780632e9c7b6511610429578063392e53cd1161040e578063392e53cd146106655780634013a08e1461066d57806340af7ba514610675576104de565b80632e9c7b6514610655578063349aa30a1461065d576104de565b8063154ec2db1461060c578063158ef93e1461062957806322f832cd1461064557806329ef19191461064d576104de565b80630b5bcec7116104b15780630db7eb0b116104965780630db7eb0b1461058b578063118ebbf9146105935780631460e390146105b6576104de565b80630b5bcec7146105665780630cf6017514610583576104de565b806303be7e76146104e357806304e5c7b1146104fd57806307e36ee31461051c5780630945958214610540575b600080fd5b6104eb610ac3565b60408051918252519081900360200190f35b61051a6004803603602081101561051357600080fd5b5035610ac9565b005b610524610b98565b604080516001600160a01b039092168252519081900360200190f35b61051a6004803603602081101561055657600080fd5b50356001600160a01b0316610ba7565b61051a6004803603602081101561057c57600080fd5b5035610c1f565b6104eb610cbb565b6104eb610d6d565b61051a600480360360408110156105a957600080fd5b5080359060200135610e0f565b61051a600480360360e08110156105cc57600080fd5b506001600160a01b038135811691602081013582169160408201358116916060810135821691608082013581169160a08101359091169060c001356114a2565b61051a6004803603602081101561062257600080fd5b5035611847565b6106316118ec565b604080519115158252519081900360200190f35b6104eb61190d565b6104eb611913565b6104eb611919565b6104eb61191f565b610631611925565b6104eb611947565b61051a6004803603602081101561068b57600080fd5b503561194d565b6105246119f2565b610524611a01565b61051a600480360360208110156106b857600080fd5b5035611a10565b61051a600480360360608110156106d557600080fd5b506001600160a01b03813581169160208101359160409091013516611aad565b61051a6004803603604081101561070b57600080fd5b5080359060200135611c3a565b6104eb6123b9565b6105246123bf565b61051a6004803603602081101561073e57600080fd5b50356123ce565b6104eb612481565b6104eb612487565b61051a61248d565b6104eb612b75565b61051a6004803603602081101561077b57600080fd5b50356001600160a01b0316612b7b565b610524612c46565b6104eb612c55565b610524612d4b565b6104eb612d5a565b6104eb612d60565b61051a600480360360408110156107c957600080fd5b5080359060200135612e39565b6104eb612f0b565b6104eb612f11565b610524600480360360208110156107fc57600080fd5b5035612f17565b6104eb612f3e565b61051a6004803603602081101561082157600080fd5b5035612f44565b610524612ff7565b6104eb613006565b61051a6004803603604081101561084e57600080fd5b508035906020013561300c565b6106316004803603604081101561087157600080fd5b5060ff8135169060200135613104565b61051a6004803603606081101561089757600080fd5b506001600160a01b03813581169160208101359160409091013516613220565b61051a600480360360208110156108cd57600080fd5b50356132fc565b6104eb600480360360208110156108ea57600080fd5b503561334a565b6104eb6004803603602081101561090757600080fd5b5035613368565b61051a6004803603602081101561092457600080fd5b5035613375565b6105246133c3565b6104eb6133d2565b61051a6004803603602081101561095157600080fd5b50356001600160a01b03166134d9565b61051a6004803603602081101561097757600080fd5b50356001600160a01b0316613551565b6104eb6135c9565b6104eb6135cf565b6104eb6135d5565b61051a600480360360808110156109b557600080fd5b506001600160a01b03813581169160208101359160408201351690606001356135db565b61051a600480360360208110156109ef57600080fd5b50356137d1565b6104eb613880565b6104eb6138aa565b6104eb6138b0565b61051a60048036036020811015610a2457600080fd5b50356138b6565b61063160048036036040811015610a4157600080fd5b5060ff8135169060200135613968565b6104eb613a6b565b6104eb613a71565b6104eb613a77565b61051a60048036036020811015610a7f57600080fd5b5035613a7d565b6104eb613b48565b61051a60048036036020811015610aa457600080fd5b5035613b4e565b6104eb613b9c565b6104eb613c17565b6104eb613c1d565b60225481565b6001546001600160a01b03163314610b125760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b600c54811015610b535760405162461bcd60e51b815260040180806020018281038252602b815260200180614bd4602b913960400191505060405180910390fd5b6096811115610b935760405162461bcd60e51b81526004018080602001828103825260248152602001806149866024913960400191505060405180910390fd5b601c55565b6008546001600160a01b031681565b6001546001600160a01b03163314610bf05760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b600a805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001546001600160a01b03163314610c685760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b600a8110158015610c7b57506103e88111155b610cb65760405162461bcd60e51b8152600401808060200182810382526028815260200180614aa26028913960400191505060405180910390fd5b601055565b600080610cc6613b9c565b9050600b548111610d6957601b54610ce257600b549150610d69565b6000610d0b82610d05670de0b6b3a7640000600b54613d8e90919063ffffffff16565b90613dee565b90506000610d36612710610d05601b54610d30600b5487613e5590919063ffffffff16565b90613d8e565b600b54909150610d469082613eb2565b93506000601954118015610d5b575060195484115b15610d665760195493505b50505b5090565b600080610d78613b9c565b9050600c54811115610d69576000610da26064610d05601c54600b54613d8e90919063ffffffff16565b9050808210610e04576000610dce612710610d05601d54610d30600b5488613e5590919063ffffffff16565b600b54909150610dde9082613eb2565b93506000601a54118015610df35750601a5484115b15610dfe57601a5493505b50610e0a565b600b5492505b505090565b610e17613f0c565b15610e535760405162461bcd60e51b8152600401808060200182810382526026815260200180614b786026913960400191505060405180910390fd5b610e5b613f2b565b15610e975760405162461bcd60e51b8152600401808060200182810382526026815260200180614b786026913960400191505060405180910390fd5b600254421015610eee576040805162461bcd60e51b815260206004820152601960248201527f54726561737572793a206e6f7420737461727465642079657400000000000000604482015290519081900360640190fd5b6006546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b158015610f3257600080fd5b505afa158015610f46573d6000803e3d6000fd5b505050506040513d6020811015610f5c57600080fd5b50516001600160a01b0316148015610fea57506007546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b158015610fb357600080fd5b505afa158015610fc7573d6000803e3d6000fd5b505050506040513d6020811015610fdd57600080fd5b50516001600160a01b0316145b801561106c57506008546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561103557600080fd5b505afa158015611049573d6000803e3d6000fd5b505050506040513d602081101561105f57600080fd5b50516001600160a01b0316145b80156110ee57506009546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b1580156110b757600080fd5b505afa1580156110cb573d6000803e3d6000fd5b505050506040513d60208110156110e157600080fd5b50516001600160a01b0316145b61113f576040805162461bcd60e51b815260206004820152601e60248201527f54726561737572793a206e656564206d6f7265207065726d697373696f6e0000604482015290519081900360640190fd5b6000821161117e5760405162461bcd60e51b815260040180806020018281038252602e815260200180614958602e913960400191505060405180910390fd5b6000611188613b9c565b90508181146111de576040805162461bcd60e51b815260206004820152601b60248201527f54726561737572793a204752415645207072696365206d6f7665640000000000604482015290519081900360640190fd5b600c54811161121e5760405162461bcd60e51b8152600401808060200182810382526033815260200180614a466033913960400191505060405180910390fd5b6000611228610d6d565b90506000811161127f576040805162461bcd60e51b815260206004820152601b60248201527f54726561737572793a20696e76616c696420626f6e6420726174650000000000604482015290519081900360640190fd5b6000611297670de0b6b3a7640000610d058785613d8e565b600654604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905192935083926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561130057600080fd5b505afa158015611314573d6000803e3d6000fd5b505050506040513d602081101561132a57600080fd5b505110156113695760405162461bcd60e51b81526004018080602001828103825260258152602001806149d06025913960400191505060405180910390fd5b611381611378600d5483613f4a565b600d5490613e55565b600d55600754604080517f79cc67900000000000000000000000000000000000000000000000000000000081523360048201526024810188905290516001600160a01b03909216916379cc67909160448082019260009290919082900301818387803b1580156113f057600080fd5b505af1158015611404573d6000803e3d6000fd5b505060065461142092506001600160a01b031690503383613f60565b611428613fe0565b6040805182815260208101879052815133927f51e0d16595cabc591e64da08e45bb223577e5b9a39cd947b4ddc3472b2dd8878928290030190a25050436000908152602081815260408083203284529091528082208054600160ff1991821681179092553384529190922080549091169091179055505050565b60015474010000000000000000000000000000000000000000900460ff1615611512576040805162461bcd60e51b815260206004820152601d60248201527f54726561737572793a20616c726561647920696e697469616c697a6564000000604482015290519081900360640190fd5b6006805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b038a811691909117909255600780548216898416179055600880548216888416179055600a80548216878416179055600980549091169185169190911790556002819055670de0b6b3a7640000600b81905561159a90606490610d05906065613d8e565b600c55600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038416179055604080516101008101825269021e19e0c9bab2400000815269032d26d12e980b600000602082015269054b40b1f852bda00000918101919091526907695a92c20d6fe000006060820152690cb49b44ba602d80000060808201526934f086f3b33b6840000060a08201526969e10de76676d080000060c082015269d3c21bcecceda100000060e082015261168d90600e9060086148ac565b5060408051610100810182526101c28152610190602082015261015e9181019190915261012c606082015260fa608082015260c860a0820152609660c0820152607d60e08201526116e290600f906008614901565b506101c2601055612710601155610dac601281905561012c6013556014556101f4601555606e601c55611b58601d55600c60165560fa601755600654604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561177f57600080fd5b505afa158015611793573d6000803e3d6000fd5b505050506040513d60208110156117a957600080fd5b5051600d556001805473ffffffffffffffffffffffffffffffffffffffff197fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff909116740100000000000000000000000000000000000000001716339081179091556040805143815290517f25ff68dd81b34665b5ba7e553ee5511bf6812e12adb4a7e2c0d9e26b3099ce799181900360200190a250505050505050565b6001546001600160a01b031633146118905760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b614e208111156118e7576040805162461bcd60e51b815260206004820152601d60248201527f5f646973636f756e7450657263656e74206973206f7665722032303025000000604482015290519081900360640190fd5b601b55565b60015474010000000000000000000000000000000000000000900460ff1681565b60125481565b601b5481565b601a5481565b60155481565b60015474010000000000000000000000000000000000000000900460ff165b90565b601e5481565b6001546001600160a01b031633146119965760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b614e208111156119ed576040805162461bcd60e51b815260206004820152601c60248201527f5f7072656d69756d50657263656e74206973206f766572203230302500000000604482015290519081900360640190fd5b601d55565b6007546001600160a01b031681565b6021546001600160a01b031681565b6001546001600160a01b03163314611a595760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b6127108110158015611a6d5750614e208111155b611aa85760405162461bcd60e51b8152600401808060200182810382526029815260200180614a796029913960400191505060405180910390fd5b601e55565b6001546001600160a01b03163314611af65760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b6006546001600160a01b0384811691161415611b59576040805162461bcd60e51b815260206004820152600560248201527f6772617665000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6007546001600160a01b0384811691161415611bbe576040805162461bcd60e51b8152602060048083019190915260248201527f626f6e6400000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6008546001600160a01b0384811691161415611c21576040805162461bcd60e51b815260206004820152600560248201527f7368617265000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b611c356001600160a01b0384168284613f60565b505050565b611c42613f0c565b15611c7e5760405162461bcd60e51b8152600401808060200182810382526026815260200180614b786026913960400191505060405180910390fd5b611c86613f2b565b15611cc25760405162461bcd60e51b8152600401808060200182810382526026815260200180614b786026913960400191505060405180910390fd5b600254421015611d19576040805162461bcd60e51b815260206004820152601960248201527f54726561737572793a206e6f7420737461727465642079657400000000000000604482015290519081900360640190fd5b6006546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b158015611d5d57600080fd5b505afa158015611d71573d6000803e3d6000fd5b505050506040513d6020811015611d8757600080fd5b50516001600160a01b0316148015611e1557506007546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b158015611dde57600080fd5b505afa158015611df2573d6000803e3d6000fd5b505050506040513d6020811015611e0857600080fd5b50516001600160a01b0316145b8015611e9757506008546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b158015611e6057600080fd5b505afa158015611e74573d6000803e3d6000fd5b505050506040513d6020811015611e8a57600080fd5b50516001600160a01b0316145b8015611f1957506009546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b158015611ee257600080fd5b505afa158015611ef6573d6000803e3d6000fd5b505050506040513d6020811015611f0c57600080fd5b50516001600160a01b0316145b611f6a576040805162461bcd60e51b815260206004820152601e60248201527f54726561737572793a206e656564206d6f7265207065726d697373696f6e0000604482015290519081900360640190fd5b60008211611fa95760405162461bcd60e51b8152600401808060200182810382526030815260200180614a166030913960400191505060405180910390fd5b6000611fb3613b9c565b9050818114612009576040805162461bcd60e51b815260206004820152601b60248201527f54726561737572793a204752415645207072696365206d6f7665640000000000604482015290519081900360640190fd5b600b5481106120495760405162461bcd60e51b8152600401808060200182810382526033815260200180614a466033913960400191505060405180910390fd5b60045483111561208a5760405162461bcd60e51b815260040180806020018281038252602a815260200180614bff602a913960400191505060405180910390fd5b6000612094610cbb565b9050600081116120eb576040805162461bcd60e51b815260206004820152601b60248201527f54726561737572793a20696e76616c696420626f6e6420726174650000000000604482015290519081900360640190fd5b6000612103670de0b6b3a7640000610d058785613d8e565b9050600061210f613c1d565b9050600061219783600760009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561216557600080fd5b505afa158015612179573d6000803e3d6000fd5b505050506040513d602081101561218f57600080fd5b505190613eb2565b90506121b4612710610d0560145485613d8e90919063ffffffff16565b811115612208576040805162461bcd60e51b815260206004820152601360248201527f6f766572206d6178206465627420726174696f00000000000000000000000000604482015290519081900360640190fd5b600654604080517f79cc6790000000000000000000000000000000000000000000000000000000008152336004820152602481018a905290516001600160a01b03909216916379cc67909160448082019260009290919082900301818387803b15801561227457600080fd5b505af1158015612288573d6000803e3d6000fd5b5050600754604080517f40c10f190000000000000000000000000000000000000000000000000000000081523360048201526024810188905290516001600160a01b0390921693506340c10f1992506044808201926020929091908290030181600087803b1580156122f957600080fd5b505af115801561230d573d6000803e3d6000fd5b505050506040513d602081101561232357600080fd5b50506004546123329088613e55565b60045561233d613fe0565b6040805188815260208101859052815133927f73017f1b70789e2e66759eeb3c7ec11f59e6eedb55d921cfaec5410dd42a4799928290030190a25050436000908152602081815260408083203284529091528082208054600160ff19918216811790925533845291909220805490911690911790555050505050565b60205481565b6001546001600160a01b031681565b6001546001600160a01b031633146124175760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b6103e8811015801561242b57506127108111155b61247c576040805162461bcd60e51b815260206004820152600c60248201527f6f7574206f662072616e67650000000000000000000000000000000000000000604482015290519081900360640190fd5b601455565b600d5490565b600d5481565b612495613f0c565b156124d15760405162461bcd60e51b8152600401808060200182810382526026815260200180614b786026913960400191505060405180910390fd5b6124d9613f2b565b156125155760405162461bcd60e51b8152600401808060200182810382526026815260200180614b786026913960400191505060405180910390fd5b60025442101561256c576040805162461bcd60e51b815260206004820152601960248201527f54726561737572793a206e6f7420737461727465642079657400000000000000604482015290519081900360640190fd5b612574613880565b4210156125c8576040805162461bcd60e51b815260206004820152601860248201527f54726561737572793a206e6f74206f70656e6564207965740000000000000000604482015290519081900360640190fd5b6006546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561260c57600080fd5b505afa158015612620573d6000803e3d6000fd5b505050506040513d602081101561263657600080fd5b50516001600160a01b03161480156126c457506007546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561268d57600080fd5b505afa1580156126a1573d6000803e3d6000fd5b505050506040513d60208110156126b757600080fd5b50516001600160a01b0316145b801561274657506008546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561270f57600080fd5b505afa158015612723573d6000803e3d6000fd5b505050506040513d602081101561273957600080fd5b50516001600160a01b0316145b80156127c857506009546040805163570ca73560e01b8152905130926001600160a01b03169163570ca735916004808301926020929190829003018186803b15801561279157600080fd5b505afa1580156127a5573d6000803e3d6000fd5b505050506040513d60208110156127bb57600080fd5b50516001600160a01b0316145b612819576040805162461bcd60e51b815260206004820152601e60248201527f54726561737572793a206e656564206d6f7265207065726d697373696f6e0000604482015290519081900360640190fd5b612821613fe0565b612829613b9c565b601855600d546000906128449061283e613c1d565b90613e55565b9050601654600354101561287a57612875612870612710610d0560175485613d8e90919063ffffffff16565b614044565b612af9565b600c546018541115612af957600754604080517f18160ddd00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b1580156128e457600080fd5b505afa1580156128f8573d6000803e3d6000fd5b505050506040513d602081101561290e57600080fd5b5051600b5460185491925060009161292591613e55565b9050600080600061293f655af3107a4000610d30886143eb565b90508084111561294d578093505b612968612710610d0560115488613d8e90919063ffffffff16565b600d541061298d57612986670de0b6b3a7640000610d058887613d8e565b91506129f9565b60006129a5670de0b6b3a7640000610d058988613d8e565b90506129c2612710610d0560125484613d8e90919063ffffffff16565b92506129ce8184613e55565b601e54909450156129f7576129f4612710610d05601e5487613d8e90919063ffffffff16565b93505b505b8115612a0857612a0882614044565b8215612af357600d54612a1b9084613eb2565b600d55600654604080517f40c10f190000000000000000000000000000000000000000000000000000000081523060048201526024810186905290516001600160a01b03909216916340c10f19916044808201926020929091908290030181600087803b158015612a8b57600080fd5b505af1158015612a9f573d6000803e3d6000fd5b505050506040513d6020811015612ab557600080fd5b5050604080514281526020810185905281517ff705142bf09f04297640495ddf7c59b7fd6f51894c5aea9602d631cf05f0efc2929181900390910190a15b50505050505b50600354612b08906001613eb2565b600355600c54612b16613b9c565b11612b3457612b2f612710610d05601354610d30613c1d565b612b37565b60005b600455436000908152602081815260408083203284529091528082208054600160ff1991821681179092553384529190922080549091169091179055565b600b5481565b6001546001600160a01b03163314612bc45760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b600954604080517fb3ab15fb0000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301529151919092169163b3ab15fb91602480830192600092919082900301818387803b158015612c2b57600080fd5b505af1158015612c3f573d6000803e3d6000fd5b5050505050565b6009546001600160a01b031681565b600a54600654604080517f6808a1280000000000000000000000000000000000000000000000000000000081526001600160a01b039283166004820152670de0b6b3a7640000602482015290516000939290921691636808a12891604480820192602092909190829003018186803b158015612cd057600080fd5b505afa925050508015612cf557506040513d6020811015612cf057600080fd5b505160015b612d305760405162461bcd60e51b8152600401808060200182810382526037815260200180614af36037913960400191505060405180910390fd5b71ffffffffffffffffffffffffffffffffffff169050611944565b600a546001600160a01b031681565b60185481565b600080612d6b613b9c565b9050600c54811115610d6957600654604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015612ddb57600080fd5b505afa158015612def573d6000803e3d6000fd5b505050506040513d6020811015612e0557600080fd5b505190506000612e13610d6d565b90508015610d6657612e3181610d0584670de0b6b3a7640000613d8e565b935050505090565b6001546001600160a01b03163314612e825760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b600954604080517f2ffaaa09000000000000000000000000000000000000000000000000000000008152600481018590526024810184905290516001600160a01b0390921691632ffaaa099160448082019260009290919082900301818387803b158015612eef57600080fd5b505af1158015612f03573d6000803e3d6000fd5b505050505050565b60025481565b60115481565b60058181548110612f2457fe5b6000918252602090912001546001600160a01b0316905081565b60175481565b6001546001600160a01b03163314612f8d5760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b6101f48110158015612fa157506127108111155b612ff2576040805162461bcd60e51b815260206004820152600c60248201527f6f7574206f662072616e67650000000000000000000000000000000000000000604482015290519081900360640190fd5b601155565b601f546001600160a01b031681565b60035481565b6001546001600160a01b031633146130555760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b60788211156130ab576040805162461bcd60e51b815260206004820152601e60248201527f5f626f6f74737472617045706f6368733a206f7574206f662072616e67650000604482015290519081900360640190fd5b606481101580156130be57506103e88111155b6130f95760405162461bcd60e51b815260040180806020018281038252602e815260200180614c29602e913960400191505060405180910390fd5b601691909155601755565b6001546000906001600160a01b031633146131505760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b60098360ff16106131925760405162461bcd60e51b8152600401808060200182810382526029815260200180614aca6029913960400191505060405180910390fd5b60ff8316156131c457600e6001840360ff16815481106131ae57fe5b906000526020600020015482116131c457600080fd5b60088360ff1610156131f957600e8360010160ff16815481106131e357fe5b906000526020600020015482106131f957600080fd5b81600e8460ff168154811061320a57fe5b6000918252602090912001555060015b92915050565b6001546001600160a01b031633146132695760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b600954604080517f54575af40000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152602482018690528481166044830152915191909216916354575af491606480830192600092919082900301818387803b1580156132df57600080fd5b505af11580156132f3573d6000803e3d6000fd5b50505050505050565b6001546001600160a01b031633146133455760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b601955565b600e818154811061335757fe5b600091825260209091200154905081565b600f818154811061335757fe5b6001546001600160a01b031633146133be5760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b601a55565b6006546001600160a01b031681565b6000806133dd613b9c565b9050600b548111610d695760006133f2613c1d565b90506000613411612710610d0560145485613d8e90919063ffffffff16565b90506000600760009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561346357600080fd5b505afa158015613477573d6000803e3d6000fd5b505050506040513d602081101561348d57600080fd5b50519050808211156134d25760006134a58383613e55565b905060006134bf670de0b6b3a7640000610d058489613d8e565b90506134cd60045482613f4a565b965050505b5050505090565b6001546001600160a01b031633146135225760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001546001600160a01b0316331461359a5760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b6009805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600c5481565b61546081565b60195481565b6001546001600160a01b031633146136245760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b6001600160a01b038416613681576040805162461bcd60e51b8152602060048083019190915260248201527f7a65726f00000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b610bb88311156136d8576040805162461bcd60e51b815260206004820152600c60248201527f6f7574206f662072616e67650000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038216613735576040805162461bcd60e51b8152602060048083019190915260248201527f7a65726f00000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6103e881111561378c576040805162461bcd60e51b815260206004820152600c60248201527f6f7574206f662072616e67650000000000000000000000000000000000000000604482015290519081900360640190fd5b601f805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b03968716179091556020939093556021805490931691909316179055602255565b6001546001600160a01b0316331461381a5760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b600954604080517f97ffe1d70000000000000000000000000000000000000000000000000000000081526004810184905290516001600160a01b03909216916397ffe1d79160248082019260009290919082900301818387803b158015612c2b57600080fd5b60006138a561389c615460600354613d8e90919063ffffffff16565b60025490613eb2565b905090565b601d5481565b601c5481565b6001546001600160a01b031633146138ff5760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b6064811015801561391257506105dc8111155b613963576040805162461bcd60e51b815260206004820152600c60248201527f6f7574206f662072616e67650000000000000000000000000000000000000000604482015290519081900360640190fd5b601355565b6001546000906001600160a01b031633146139b45760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b60098360ff16106139f65760405162461bcd60e51b8152600401808060200182810382526029815260200180614aca6029913960400191505060405180910390fd5b600a8210158015613a0957506103e88211155b613a5a576040805162461bcd60e51b815260206004820152601460248201527f5f76616c75653a206f7574206f662072616e6765000000000000000000000000604482015290519081900360640190fd5b81600f8460ff168154811061320a57fe5b60105481565b60145481565b60135481565b6001546001600160a01b03163314613ac65760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b600b548110158015613af25750613aee6064610d056078600b54613d8e90919063ffffffff16565b8111155b613b43576040805162461bcd60e51b815260206004820152600c60248201527f6f7574206f662072616e67650000000000000000000000000000000000000000604482015290519081900360640190fd5b600c55565b60165481565b6001546001600160a01b03163314613b975760405162461bcd60e51b8152600401808060200182810382526024815260200180614b2a6024913960400191505060405180910390fd5b601555565b600a54600654604080517f3ddac9530000000000000000000000000000000000000000000000000000000081526001600160a01b039283166004820152670de0b6b3a7640000602482015290516000939290921691633ddac95391604480820192602092909190829003018186803b158015612cd057600080fd5b60045481565b600654604080517f18160ddd00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691839183916318160ddd916004808301926020929190829003018186803b158015613c7f57600080fd5b505afa158015613c93573d6000803e3d6000fd5b505050506040513d6020811015613ca957600080fd5b505190506000805b60055460ff82161015613d8357613d79846001600160a01b03166370a0823160058460ff1681548110613ce057fe5b60009182526020918290200154604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b0390921660048301525160248083019392829003018186803b158015613d4657600080fd5b505afa158015613d5a573d6000803e3d6000fd5b505050506040513d6020811015613d7057600080fd5b50518390613eb2565b9150600101613cb1565b50612e318282613e55565b600082613d9d5750600061321a565b82820282848281613daa57fe5b0414613de75760405162461bcd60e51b81526004018080602001828103825260218152602001806149f56021913960400191505060405180910390fd5b9392505050565b6000808211613e44576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381613e4d57fe5b049392505050565b600082821115613eac576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082820183811015613de7576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b4360009081526020818152604080832032845290915290205460ff1690565b4360009081526020818152604080832033845290915290205460ff1690565b6000818310613f595781613de7565b5090919050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052611c35908490614466565b600a60009054906101000a90046001600160a01b03166001600160a01b031663a2e620456040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561403057600080fd5b505af1925050508015614041575060015b50565b600654604080517f40c10f190000000000000000000000000000000000000000000000000000000081523060048201526024810184905290516001600160a01b03909216916340c10f19916044808201926020929091908290030181600087803b1580156140b157600080fd5b505af11580156140c5573d6000803e3d6000fd5b505050506040513d60208110156140db57600080fd5b5050602054600090156141df57614103612710610d0560205485613d8e90919063ffffffff16565b600654601f54604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015260248101859052905193945091169163a9059cbb916044808201926020929091908290030181600087803b15801561417757600080fd5b505af115801561418b573d6000803e3d6000fd5b505050506040513d60208110156141a157600080fd5b5050604080514281526020810183905281517fcb3f34aaa3445b461e6da5492dc89e5c257a59fa598131f3b6bbc97a3638e409929181900390910190a15b602254600090156142e157614205612710610d0560225486613d8e90919063ffffffff16565b600654602154604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015260248101859052905193945091169163a9059cbb916044808201926020929091908290030181600087803b15801561427957600080fd5b505af115801561428d573d6000803e3d6000fd5b505050506040513d60208110156142a357600080fd5b5050604080514281526020810183905281517fdc8b715b18523e58b7fd0da53259dfa91efd91df4a854d94b136e3333a3b9395929181900390910190a15b6142ef8161283e8585613e55565b600954600654919450614310916001600160a01b0390811691166000614517565b60095460065461432d916001600160a01b03918216911685614517565b600954604080517f97ffe1d70000000000000000000000000000000000000000000000000000000081526004810186905290516001600160a01b03909216916397ffe1d79160248082019260009290919082900301818387803b15801561439357600080fd5b505af11580156143a7573d6000803e3d6000fd5b5050604080514281526020810187905281517f03ca7276ab7799bf73fb79d27ff0610cd7049574f2508ef8445162833d439aea9450908190039091019150a1505050565b600060085b600e8160ff168154811061440057fe5b9060005260206000200154831061443557600f8160ff168154811061442157fe5b60009182526020909120015460105561445c565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016143f0565b5050601054919050565b60606144bb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166146719092919063ffffffff16565b805190915015611c35578080602001905160208110156144da57600080fd5b5051611c355760405162461bcd60e51b815260040180806020018281038252602a815260200180614b4e602a913960400191505060405180910390fd5b8015806145b65750604080517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b15801561458857600080fd5b505afa15801561459c573d6000803e3d6000fd5b505050506040513d60208110156145b257600080fd5b5051155b6145f15760405162461bcd60e51b8152600401808060200182810382526036815260200180614b9e6036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b300000000000000000000000000000000000000000000000000000000179052611c35908490614466565b60606146808484600085614688565b949350505050565b6060824710156146c95760405162461bcd60e51b81526004018080602001828103825260268152602001806149aa6026913960400191505060405180910390fd5b6146d285614802565b614723576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061478057805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101614743565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146147e2576040519150601f19603f3d011682016040523d82523d6000602084013e6147e7565b606091505b50915091506147f7828286614808565b979650505050505050565b3b151590565b60608315614817575081613de7565b8251156148275782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614871578181015183820152602001614859565b50505050905090810190601f16801561489e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b8280548282559060005260206000209081019282156148f5579160200282015b828111156148f5578251829069ffffffffffffffffffff169055916020019190600101906148cc565b50610d69929150614942565b8280548282559060005260206000209081019282156148f5579160200282015b828111156148f5578251829061ffff16905591602001919060010190614921565b5b80821115610d69576000815560010161494356fe54726561737572793a2063616e6e6f742072656465656d20626f6e64732077697468207a65726f20616d6f756e745f7072656d69756d5468726573686f6c6420697320686967686572207468616e20312e35416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c54726561737572793a20747265617375727920686173206e6f206d6f726520627564676574536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7754726561737572793a2063616e6e6f7420707572636861736520626f6e64732077697468207a65726f20616d6f756e7454726561737572793a2067726176655072696365206e6f7420656c696769626c6520666f7220626f6e642070757263686173655f6d696e74696e67466163746f72466f72506179696e67446562743a206f7574206f662072616e67655f6d6178537570706c79457870616e73696f6e50657263656e743a206f7574206f662072616e6765496e6465782068617320746f206265206c6f776572207468616e20636f756e74206f6620746965727354726561737572793a206661696c656420746f20636f6e73756c742047524156452070726963652066726f6d20746865206f7261636c6554726561737572793a2063616c6c6572206973206e6f7420746865206f70657261746f725361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564436f6e747261637447756172643a206f6e6520626c6f636b2c206f6e652066756e6374696f6e5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e63655f7072656d69756d5468726573686f6c64206578636565647320677261766550726963654365696c696e6754726561737572793a206e6f7420656e6f75676820626f6e64206c65667420746f2070757263686173655f626f6f747374726170537570706c79457870616e73696f6e50657263656e743a206f7574206f662072616e6765a2646970667358221220ecf0c0c4fb54a85e692e934edcd8769fbc7b630102fddc17e4c4cdb9550e937e64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10250,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3881,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "operator",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3884,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "initialized",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 3886,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "startTime",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3889,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "epoch",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3892,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "epochSupplyContractionLeft",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3895,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "excludedFromTotalSupply",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3897,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "grave",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 3899,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "xbond",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 3901,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "xshare",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 3903,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "masonry",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 3905,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "graveOracle",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 3907,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "gravePriceOne",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3909,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "gravePriceCeiling",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 3911,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "seigniorageSaved",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 3914,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "supplyTiers",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3917,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "maxExpansionTiers",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3919,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "maxSupplyExpansionPercent",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 3921,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "bondDepletionFloorPercent",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 3923,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "seigniorageExpansionFloorPercent",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 3925,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "maxSupplyContractionPercent",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 3927,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "maxDebtRatioPercent",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 3929,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "bondSupplyExpansionPercent",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 3931,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "bootstrapEpochs",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 3933,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "bootstrapSupplyExpansionPercent",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 3935,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "previousEpochGravePrice",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 3937,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "maxDiscountRate",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 3939,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "maxPremiumRate",
        "offset": 0,
        "slot": "26",
        "type": "t_uint256"
      },
      {
        "astId": 3941,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "discountPercent",
        "offset": 0,
        "slot": "27",
        "type": "t_uint256"
      },
      {
        "astId": 3943,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "premiumThreshold",
        "offset": 0,
        "slot": "28",
        "type": "t_uint256"
      },
      {
        "astId": 3945,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "premiumPercent",
        "offset": 0,
        "slot": "29",
        "type": "t_uint256"
      },
      {
        "astId": 3947,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "mintingFactorForPayingDebt",
        "offset": 0,
        "slot": "30",
        "type": "t_uint256"
      },
      {
        "astId": 3949,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "daoFund",
        "offset": 0,
        "slot": "31",
        "type": "t_address"
      },
      {
        "astId": 3951,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "daoFundSharedPercent",
        "offset": 0,
        "slot": "32",
        "type": "t_uint256"
      },
      {
        "astId": 3953,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "devFund",
        "offset": 0,
        "slot": "33",
        "type": "t_address"
      },
      {
        "astId": 3955,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "devFundSharedPercent",
        "offset": 0,
        "slot": "34",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}