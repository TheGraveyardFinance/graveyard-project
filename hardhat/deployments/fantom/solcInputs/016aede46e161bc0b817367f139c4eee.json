{
  "language": "Solidity",
  "sources": {
    "contracts/distribution/GraveGenesisRewardPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\n// Note that this pool has no minter key of GRAVE (rewards).\n// Instead, the governance will call GRAVE distributeReward method and send reward to this pool at the beginning.\ncontract GraveGenesisRewardPool {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    // governance\n    address public operator;\n    address public daoFund;\n    uint256 public depositFee;\n\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount; // How many tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n    }\n\n    // Info of each pool.\n    struct PoolInfo {\n        IERC20 token; // Address of LP token contract.\n        uint256 allocPoint; // How many allocation points assigned to this pool. GRAVE to distribute.\n        uint256 lastRewardTime; // Last time that GRAVE distribution occurs.\n        uint256 accGravePerShare; // Accumulated GRAVE per share, times 1e18. See below.\n        bool isStarted; // if lastRewardBlock has passed\n    }\n\n    IERC20 public grave;\n\n    // Info of each pool.\n    PoolInfo[] public poolInfo;\n\n    // Info of each user that stakes LP tokens.\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n\n    // Total allocation points. Must be the sum of all allocation points in all pools.\n    uint256 public totalAllocPoint = 0;\n\n    // The time when GRAVE mining starts.\n    uint256 public poolStartTime;\n\n    // The time when GRAVE mining ends.\n    uint256 public poolEndTime;\n\n    // MAINNET\n    uint256 public gravePerSecond =  0.24894 ether; // 43018 GRAVE / (48h * 60min * 60s)\n    uint256 public runningTime = 2 days; // 2 days\n    uint256 public constant TOTAL_REWARDS = 43018 ether;\n    // END MAINNET\n\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event RewardPaid(address indexed user, uint256 amount);\n\n    constructor(\n        address _grave,\n        uint256 _poolStartTime,\n        address _daoFund,\n        uint256 _depositFee\n    ) public {\n        require(block.timestamp < _poolStartTime, \"late\");\n        if (_grave != address(0)) grave = IERC20(_grave);\n        poolStartTime = _poolStartTime;\n        poolEndTime = poolStartTime + runningTime;\n        daoFund = _daoFund;\n        depositFee = _depositFee;\n        operator = msg.sender;\n    }\n\n    modifier onlyOperator() {\n        require(operator == msg.sender, \"GraveGenesisPool: caller is not the operator\");\n        _;\n    }\n\n    function checkPoolDuplicate(IERC20 _token) internal view {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            require(poolInfo[pid].token != _token, \"GraveGenesisPool: existing pool?\");\n        }\n    }\n\n    // Add a new token to the pool. Can only be called by the owner.\n    function add(\n        uint256 _allocPoint,\n        IERC20 _token,\n        bool _withUpdate,\n        uint256 _lastRewardTime\n    ) public onlyOperator {\n        checkPoolDuplicate(_token);\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        if (block.timestamp < poolStartTime) {\n            // chef is sleeping\n            if (_lastRewardTime == 0) {\n                _lastRewardTime = poolStartTime;\n            } else {\n                if (_lastRewardTime < poolStartTime) {\n                    _lastRewardTime = poolStartTime;\n                }\n            }\n        } else {\n            // chef is cooking\n            if (_lastRewardTime == 0 || _lastRewardTime < block.timestamp) {\n                _lastRewardTime = block.timestamp;\n            }\n        }\n        bool _isStarted =\n        (_lastRewardTime <= poolStartTime) ||\n        (_lastRewardTime <= block.timestamp);\n        poolInfo.push(PoolInfo({\n            token : _token,\n            allocPoint : _allocPoint,\n            lastRewardTime : _lastRewardTime,\n            accGravePerShare : 0,\n            isStarted : _isStarted\n            }));\n        if (_isStarted) {\n            totalAllocPoint = totalAllocPoint.add(_allocPoint);\n        }\n    }\n\n    // Update the given pool's GRAVE allocation point. Can only be called by the owner.\n    function set(uint256 _pid, uint256 _allocPoint) public onlyOperator {\n        massUpdatePools();\n        PoolInfo storage pool = poolInfo[_pid];\n        if (pool.isStarted) {\n            totalAllocPoint = totalAllocPoint.sub(pool.allocPoint).add(\n                _allocPoint\n            );\n        }\n        pool.allocPoint = _allocPoint;\n    }\n\n    // Return accumulate rewards over the given _from to _to block.\n    function getGeneratedReward(uint256 _fromTime, uint256 _toTime) public view returns (uint256) {\n        if (_fromTime >= _toTime) return 0;\n        if (_toTime >= poolEndTime) {\n            if (_fromTime >= poolEndTime) return 0;\n            if (_fromTime <= poolStartTime) return poolEndTime.sub(poolStartTime).mul(gravePerSecond);\n            return poolEndTime.sub(_fromTime).mul(gravePerSecond);\n        } else {\n            if (_toTime <= poolStartTime) return 0;\n            if (_fromTime <= poolStartTime) return _toTime.sub(poolStartTime).mul(gravePerSecond);\n            return _toTime.sub(_fromTime).mul(gravePerSecond);\n        }\n    }\n\n    // View function to see pending GRAVE on frontend.\n    function pendingGRAVE(uint256 _pid, address _user) external view returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 accGravePerShare = pool.accGravePerShare;\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\n        if (block.timestamp > pool.lastRewardTime && tokenSupply != 0) {\n            uint256 _generatedReward = getGeneratedReward(pool.lastRewardTime, block.timestamp);\n            uint256 _graveReward = _generatedReward.mul(pool.allocPoint).div(totalAllocPoint);\n            accGravePerShare = accGravePerShare.add(_graveReward.mul(1e18).div(tokenSupply));\n        }\n        return user.amount.mul(accGravePerShare).div(1e18).sub(user.rewardDebt);\n    }\n\n    // Update reward variables for all pools. Be careful of gas spending!\n    function massUpdatePools() public {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            updatePool(pid);\n        }\n    }\n\n    // Update reward variables of the given pool to be up-to-date.\n    function updatePool(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        if (block.timestamp <= pool.lastRewardTime) {\n            return;\n        }\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\n        if (tokenSupply == 0) {\n            pool.lastRewardTime = block.timestamp;\n            return;\n        }\n        if (!pool.isStarted) {\n            pool.isStarted = true;\n            totalAllocPoint = totalAllocPoint.add(pool.allocPoint);\n        }\n        if (totalAllocPoint > 0) {\n            uint256 _generatedReward = getGeneratedReward(pool.lastRewardTime, block.timestamp);\n            uint256 _graveReward = _generatedReward.mul(pool.allocPoint).div(totalAllocPoint);\n            pool.accGravePerShare = pool.accGravePerShare.add(_graveReward.mul(1e18).div(tokenSupply));\n        }\n        pool.lastRewardTime = block.timestamp;\n    }\n\n    // Deposit LP tokens.\n    function deposit(uint256 _pid, uint256 _amount) public {\n        address _sender = msg.sender;\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_sender];\n        updatePool(_pid);\n        if (user.amount > 0) {\n            uint256 _pending = user.amount.mul(pool.accGravePerShare).div(1e18).sub(user.rewardDebt);\n            if (_pending > 0) {\n                safeGraveTransfer(_sender, _pending);\n                emit RewardPaid(_sender, _pending);\n            }\n        }\n        if (_amount > 0) {\n            if (daoFund != address(0) && depositFee != 0) {\n                uint256 feeAmount = _amount.mul(depositFee).div(10000);\n                pool.token.safeTransferFrom(_sender, daoFund, feeAmount);\n                pool.token.safeTransferFrom(_sender, address(this), _amount.sub(feeAmount));\n                user.amount = user.amount.add(_amount.sub(feeAmount));\n            } else {\n                pool.token.safeTransferFrom(_sender, address(this), _amount);\n                user.amount = user.amount.add(_amount);\n            }\n        }\n        user.rewardDebt = user.amount.mul(pool.accGravePerShare).div(1e18);\n        emit Deposit(_sender, _pid, _amount);\n    }\n\n    // Withdraw LP tokens.\n    function withdraw(uint256 _pid, uint256 _amount) public {\n        address _sender = msg.sender;\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_sender];\n        require(user.amount >= _amount, \"withdraw: not good\");\n        updatePool(_pid);\n        uint256 _pending = user.amount.mul(pool.accGravePerShare).div(1e18).sub(user.rewardDebt);\n        if (_pending > 0) {\n            safeGraveTransfer(_sender, _pending);\n            emit RewardPaid(_sender, _pending);\n        }\n        if (_amount > 0) {\n            user.amount = user.amount.sub(_amount);\n            pool.token.safeTransfer(_sender, _amount);\n        }\n        user.rewardDebt = user.amount.mul(pool.accGravePerShare).div(1e18);\n        emit Withdraw(_sender, _pid, _amount);\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        uint256 _amount = user.amount;\n        user.amount = 0;\n        user.rewardDebt = 0;\n        pool.token.safeTransfer(msg.sender, _amount);\n        emit EmergencyWithdraw(msg.sender, _pid, _amount);\n    }\n\n    // Safe GRAVE transfer function, just in case if rounding error causes pool to not have enough GRAVEs.\n    function safeGraveTransfer(address _to, uint256 _amount) internal {\n        uint256 _graveBalance = grave.balanceOf(address(this));\n        if (_graveBalance > 0) {\n            if (_amount > _graveBalance) {\n                grave.safeTransfer(_to, _graveBalance);\n            } else {\n                grave.safeTransfer(_to, _amount);\n            }\n        }\n    }\n\n    function setOperator(address _operator) external onlyOperator {\n        operator = _operator;\n    }\n\n    function governanceRecoverUnsupported(IERC20 _token, uint256 amount, address to) external onlyOperator {\n        if (block.timestamp < poolEndTime + 90 days) {\n            // do not allow to drain core token (GRAVE or lps) if less than 90 days after pool ends\n            require(_token != grave, \"grave\");\n            uint256 length = poolInfo.length;\n            for (uint256 pid = 0; pid < length; ++pid) {\n                PoolInfo storage pool = poolInfo[pid];\n                require(_token != pool.token, \"pool.token\");\n            }\n        }\n        _token.safeTransfer(to, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/XShare.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\";\n\nimport \"./owner/Operator.sol\";\n\ncontract XShare is ERC20Burnable, Operator {\n    using SafeMath for uint256;\n\n    // TOTAL MAX SUPPLY = 50,001 XSHAREs\n    uint256 public constant FARMING_POOL_REWARD_ALLOCATION = 41000 ether;\n    uint256 public constant COMMUNITY_FUND_POOL_ALLOCATION = 4500 ether;\n    uint256 public constant DEV_FUND_POOL_ALLOCATION = 4500 ether;\n\n    uint256 public constant VESTING_DURATION = 365 days;\n    uint256 public startTime;\n    uint256 public endTime;\n\n    uint256 public communityFundRewardRate;\n    uint256 public devFundRewardRate;\n    \n    address public communityFund;\n    address public devFund;\n\n    uint256 public lastClaimedTime;\n\n    bool public rewardPoolDistributed = false;\n\n\n    constructor(uint256 _startTime, address _communityFund, address _devFund) public ERC20(\"Graveyard SHARE dummy\", \"XSHAREDUMMY\") {\n        _mint(msg.sender, 1 ether); // mint 1 GRAVE Share for initial pools deployment\n\n        startTime = _startTime;\n        endTime = startTime + VESTING_DURATION;\n\n        lastClaimedTime = startTime;\n\n        communityFundRewardRate = COMMUNITY_FUND_POOL_ALLOCATION.div(VESTING_DURATION);\n        devFundRewardRate = DEV_FUND_POOL_ALLOCATION.div(VESTING_DURATION);\n\n        require(_devFund != address(0), \"Address cannot be 0\");\n        devFund = _devFund;\n\n        require(_communityFund != address(0), \"Address cannot be 0\");\n        communityFund = _communityFund;\n    }\n\n    function setCommunityFund(address _communityFund) external onlyOperator {\t\n        require(_communityFund != address(0), \"zero\");\n        communityFund = _communityFund;\n    }\n\n    function setDevFund(address _devFund) external {\n        require(msg.sender == devFund, \"!dev\");\n        require(_devFund != address(0), \"zero\");\n        devFund = _devFund;\n    }\n\n    function unclaimedCommunityFund() public view returns (uint256 _pending) {\n        uint256 _now = block.timestamp;\n        if (_now > endTime) _now = endTime;\n        if (lastClaimedTime >= _now) return 0;\n        _pending = _now.sub(lastClaimedTime).mul(communityFundRewardRate);\n    }\n\n    function unclaimedDevFund() public view returns (uint256 _pending) {\n        uint256 _now = block.timestamp;\n        if (_now > endTime) _now = endTime;\n        if (lastClaimedTime >= _now) return 0;\n        _pending = _now.sub(lastClaimedTime).mul(devFundRewardRate);\n    }\n\n    /**\n     * @dev Claim pending rewards to community and dev fund\n     */\n    function claimRewards() external {\n        uint256 _pending = unclaimedCommunityFund();\n        if (_pending > 0 && communityFund != address(0)) {\n            _mint(communityFund, _pending);\n        }\n        _pending = unclaimedDevFund();\n        if (_pending > 0 && devFund != address(0)) {\n            _mint(devFund, _pending);\n        }\n        lastClaimedTime = block.timestamp;\n    }\n\n    /**\n     * @notice distribute to reward pool (only once)\n     */\n    function distributeReward(address _farmingIncentiveFund) external onlyOperator {\n        require(!rewardPoolDistributed, \"only can distribute once\");\n        require(_farmingIncentiveFund != address(0), \"!_farmingIncentiveFund\");\n        rewardPoolDistributed = true;\n        _mint(_farmingIncentiveFund, FARMING_POOL_REWARD_ALLOCATION);\n    }\n\n    function burn(uint256 amount) public override {\n        super.burn(amount);\n    }\n\n    function governanceRecoverUnsupported(\n        IERC20 _token,\n        uint256 _amount,\n        address _to\n    ) external onlyOperator {\n        _token.transfer(_to, _amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./ERC20.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    using SafeMath for uint256;\n\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\");\n\n        _approve(account, _msgSender(), decreasedAllowance);\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/owner/Operator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/GSN/Context.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract Operator is Context, Ownable {\n    address private _operator;\n\n    event OperatorTransferred(address indexed previousOperator, address indexed newOperator);\n\n    constructor() internal {\n        _operator = _msgSender();\n        emit OperatorTransferred(address(0), _operator);\n    }\n\n    function operator() public view returns (address) {\n        return _operator;\n    }\n\n    modifier onlyOperator() {\n        require(_operator == msg.sender, \"operator: caller is not the operator\");\n        _;\n    }\n\n    function isOperator() public view returns (bool) {\n        return _msgSender() == _operator;\n    }\n\n    function transferOperator(address newOperator_) public onlyOwner {\n        _transferOperator(newOperator_);\n    }\n\n    function _transferOperator(address newOperator_) internal {\n        require(newOperator_ != address(0), \"operator: zero address given for new operator\");\n        emit OperatorTransferred(address(0), newOperator_);\n        _operator = newOperator_;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/GSN/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "contracts/XBond.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\";\n\nimport \"./owner/Operator.sol\";\n\ncontract XBond is ERC20Burnable, Operator {\n    /**\n     * @notice Constructs the GRAVE Bond ERC-20 contract.\n     */\n    constructor() public ERC20(\"Graveyard BOND dummy\", \"XBONDDUMMY\") {}\n\n    /**\n     * @notice Operator mints basis bonds to a recipient\n     * @param recipient_ The address of recipient\n     * @param amount_ The amount of basis bonds to mint to\n     * @return whether the process has been done\n     */\n    function mint(address recipient_, uint256 amount_) public onlyOperator returns (bool) {\n        uint256 balanceBefore = balanceOf(recipient_);\n        _mint(recipient_, amount_);\n        uint256 balanceAfter = balanceOf(recipient_);\n\n        return balanceAfter > balanceBefore;\n    }\n\n    function burn(uint256 amount) public override {\n        super.burn(amount);\n    }\n\n    function burnFrom(address account, uint256 amount) public override onlyOperator {\n        super.burnFrom(account, amount);\n    }\n}\n"
    },
    "contracts/Grave.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\";\nimport \"@openzeppelin/contracts/math/Math.sol\";\n\nimport \"./lib/SafeMath8.sol\";\nimport \"./owner/Operator.sol\";\nimport \"./interfaces/IOracle.sol\";\n\ncontract Grave is ERC20Burnable, Operator {\n    using SafeMath8 for uint8;\n    using SafeMath for uint256;\n\n    // Initial distribution for the first 24h genesis pools\n    uint256 public constant INITIAL_GENESIS_POOL_DISTRIBUTION = 38000 ether;\n    // Initial distribution for the day 4-7 GRAVE-USDC LP -> GRAVE pool\n    uint256 public constant INITIAL_GRAVE_POOL_DISTRIBUTION = 0 ether;\n    // Distribution for airdrops wallet\n    uint256 public constant INITIAL_AIRDROP_WALLET_DISTRIBUTION = 0 ether;\n\n    // Have the rewards been distributed to the pools\n    bool public rewardPoolDistributed = false;\n\n    /* ================= Taxation =============== */\n    // Address of the Oracle\n    address public graveOracle;\n    // Address of the Tax Office\n    address public taxOffice;\n\n    // Current tax rate\n    uint256 public taxRate;\n    // Price threshold below which taxes will get burned\n    uint256 public burnThreshold = 1.10e18;\n    // Address of the tax collector wallet\n    address public taxCollectorAddress;\n\n    // Should the taxes be calculated using the tax tiers\n    bool public autoCalculateTax;\n\n    // Tax Tiers\n    uint256[] public taxTiersTwaps = [0, 5e17, 6e17, 7e17, 8e17, 9e17, 9.5e17, 1e18, 1.05e18, 1.10e18, 1.20e18, 1.30e18, 1.40e18, 1.50e18];\n    uint256[] public taxTiersRates = [2000, 1900, 1800, 1700, 1600, 1500, 1500, 1500, 1500, 1400, 900, 400, 200, 100];\n\n    // Sender addresses excluded from Tax\n    mapping(address => bool) public excludedAddresses;\n\n    event TaxOfficeTransferred(address oldAddress, address newAddress);\n\n    modifier onlyTaxOffice() {\n        require(taxOffice == msg.sender, \"Caller is not the tax office\");\n        _;\n    }\n\n    modifier onlyOperatorOrTaxOffice() {\n        require(isOperator() || taxOffice == msg.sender, \"Caller is not the operator or the tax office\");\n        _;\n    }\n\n    /**\n     * @notice Constructs the GRAVE ERC-20 contract.\n     */\n    constructor(uint256 _taxRate, address _taxCollectorAddress) public ERC20(\"GRAVE dummy\", \"GRAVEDUMMY\") {\n        // Mints 1 GRAVE to contract creator for initial pool setup\n        require(_taxRate < 10000, \"tax equal or bigger to 100%\");\n        //require(_taxCollectorAddress != address(0), \"tax collector address must be non-zero address\");\n\n        excludeAddress(address(this));\n\n        _mint(msg.sender, 1 ether);\n        taxRate = _taxRate;\n        taxCollectorAddress = _taxCollectorAddress;\n    }\n\n    /* ============= Taxation ============= */\n\n    function getTaxTiersTwapsCount() public view returns (uint256 count) {\n        return taxTiersTwaps.length;\n    }\n\n    function getTaxTiersRatesCount() public view returns (uint256 count) {\n        return taxTiersRates.length;\n    }\n\n    function isAddressExcluded(address _address) public view returns (bool) {\n        return excludedAddresses[_address];\n    }\n\n    function setTaxTiersTwap(uint8 _index, uint256 _value) public onlyTaxOffice returns (bool) {\n        require(_index >= 0, \"Index has to be higher than 0\");\n        require(_index < getTaxTiersTwapsCount(), \"Index has to lower than count of tax tiers\");\n        if (_index > 0) {\n            require(_value > taxTiersTwaps[_index - 1]);\n        }\n        if (_index < getTaxTiersTwapsCount().sub(1)) {\n            require(_value < taxTiersTwaps[_index + 1]);\n        }\n        taxTiersTwaps[_index] = _value;\n        return true;\n    }\n\n    function setTaxTiersRate(uint8 _index, uint256 _value) public onlyTaxOffice returns (bool) {\n        require(_index >= 0, \"Index has to be higher than 0\");\n        require(_index < getTaxTiersRatesCount(), \"Index has to lower than count of tax tiers\");\n        taxTiersRates[_index] = _value;\n        return true;\n    }\n\n    function setBurnThreshold(uint256 _burnThreshold) public onlyTaxOffice returns (bool) {\n        burnThreshold = _burnThreshold;\n    }\n\n    function _getGravePrice() internal view returns (uint256 _gravePrice) {\n        try IOracle(graveOracle).consult(address(this), 1e18) returns (uint144 _price) {\n            return uint256(_price);\n        } catch {\n            revert(\"Grave: failed to fetch GRAVE price from Oracle\");\n        }\n    }\n\n    function _updateTaxRate(uint256 _gravePrice) internal returns (uint256){\n        if (autoCalculateTax) {\n            for (uint8 tierId = uint8(getTaxTiersTwapsCount()).sub(1); tierId >= 0; --tierId) {\n                if (_gravePrice >= taxTiersTwaps[tierId]) {\n                    require(taxTiersRates[tierId] < 10000, \"tax equal or bigger to 100%\");\n                    taxRate = taxTiersRates[tierId];\n                    return taxTiersRates[tierId];\n                }\n            }\n        }\n    }\n\n    function enableAutoCalculateTax() public onlyTaxOffice {\n        autoCalculateTax = true;\n    }\n\n    function disableAutoCalculateTax() public onlyTaxOffice {\n        autoCalculateTax = false;\n    }\n\n    function setGraveOracle(address _graveOracle) public onlyOperatorOrTaxOffice {\n        require(_graveOracle != address(0), \"oracle address cannot be 0 address\");\n        graveOracle = _graveOracle;\n    }\n\n    function setTaxOffice(address _taxOffice) public onlyOperatorOrTaxOffice {\n        require(_taxOffice != address(0), \"tax office address cannot be 0 address\");\n        emit TaxOfficeTransferred(taxOffice, _taxOffice);\n        taxOffice = _taxOffice;\n    }\n\n    function setTaxCollectorAddress(address _taxCollectorAddress) public onlyTaxOffice {\n        require(_taxCollectorAddress != address(0), \"tax collector address must be non-zero address\");\n        taxCollectorAddress = _taxCollectorAddress;\n    }\n\n    function setTaxRate(uint256 _taxRate) public onlyTaxOffice {\n        require(!autoCalculateTax, \"auto calculate tax cannot be enabled\");\n        require(_taxRate < 10000, \"tax equal or bigger to 100%\");\n        taxRate = _taxRate;\n    }\n\n    function excludeAddress(address _address) public onlyOperatorOrTaxOffice returns (bool) {\n        require(!excludedAddresses[_address], \"address can't be excluded\");\n        excludedAddresses[_address] = true;\n        return true;\n    }\n\n    function includeAddress(address _address) public onlyOperatorOrTaxOffice returns (bool) {\n        require(excludedAddresses[_address], \"address can't be included\");\n        excludedAddresses[_address] = false;\n        return true;\n    }\n\n    /**\n     * @notice Operator mints GRAVE to a recipient\n     * @param recipient_ The address of recipient\n     * @param amount_ The amount of GRAVE to mint to\n     * @return whether the process has been done\n     */\n    function mint(address recipient_, uint256 amount_) public onlyOperator returns (bool) {\n        uint256 balanceBefore = balanceOf(recipient_);\n        _mint(recipient_, amount_);\n        uint256 balanceAfter = balanceOf(recipient_);\n\n        return balanceAfter > balanceBefore;\n    }\n\n    function burn(uint256 amount) public override {\n        super.burn(amount);\n    }\n\n    function burnFrom(address account, uint256 amount) public override onlyOperator {\n        super.burnFrom(account, amount);\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        uint256 currentTaxRate = 0;\n        bool burnTax = false;\n\n        if (autoCalculateTax) {\n            uint256 currentGravePrice = _getGravePrice();\n            currentTaxRate = _updateTaxRate(currentGravePrice);\n            if (currentGravePrice < burnThreshold) {\n                burnTax = true;\n            }\n        }\n\n\n        if (currentTaxRate == 0 || excludedAddresses[sender]) {\n            _transfer(sender, recipient, amount);\n        } else {\n            _transferWithTax(sender, recipient, amount, burnTax);\n        }\n\n        _approve(sender, _msgSender(), allowance(sender, _msgSender()).sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function _transferWithTax(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bool burnTax\n    ) internal returns (bool) {\n        uint256 taxAmount = amount.mul(taxRate).div(10000);\n        uint256 amountAfterTax = amount.sub(taxAmount);\n\n        if(burnTax) {\n            // Burn tax\n            super.burnFrom(sender, taxAmount);\n        } else {\n            // Transfer tax to tax collector\n            _transfer(sender, taxCollectorAddress, taxAmount);\n        }\n\n        // Transfer amount after tax to recipient\n        _transfer(sender, recipient, amountAfterTax);\n\n        return true;\n    }\n\n    /**\n     * @notice distribute to reward pool (only once)\n     */\n    function distributeReward(\n        address _genesisPool,\n        address _gravePool,\n        address _airdropWallet\n    ) external onlyOperator {\n        require(!rewardPoolDistributed, \"only can distribute once\");\n        require(_genesisPool != address(0), \"!_genesisPool\");\n        require(_gravePool != address(0), \"!_gravePool\");\n        require(_airdropWallet != address(0), \"!_airdropWallet\");\n        rewardPoolDistributed = true;\n        _mint(_genesisPool, INITIAL_GENESIS_POOL_DISTRIBUTION);\n        _mint(_gravePool, INITIAL_GRAVE_POOL_DISTRIBUTION);\n        _mint(_airdropWallet, INITIAL_AIRDROP_WALLET_DISTRIBUTION);\n    }\n\n    function governanceRecoverUnsupported(\n        IERC20 _token,\n        uint256 _amount,\n        address _to\n    ) external onlyOperator {\n        _token.transfer(_to, _amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n"
    },
    "contracts/lib/SafeMath8.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath8 {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint8 a, uint8 b) internal pure returns (uint8) {\n        uint8 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint8 a, uint8 b) internal pure returns (uint8) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint8 a, uint8 b, string memory errorMessage) internal pure returns (uint8) {\n        require(b <= a, errorMessage);\n        uint8 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint8 a, uint8 b) internal pure returns (uint8) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint8 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint8 a, uint8 b) internal pure returns (uint8) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint8 a, uint8 b, string memory errorMessage) internal pure returns (uint8) {\n        require(b > 0, errorMessage);\n        uint8 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint8 a, uint8 b) internal pure returns (uint8) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint8 a, uint8 b, string memory errorMessage) internal pure returns (uint8) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "contracts/interfaces/IOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface IOracle {\n    function update() external;\n\n    function consult(address _token, uint256 _amountIn) external view returns (uint144 amountOut);\n\n    function twap(address _token, uint256 _amountIn) external view returns (uint144 _amountOut);\n}\n"
    },
    "contracts/Treasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/math/Math.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\nimport \"./lib/Babylonian.sol\";\nimport \"./owner/Operator.sol\";\nimport \"./utils/ContractGuard.sol\";\nimport \"./interfaces/IBasisAsset.sol\";\nimport \"./interfaces/IOracle.sol\";\nimport \"./interfaces/IBoardroom.sol\";\n\n// interface IBondTreasury {\n//     function totalVested() external view returns (uint256);\n// }\n\ncontract Treasury is ContractGuard {\n    using SafeERC20 for IERC20;\n    using Address for address;\n    using SafeMath for uint256;\n\n    /* ========= CONSTANT VARIABLES ======== */\n\n    uint256 public constant PERIOD = 6 hours;\n\n    /* ========== STATE VARIABLES ========== */\n\n    // governance\n    address public operator;\n\n    // flags\n    bool public initialized = false;\n\n    // epoch\n    uint256 public startTime;\n    uint256 public epoch = 0;\n    uint256 public epochSupplyContractionLeft = 0;\n\n    // exclusions from total supply\n    address[] public excludedFromTotalSupply;\n\n    // core components\n    address public grave;\n    address public xbond;\n    address public xshare;\n\n    address public masonry;\n    // address public bondTreasury;\n    address public graveOracle;\n\n    // price\n    uint256 public gravePriceOne;\n    uint256 public gravePriceCeiling;\n\n    uint256 public seigniorageSaved;\n\n    uint256[] public supplyTiers;\n    uint256[] public maxExpansionTiers;\n\n    uint256 public maxSupplyExpansionPercent;\n    uint256 public bondDepletionFloorPercent;\n    uint256 public seigniorageExpansionFloorPercent;\n    uint256 public maxSupplyContractionPercent;\n    uint256 public maxDebtRatioPercent;\n\n    uint256 public bondSupplyExpansionPercent;\n\n    // 28 first epochs (1 week) with 4.5% expansion regardless of GRAVE price\n    uint256 public bootstrapEpochs;\n    uint256 public bootstrapSupplyExpansionPercent;\n\n    /* =================== Added variables =================== */\n    uint256 public previousEpochGravePrice;\n    uint256 public maxDiscountRate; // when purchasing bond\n    uint256 public maxPremiumRate; // when redeeming bond\n    uint256 public discountPercent;\n    uint256 public premiumThreshold;\n    uint256 public premiumPercent;\n    uint256 public mintingFactorForPayingDebt; // print extra GRAVE during debt phase\n\n    address public daoFund;\n    uint256 public daoFundSharedPercent;\n\n    address public devFund;\n    uint256 public devFundSharedPercent;\n\n    /* =================== Events =================== */\n\n    event Initialized(address indexed executor, uint256 at);\n    event BurnedBonds(address indexed from, uint256 bondAmount);\n    event RedeemedBonds(address indexed from, uint256 graveAmount, uint256 bondAmount);\n    event BoughtBonds(address indexed from, uint256 graveAmount, uint256 bondAmount);\n    event TreasuryFunded(uint256 timestamp, uint256 seigniorage);\n    event BoardroomFunded(uint256 timestamp, uint256 seigniorage);\n    event DaoFundFunded(uint256 timestamp, uint256 seigniorage);\n    event DevFundFunded(uint256 timestamp, uint256 seigniorage);\n\n    /* =================== Modifier =================== */\n\n    modifier onlyOperator() {\n        require(operator == msg.sender, \"Treasury: caller is not the operator\");\n        _;\n    }\n\n    modifier checkCondition {\n        require(now >= startTime, \"Treasury: not started yet\");\n\n        _;\n    }\n\n    modifier checkEpoch {\n        require(now >= nextEpochPoint(), \"Treasury: not opened yet\");\n\n        _;\n\n        epoch = epoch.add(1);\n        epochSupplyContractionLeft = (getGravePrice() > gravePriceCeiling) ? 0 : getGraveCirculatingSupply().mul(maxSupplyContractionPercent).div(10000);\n    }\n\n    modifier checkOperator {\n        require(\n            IBasisAsset(grave).operator() == address(this) &&\n                IBasisAsset(xbond).operator() == address(this) &&\n                IBasisAsset(xshare).operator() == address(this) &&\n                Operator(masonry).operator() == address(this),\n            \"Treasury: need more permission\"\n        );\n\n        _;\n    }\n\n    modifier notInitialized {\n        require(!initialized, \"Treasury: already initialized\");\n\n        _;\n    }\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    function isInitialized() public view returns (bool) {\n        return initialized;\n    }\n\n    // epoch\n    function nextEpochPoint() public view returns (uint256) {\n        return startTime.add(epoch.mul(PERIOD));\n    }\n\n    // oracle\n    function getGravePrice() public view returns (uint256 gravePrice) {\n        try IOracle(graveOracle).consult(grave, 1e18) returns (uint144 price) {\n            return uint256(price);\n        } catch {\n            revert(\"Treasury: failed to consult GRAVE price from the oracle\");\n        }\n    }\n\n    function getGraveUpdatedPrice() public view returns (uint256 _gravePrice) {\n        try IOracle(graveOracle).twap(grave, 1e18) returns (uint144 price) {\n            return uint256(price);\n        } catch {\n            revert(\"Treasury: failed to consult GRAVE price from the oracle\");\n        }\n    }\n\n    // budget\n    function getReserve() public view returns (uint256) {\n        return seigniorageSaved;\n    }\n\n    function getBurnableGraveLeft() public view returns (uint256 _burnableGraveLeft) {\n        uint256 _gravePrice = getGravePrice();\n        if (_gravePrice <= gravePriceOne) {\n            uint256 _graveSupply = getGraveCirculatingSupply();\n            uint256 _bondMaxSupply = _graveSupply.mul(maxDebtRatioPercent).div(10000);\n            uint256 _bondSupply = IERC20(xbond).totalSupply();\n            if (_bondMaxSupply > _bondSupply) {\n                uint256 _maxMintableBond = _bondMaxSupply.sub(_bondSupply);\n                uint256 _maxBurnableGrave = _maxMintableBond.mul(_gravePrice).div(1e18);\n                _burnableGraveLeft = Math.min(epochSupplyContractionLeft, _maxBurnableGrave);\n            }\n        }\n    }\n\n    function getRedeemableBonds() public view returns (uint256 _redeemableBonds) {\n        uint256 _gravePrice = getGravePrice();\n        if (_gravePrice > gravePriceCeiling) {\n            uint256 _totalGrave = IERC20(grave).balanceOf(address(this));\n            uint256 _rate = getBondPremiumRate();\n            if (_rate > 0) {\n                _redeemableBonds = _totalGrave.mul(1e18).div(_rate);\n            }\n        }\n    }\n\n    function getBondDiscountRate() public view returns (uint256 _rate) {\n        uint256 _gravePrice = getGravePrice();\n        if (_gravePrice <= gravePriceOne) {\n            if (discountPercent == 0) {\n                // no discount\n                _rate = gravePriceOne;\n            } else {\n                uint256 _bondAmount = gravePriceOne.mul(1e18).div(_gravePrice); // to burn 1 GRAVE\n                uint256 _discountAmount = _bondAmount.sub(gravePriceOne).mul(discountPercent).div(10000);\n                _rate = gravePriceOne.add(_discountAmount);\n                if (maxDiscountRate > 0 && _rate > maxDiscountRate) {\n                    _rate = maxDiscountRate;\n                }\n            }\n        }\n    }\n\n    function getBondPremiumRate() public view returns (uint256 _rate) {\n        uint256 _gravePrice = getGravePrice();\n        if (_gravePrice > gravePriceCeiling) {\n            uint256 _gravePricePremiumThreshold = gravePriceOne.mul(premiumThreshold).div(100);\n            if (_gravePrice >= _gravePricePremiumThreshold) {\n                //Price > 1.10\n                uint256 _premiumAmount = _gravePrice.sub(gravePriceOne).mul(premiumPercent).div(10000);\n                _rate = gravePriceOne.add(_premiumAmount);\n                if (maxPremiumRate > 0 && _rate > maxPremiumRate) {\n                    _rate = maxPremiumRate;\n                }\n            } else {\n                // no premium bonus\n                _rate = gravePriceOne;\n            }\n        }\n    }\n\n    /* ========== GOVERNANCE ========== */\n\n    function initialize(\n        address _grave,\n        address _xbond,\n        address _xshare,\n        address _graveOracle,\n        address _masonry,\n        address _genesisPool,\n        // address _bondTreasury,\n        uint256 _startTime\n    ) public notInitialized {\n        grave = _grave;\n        xbond = _xbond;\n        xshare = _xshare;\n        graveOracle = _graveOracle;\n        masonry = _masonry;\n        // bondTreasury = _bondTreasury;\n        startTime = _startTime;\n\n        gravePriceOne = 10**18;\n        gravePriceCeiling = gravePriceOne.mul(101).div(100);\n\n        // exclude contracts from total supply\n        excludedFromTotalSupply.push(_genesisPool);\n        // excludedFromTotalSupply.push(_bondTreasury);\n\n        // Dynamic max expansion percent\n        supplyTiers = [10000 ether, 15000 ether, 25000 ether, 35000 ether, 60000 ether, 250000 ether, 500000 ether, 1000000 ether];\n        maxExpansionTiers = [450, 400, 350, 300, 250, 200, 150, 125];\n\n        maxSupplyExpansionPercent = 450; // Upto 4.5% supply for expansion\n\n        bondDepletionFloorPercent = 10000; // 100% of Bond supply for depletion floor\n        seigniorageExpansionFloorPercent = 3500; // At least 35% of expansion reserved for masonry\n        maxSupplyContractionPercent = 300; // Upto 3.0% supply for contraction (to burn GRAVE and mint tBOND)\n        maxDebtRatioPercent = 3500; // Upto 35% supply of tBOND to purchase\n\n        bondSupplyExpansionPercent = 500; // maximum 5% emissions per epoch for POL bonds\n\n        premiumThreshold = 110;\n        premiumPercent = 7000;\n\n        // First 28 epochs with 2.5% expansion\n        bootstrapEpochs = 12;\n        bootstrapSupplyExpansionPercent = 250;\n\n        // set seigniorageSaved to it's balance\n        seigniorageSaved = IERC20(grave).balanceOf(address(this));\n\n        initialized = true;\n        operator = msg.sender;\n        emit Initialized(msg.sender, block.number);\n    }\n\n    function setOperator(address _operator) external onlyOperator {\n        operator = _operator;\n    }\n\n    function setBoardroom(address _masonry) external onlyOperator {\n        masonry = _masonry;\n    }\n\n    // function setBondTreasury(address _bondTreasury) external onlyOperator {\n    //     bondTreasury = _bondTreasury;\n    // }\n\n    function setGraveOracle(address _graveOracle) external onlyOperator {\n        graveOracle = _graveOracle;\n    }\n\n    function setGravePriceCeiling(uint256 _gravePriceCeiling) external onlyOperator {\n        require(_gravePriceCeiling >= gravePriceOne && _gravePriceCeiling <= gravePriceOne.mul(120).div(100), \"out of range\"); // [$1.0, $1.2]\n        gravePriceCeiling = _gravePriceCeiling;\n    }\n\n    function setMaxSupplyExpansionPercents(uint256 _maxSupplyExpansionPercent) external onlyOperator {\n        require(_maxSupplyExpansionPercent >= 10 && _maxSupplyExpansionPercent <= 1000, \"_maxSupplyExpansionPercent: out of range\"); // [0.1%, 10%]\n        maxSupplyExpansionPercent = _maxSupplyExpansionPercent;\n    }\n\n    function setSupplyTiersEntry(uint8 _index, uint256 _value) external onlyOperator returns (bool) {\n        require(_index >= 0, \"Index has to be higher than 0\");\n        require(_index < 9, \"Index has to be lower than count of tiers\");\n        if (_index > 0) {\n            require(_value > supplyTiers[_index - 1]);\n        }\n        if (_index < 8) {\n            require(_value < supplyTiers[_index + 1]);\n        }\n        supplyTiers[_index] = _value;\n        return true;\n    }\n\n    function setMaxExpansionTiersEntry(uint8 _index, uint256 _value) external onlyOperator returns (bool) {\n        require(_index >= 0, \"Index has to be higher than 0\");\n        require(_index < 9, \"Index has to be lower than count of tiers\");\n        require(_value >= 10 && _value <= 1000, \"_value: out of range\"); // [0.1%, 10%]\n        maxExpansionTiers[_index] = _value;\n        return true;\n    }\n\n    function setBondDepletionFloorPercent(uint256 _bondDepletionFloorPercent) external onlyOperator {\n        require(_bondDepletionFloorPercent >= 500 && _bondDepletionFloorPercent <= 10000, \"out of range\"); // [5%, 100%]\n        bondDepletionFloorPercent = _bondDepletionFloorPercent;\n    }\n\n    function setMaxSupplyContractionPercent(uint256 _maxSupplyContractionPercent) external onlyOperator {\n        require(_maxSupplyContractionPercent >= 100 && _maxSupplyContractionPercent <= 1500, \"out of range\"); // [0.1%, 15%]\n        maxSupplyContractionPercent = _maxSupplyContractionPercent;\n    }\n\n    function setMaxDebtRatioPercent(uint256 _maxDebtRatioPercent) external onlyOperator {\n        require(_maxDebtRatioPercent >= 1000 && _maxDebtRatioPercent <= 10000, \"out of range\"); // [10%, 100%]\n        maxDebtRatioPercent = _maxDebtRatioPercent;\n    }\n\n    function setBootstrap(uint256 _bootstrapEpochs, uint256 _bootstrapSupplyExpansionPercent) external onlyOperator {\n        require(_bootstrapEpochs <= 120, \"_bootstrapEpochs: out of range\"); // <= 1 month\n        require(_bootstrapSupplyExpansionPercent >= 100 && _bootstrapSupplyExpansionPercent <= 1000, \"_bootstrapSupplyExpansionPercent: out of range\"); // [1%, 10%]\n        bootstrapEpochs = _bootstrapEpochs;\n        bootstrapSupplyExpansionPercent = _bootstrapSupplyExpansionPercent;\n    }\n\n    function setExtraFunds(\n        address _daoFund,\n        uint256 _daoFundSharedPercent,\n        address _devFund,\n        uint256 _devFundSharedPercent\n    ) external onlyOperator {\n        require(_daoFund != address(0), \"zero\");\n        require(_daoFundSharedPercent <= 3000, \"out of range\"); // <= 30%\n        require(_devFund != address(0), \"zero\");\n        require(_devFundSharedPercent <= 1000, \"out of range\"); // <= 10%\n        daoFund = _daoFund;\n        daoFundSharedPercent = _daoFundSharedPercent;\n        devFund = _devFund;\n        devFundSharedPercent = _devFundSharedPercent;\n    }\n\n    function setMaxDiscountRate(uint256 _maxDiscountRate) external onlyOperator {\n        maxDiscountRate = _maxDiscountRate;\n    }\n\n    function setMaxPremiumRate(uint256 _maxPremiumRate) external onlyOperator {\n        maxPremiumRate = _maxPremiumRate;\n    }\n\n    function setDiscountPercent(uint256 _discountPercent) external onlyOperator {\n        require(_discountPercent <= 20000, \"_discountPercent is over 200%\");\n        discountPercent = _discountPercent;\n    }\n\n    function setPremiumThreshold(uint256 _premiumThreshold) external onlyOperator {\n        require(_premiumThreshold >= gravePriceCeiling, \"_premiumThreshold exceeds gravePriceCeiling\");\n        require(_premiumThreshold <= 150, \"_premiumThreshold is higher than 1.5\");\n        premiumThreshold = _premiumThreshold;\n    }\n\n    function setPremiumPercent(uint256 _premiumPercent) external onlyOperator {\n        require(_premiumPercent <= 20000, \"_premiumPercent is over 200%\");\n        premiumPercent = _premiumPercent;\n    }\n\n    function setMintingFactorForPayingDebt(uint256 _mintingFactorForPayingDebt) external onlyOperator {\n        require(_mintingFactorForPayingDebt >= 10000 && _mintingFactorForPayingDebt <= 20000, \"_mintingFactorForPayingDebt: out of range\"); // [100%, 200%]\n        mintingFactorForPayingDebt = _mintingFactorForPayingDebt;\n    }\n\n    function setBondSupplyExpansionPercent(uint256 _bondSupplyExpansionPercent) external onlyOperator {\n        bondSupplyExpansionPercent = _bondSupplyExpansionPercent;\n    }\n\n    /* ========== MUTABLE FUNCTIONS ========== */\n\n    function _updateGravePrice() internal {\n        try IOracle(graveOracle).update() {} catch {}\n    }\n\n    function getGraveCirculatingSupply() public view returns (uint256) {\n        IERC20 graveErc20 = IERC20(grave);\n        uint256 totalSupply = graveErc20.totalSupply();\n        uint256 balanceExcluded = 0;\n        for (uint8 entryId = 0; entryId < excludedFromTotalSupply.length; ++entryId) {\n            balanceExcluded = balanceExcluded.add(graveErc20.balanceOf(excludedFromTotalSupply[entryId]));\n        }\n        return totalSupply.sub(balanceExcluded);\n    }\n\n    function buyBonds(uint256 _graveAmount, uint256 targetPrice) external onlyOneBlock checkCondition checkOperator {\n        require(_graveAmount > 0, \"Treasury: cannot purchase bonds with zero amount\");\n\n        uint256 gravePrice = getGravePrice();\n        require(gravePrice == targetPrice, \"Treasury: GRAVE price moved\");\n        require(\n            gravePrice < gravePriceOne, // price < $1\n            \"Treasury: gravePrice not eligible for bond purchase\"\n        );\n\n        require(_graveAmount <= epochSupplyContractionLeft, \"Treasury: not enough bond left to purchase\");\n\n        uint256 _rate = getBondDiscountRate();\n        require(_rate > 0, \"Treasury: invalid bond rate\");\n\n        uint256 _bondAmount = _graveAmount.mul(_rate).div(1e18);\n        uint256 graveSupply = getGraveCirculatingSupply();\n        uint256 newBondSupply = IERC20(xbond).totalSupply().add(_bondAmount);\n        require(newBondSupply <= graveSupply.mul(maxDebtRatioPercent).div(10000), \"over max debt ratio\");\n\n        IBasisAsset(grave).burnFrom(msg.sender, _graveAmount);\n        IBasisAsset(xbond).mint(msg.sender, _bondAmount);\n\n        epochSupplyContractionLeft = epochSupplyContractionLeft.sub(_graveAmount);\n        _updateGravePrice();\n\n        emit BoughtBonds(msg.sender, _graveAmount, _bondAmount);\n    }\n\n    function redeemBonds(uint256 _bondAmount, uint256 targetPrice) external onlyOneBlock checkCondition checkOperator {\n        require(_bondAmount > 0, \"Treasury: cannot redeem bonds with zero amount\");\n\n        uint256 gravePrice = getGravePrice();\n        require(gravePrice == targetPrice, \"Treasury: GRAVE price moved\");\n        require(\n            gravePrice > gravePriceCeiling, // price > $1.01\n            \"Treasury: gravePrice not eligible for bond purchase\"\n        );\n\n        uint256 _rate = getBondPremiumRate();\n        require(_rate > 0, \"Treasury: invalid bond rate\");\n\n        uint256 _graveAmount = _bondAmount.mul(_rate).div(1e18);\n        require(IERC20(grave).balanceOf(address(this)) >= _graveAmount, \"Treasury: treasury has no more budget\");\n\n        seigniorageSaved = seigniorageSaved.sub(Math.min(seigniorageSaved, _graveAmount));\n\n        IBasisAsset(xbond).burnFrom(msg.sender, _bondAmount);\n        IERC20(grave).safeTransfer(msg.sender, _graveAmount);\n\n        _updateGravePrice();\n\n        emit RedeemedBonds(msg.sender, _graveAmount, _bondAmount);\n    }\n\n    function _sendToBoardroom(uint256 _amount) internal {\n        IBasisAsset(grave).mint(address(this), _amount);\n\n        uint256 _daoFundSharedAmount = 0;\n        if (daoFundSharedPercent > 0) {\n            _daoFundSharedAmount = _amount.mul(daoFundSharedPercent).div(10000);\n            IERC20(grave).transfer(daoFund, _daoFundSharedAmount);\n            emit DaoFundFunded(now, _daoFundSharedAmount);\n        }\n\n        uint256 _devFundSharedAmount = 0;\n        if (devFundSharedPercent > 0) {\n            _devFundSharedAmount = _amount.mul(devFundSharedPercent).div(10000);\n            IERC20(grave).transfer(devFund, _devFundSharedAmount);\n            emit DevFundFunded(now, _devFundSharedAmount);\n        }\n\n        _amount = _amount.sub(_daoFundSharedAmount).sub(_devFundSharedAmount);\n\n        IERC20(grave).safeApprove(masonry, 0);\n        IERC20(grave).safeApprove(masonry, _amount);\n        IBoardroom(masonry).allocateSeigniorage(_amount);\n        emit BoardroomFunded(now, _amount);\n    }\n\n    // function _sendToBondTreasury(uint256 _amount) internal {\n    //     uint256 treasuryBalance = IERC20(grave).balanceOf(bondTreasury);\n    //     uint256 treasuryVested = IBondTreasury(bondTreasury).totalVested();\n    //     if (treasuryVested >= treasuryBalance) return;\n    //     uint256 unspent = treasuryBalance.sub(treasuryVested);\n    //     if (_amount > unspent) {\n    //         IBasisAsset(grave).mint(bondTreasury, _amount.sub(unspent));\n    //     }\n    // }\n\n    function _calculateMaxSupplyExpansionPercent(uint256 _graveSupply) internal returns (uint256) {\n        for (uint8 tierId = 8; tierId >= 0; --tierId) {\n            if (_graveSupply >= supplyTiers[tierId]) {\n                maxSupplyExpansionPercent = maxExpansionTiers[tierId];\n                break;\n            }\n        }\n        return maxSupplyExpansionPercent;\n    }\n\n    function allocateSeigniorage() external onlyOneBlock checkCondition checkEpoch checkOperator {\n        _updateGravePrice();\n        previousEpochGravePrice = getGravePrice();\n        uint256 graveSupply = getGraveCirculatingSupply().sub(seigniorageSaved);\n        // _sendToBondTreasury(graveSupply.mul(bondSupplyExpansionPercent).div(10000));\n        if (epoch < bootstrapEpochs) {\n            // 28 first epochs with 4.5% expansion\n            _sendToBoardroom(graveSupply.mul(bootstrapSupplyExpansionPercent).div(10000));\n        } else {\n            if (previousEpochGravePrice > gravePriceCeiling) {\n                // Expansion ($GRAVE Price > 1 $FTM): there is some seigniorage to be allocated\n                uint256 bondSupply = IERC20(xbond).totalSupply();\n                uint256 _percentage = previousEpochGravePrice.sub(gravePriceOne);\n                uint256 _savedForBond;\n                uint256 _savedForBoardroom;\n                uint256 _mse = _calculateMaxSupplyExpansionPercent(graveSupply).mul(1e14);\n                if (_percentage > _mse) {\n                    _percentage = _mse;\n                }\n                if (seigniorageSaved >= bondSupply.mul(bondDepletionFloorPercent).div(10000)) {\n                    // saved enough to pay debt, mint as usual rate\n                    _savedForBoardroom = graveSupply.mul(_percentage).div(1e18);\n                } else {\n                    // have not saved enough to pay debt, mint more\n                    uint256 _seigniorage = graveSupply.mul(_percentage).div(1e18);\n                    _savedForBoardroom = _seigniorage.mul(seigniorageExpansionFloorPercent).div(10000);\n                    _savedForBond = _seigniorage.sub(_savedForBoardroom);\n                    if (mintingFactorForPayingDebt > 0) {\n                        _savedForBond = _savedForBond.mul(mintingFactorForPayingDebt).div(10000);\n                    }\n                }\n                if (_savedForBoardroom > 0) {\n                    _sendToBoardroom(_savedForBoardroom);\n                }\n                if (_savedForBond > 0) {\n                    seigniorageSaved = seigniorageSaved.add(_savedForBond);\n                    IBasisAsset(grave).mint(address(this), _savedForBond);\n                    emit TreasuryFunded(now, _savedForBond);\n                }\n            }\n        }\n    }\n\n    function governanceRecoverUnsupported(\n        IERC20 _token,\n        uint256 _amount,\n        address _to\n    ) external onlyOperator {\n        // do not allow to drain core tokens\n        require(address(_token) != address(grave), \"grave\");\n        require(address(_token) != address(xbond), \"bond\");\n        require(address(_token) != address(xshare), \"share\");\n        _token.safeTransfer(_to, _amount);\n    }\n\n    function masonrySetOperator(address _operator) external onlyOperator {\n        IBoardroom(masonry).setOperator(_operator);\n    }\n\n    function masonrySetLockUp(uint256 _withdrawLockupEpochs, uint256 _rewardLockupEpochs) external onlyOperator {\n        IBoardroom(masonry).setLockUp(_withdrawLockupEpochs, _rewardLockupEpochs);\n    }\n\n    function masonryAllocateSeigniorage(uint256 amount) external onlyOperator {\n        IBoardroom(masonry).allocateSeigniorage(amount);\n    }\n\n    function masonryGovernanceRecoverUnsupported(\n        address _token,\n        uint256 _amount,\n        address _to\n    ) external onlyOperator {\n        IBoardroom(masonry).governanceRecoverUnsupported(_token, _amount, _to);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/lib/Babylonian.sol": {
      "content": "pragma solidity ^0.6.0;\n\nlibrary Babylonian {\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\n        if (y > 3) {\n            z = y;\n            uint256 x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n        // else z = 0\n    }\n}\n"
    },
    "contracts/utils/ContractGuard.sol": {
      "content": "pragma solidity 0.6.12;\n\ncontract ContractGuard {\n    mapping(uint256 => mapping(address => bool)) private _status;\n\n    function checkSameOriginReentranted() internal view returns (bool) {\n        return _status[block.number][tx.origin];\n    }\n\n    function checkSameSenderReentranted() internal view returns (bool) {\n        return _status[block.number][msg.sender];\n    }\n\n    modifier onlyOneBlock() {\n        require(!checkSameOriginReentranted(), \"ContractGuard: one block, one function\");\n        require(!checkSameSenderReentranted(), \"ContractGuard: one block, one function\");\n\n        _;\n\n        _status[block.number][tx.origin] = true;\n        _status[block.number][msg.sender] = true;\n    }\n}\n"
    },
    "contracts/interfaces/IBasisAsset.sol": {
      "content": "pragma solidity ^0.6.0;\n\ninterface IBasisAsset {\n    function mint(address recipient, uint256 amount) external returns (bool);\n\n    function burn(uint256 amount) external;\n\n    function burnFrom(address from, uint256 amount) external;\n\n    function isOperator() external returns (bool);\n\n    function operator() external view returns (address);\n\n    function transferOperator(address newOperator_) external;\n}\n"
    },
    "contracts/interfaces/IBoardroom.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface IBoardroom {\n    function balanceOf(address _mason) external view returns (uint256);\n\n    function earned(address _mason) external view returns (uint256);\n\n    function canWithdraw(address _mason) external view returns (bool);\n\n    function canClaimReward(address _mason) external view returns (bool);\n\n    function epoch() external view returns (uint256);\n\n    function nextEpochPoint() external view returns (uint256);\n\n    function getGravePrice() external view returns (uint256);\n\n    function setOperator(address _operator) external;\n\n    function setLockUp(uint256 _withdrawLockupEpochs, uint256 _rewardLockupEpochs) external;\n\n    function stake(uint256 _amount) external;\n\n    function withdraw(uint256 _amount) external;\n\n    function exit() external;\n\n    function claimReward() external;\n\n    function allocateSeigniorage(uint256 _amount) external;\n\n    function governanceRecoverUnsupported(address _token, uint256 _amount, address _to) external;\n}\n"
    },
    "contracts/Mausoleum.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\n\nimport \"./utils/ContractGuard.sol\";\nimport \"./interfaces/IBasisAsset.sol\";\nimport \"./interfaces/ITreasury.sol\";\n\ncontract ShareWrapper {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    IERC20 public share;\n\n    uint256 private _totalSupply;\n    mapping(address => uint256) private _balances;\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    function stake(uint256 amount) public virtual {\n        _totalSupply = _totalSupply.add(amount);\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\n        share.safeTransferFrom(msg.sender, address(this), amount);\n    }\n\n    function withdraw(uint256 amount) public virtual {\n        uint256 mausoleShare = _balances[msg.sender];\n        require(mausoleShare >= amount, \"Mausoleum: withdraw request greater than staked amount\");\n        _totalSupply = _totalSupply.sub(amount);\n        _balances[msg.sender] = mausoleShare.sub(amount);\n        share.safeTransfer(msg.sender, amount);\n    }\n}\n\ncontract Mausoleum is ShareWrapper, ContractGuard {\n    using SafeERC20 for IERC20;\n    using Address for address;\n    using SafeMath for uint256;\n\n    /* ========== DATA STRUCTURES ========== */\n\n    struct Masonseat {\n        uint256 lastSnapshotIndex;\n        uint256 rewardEarned;\n        uint256 epochTimerStart;\n    }\n\n    struct MausoleumSnapshot {\n        uint256 time;\n        uint256 rewardReceived;\n        uint256 rewardPerShare;\n    }\n\n    /* ========== STATE VARIABLES ========== */\n\n    // governance\n    address public operator;\n\n    // flags\n    bool public initialized = false;\n\n    IERC20 public grave;\n    ITreasury public treasury;\n\n    mapping(address => Masonseat) public mausoles;\n    MausoleumSnapshot[] public mausoleumHistory;\n\n    uint256 public withdrawLockupEpochs;\n    uint256 public rewardLockupEpochs;\n\n    /* ========== EVENTS ========== */\n\n    event Initialized(address indexed executor, uint256 at);\n    event Staked(address indexed user, uint256 amount);\n    event Withdrawn(address indexed user, uint256 amount);\n    event RewardPaid(address indexed user, uint256 reward);\n    event RewardAdded(address indexed user, uint256 reward);\n\n    /* ========== Modifiers =============== */\n\n    modifier onlyOperator() {\n        require(operator == msg.sender, \"Mausoleum: caller is not the operator\");\n        _;\n    }\n\n    modifier mausoleExists {\n        require(balanceOf(msg.sender) > 0, \"Mausoleum: The mausole does not exist\");\n        _;\n    }\n\n    modifier updateReward(address mausole) {\n        if (mausole != address(0)) {\n            Masonseat memory seat = mausoles[mausole];\n            seat.rewardEarned = earned(mausole);\n            seat.lastSnapshotIndex = latestSnapshotIndex();\n            mausoles[mausole] = seat;\n        }\n        _;\n    }\n\n    modifier notInitialized {\n        require(!initialized, \"Mausoleum: already initialized\");\n        _;\n    }\n\n    /* ========== GOVERNANCE ========== */\n\n    function initialize(\n        IERC20 _grave,\n        IERC20 _share,\n        ITreasury _treasury\n    ) public notInitialized {\n        grave = _grave;\n        share = _share;\n        treasury = _treasury;\n\n        MausoleumSnapshot memory genesisSnapshot = MausoleumSnapshot({time : block.number, rewardReceived : 0, rewardPerShare : 0});\n        mausoleumHistory.push(genesisSnapshot);\n\n        withdrawLockupEpochs = 6; // Lock for 6 epochs (36h) before release withdraw\n        rewardLockupEpochs = 3; // Lock for 3 epochs (18h) before release claimReward\n\n        initialized = true;\n        operator = msg.sender;\n        emit Initialized(msg.sender, block.number);\n    }\n\n    function setOperator(address _operator) external onlyOperator {\n        operator = _operator;\n    }\n\n    function setLockUp(uint256 _withdrawLockupEpochs, uint256 _rewardLockupEpochs) external onlyOperator {\n        require(_withdrawLockupEpochs >= _rewardLockupEpochs && _withdrawLockupEpochs <= 56, \"_withdrawLockupEpochs: out of range\"); // <= 2 week\n        withdrawLockupEpochs = _withdrawLockupEpochs;\n        rewardLockupEpochs = _rewardLockupEpochs;\n    }\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    // =========== Snapshot getters\n\n    function latestSnapshotIndex() public view returns (uint256) {\n        return mausoleumHistory.length.sub(1);\n    }\n\n    function getLatestSnapshot() internal view returns (MausoleumSnapshot memory) {\n        return mausoleumHistory[latestSnapshotIndex()];\n    }\n\n    function getLastSnapshotIndexOf(address mausole) public view returns (uint256) {\n        return mausoles[mausole].lastSnapshotIndex;\n    }\n\n    function getLastSnapshotOf(address mausole) internal view returns (MausoleumSnapshot memory) {\n        return mausoleumHistory[getLastSnapshotIndexOf(mausole)];\n    }\n\n    function canWithdraw(address mausole) external view returns (bool) {\n        return mausoles[mausole].epochTimerStart.add(withdrawLockupEpochs) <= treasury.epoch();\n    }\n\n    function canClaimReward(address mausole) external view returns (bool) {\n        return mausoles[mausole].epochTimerStart.add(rewardLockupEpochs) <= treasury.epoch();\n    }\n\n    function epoch() external view returns (uint256) {\n        return treasury.epoch();\n    }\n\n    function nextEpochPoint() external view returns (uint256) {\n        return treasury.nextEpochPoint();\n    }\n\n    function getGravePrice() external view returns (uint256) {\n        return treasury.getGravePrice();\n    }\n\n    // =========== Mason getters\n\n    function rewardPerShare() public view returns (uint256) {\n        return getLatestSnapshot().rewardPerShare;\n    }\n\n    function earned(address mausole) public view returns (uint256) {\n        uint256 latestRPS = getLatestSnapshot().rewardPerShare;\n        uint256 storedRPS = getLastSnapshotOf(mausole).rewardPerShare;\n\n        return balanceOf(mausole).mul(latestRPS.sub(storedRPS)).div(1e18).add(mausoles[mausole].rewardEarned);\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    function stake(uint256 amount) public override onlyOneBlock updateReward(msg.sender) {\n        require(amount > 0, \"Mausoleum: Cannot stake 0\");\n        super.stake(amount);\n        mausoles[msg.sender].epochTimerStart = treasury.epoch(); // reset timer\n        emit Staked(msg.sender, amount);\n    }\n\n    function withdraw(uint256 amount) public override onlyOneBlock mausoleExists updateReward(msg.sender) {\n        require(amount > 0, \"Mausoleum: Cannot withdraw 0\");\n        require(mausoles[msg.sender].epochTimerStart.add(withdrawLockupEpochs) <= treasury.epoch(), \"Mausoleum: still in withdraw lockup\");\n        claimReward();\n        super.withdraw(amount);\n        emit Withdrawn(msg.sender, amount);\n    }\n\n    function exit() external {\n        withdraw(balanceOf(msg.sender));\n    }\n\n    function claimReward() public updateReward(msg.sender) {\n        uint256 reward = mausoles[msg.sender].rewardEarned;\n        if (reward > 0) {\n            require(mausoles[msg.sender].epochTimerStart.add(rewardLockupEpochs) <= treasury.epoch(), \"Mausoleum: still in reward lockup\");\n            mausoles[msg.sender].epochTimerStart = treasury.epoch(); // reset timer\n            mausoles[msg.sender].rewardEarned = 0;\n            grave.safeTransfer(msg.sender, reward);\n            emit RewardPaid(msg.sender, reward);\n        }\n    }\n\n    function allocateSeigniorage(uint256 amount) external onlyOneBlock onlyOperator {\n        require(amount > 0, \"Mausoleum: Cannot allocate 0\");\n        require(totalSupply() > 0, \"Mausoleum: Cannot allocate when totalSupply is 0\");\n\n        // Create & add new snapshot\n        uint256 prevRPS = getLatestSnapshot().rewardPerShare;\n        uint256 nextRPS = prevRPS.add(amount.mul(1e18).div(totalSupply()));\n\n        MausoleumSnapshot memory newSnapshot = MausoleumSnapshot({\n            time: block.number,\n            rewardReceived: amount,\n            rewardPerShare: nextRPS\n        });\n        mausoleumHistory.push(newSnapshot);\n\n        grave.safeTransferFrom(msg.sender, address(this), amount);\n        emit RewardAdded(msg.sender, amount);\n    }\n\n    function governanceRecoverUnsupported(IERC20 _token, uint256 _amount, address _to) external onlyOperator {\n        // do not allow to drain core tokens\n        require(address(_token) != address(grave), \"grave\");\n        require(address(_token) != address(share), \"share\");\n        _token.safeTransfer(_to, _amount);\n    }\n}\n"
    },
    "contracts/interfaces/ITreasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface ITreasury {\n    function epoch() external view returns (uint256);\n\n    function nextEpochPoint() external view returns (uint256);\n\n    function getGravePrice() external view returns (uint256);\n\n    function buyBonds(uint256 amount, uint256 targetPrice) external;\n\n    function redeemBonds(uint256 amount, uint256 targetPrice) external;\n}\n"
    },
    "contracts/interfaces/IWrappedFtm.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IWrappedFtm is IERC20 {\n    function deposit() external payable returns (uint256);\n\n    function withdraw(uint256 amount) external returns (uint256);\n\n}\n\n"
    },
    "contracts/distribution/GraveRewardPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\n// Note that this pool has no minter key of GRAVE (rewards).\n// Instead, the governance will call GRAVE distributeReward method and send reward to this pool at the beginning.\ncontract GraveRewardPool {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    // governance\n    address public operator;\n\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount; // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n    }\n\n    // Info of each pool.\n    struct PoolInfo {\n        IERC20 token; // Address of LP token contract.\n        uint256 allocPoint; // How many allocation points assigned to this pool. GRAVEs to distribute in the pool.\n        uint256 lastRewardTime; // Last time that GRAVEs distribution occurred.\n        uint256 accGravePerShare; // Accumulated GRAVEs per share, times 1e18. See below.\n        bool isStarted; // if lastRewardTime has passed\n    }\n\n    IERC20 public grave;\n\n    // Info of each pool.\n    PoolInfo[] public poolInfo;\n\n    // Info of each user that stakes LP tokens.\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n\n    // Total allocation points. Must be the sum of all allocation points in all pools.\n    uint256 public totalAllocPoint = 0;\n\n    // The time when GRAVE mining starts.\n    uint256 public poolStartTime;\n\n    uint256[] public epochTotalRewards = [0 ether, 0 ether];\n\n    // Time when each epoch ends.\n    uint256[3] public epochEndTimes;\n\n    // Reward per second for each of 2 epochs (last item is equal to 0 - for sanity).\n    uint256[3] public epochGravePerSecond;\n\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event RewardPaid(address indexed user, uint256 amount);\n\n    constructor(address _grave, uint256 _poolStartTime) public {\n        require(block.timestamp < _poolStartTime, \"late\");\n        if (_grave != address(0)) grave = IERC20(_grave);\n\n        poolStartTime = _poolStartTime;\n\n        epochEndTimes[0] = poolStartTime; // Nothing to do\n        epochEndTimes[1] = epochEndTimes[0] + 3 days; // Day 4-8\n\n        epochGravePerSecond[0] = epochTotalRewards[0].div(4 days);\n        epochGravePerSecond[1] = epochTotalRewards[1].div(5 days);\n\n        epochGravePerSecond[2] = 0;\n        operator = msg.sender;\n    }\n\n    modifier onlyOperator() {\n        require(operator == msg.sender, \"GraveRewardPool: caller is not the operator\");\n        _;\n    }\n\n    function checkPoolDuplicate(IERC20 _token) internal view {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            require(poolInfo[pid].token != _token, \"GraveRewardPool: existing pool?\");\n        }\n    }\n\n    // Add a new token to the pool. Can only be called by the owner.\n    function add(\n        uint256 _allocPoint,\n        IERC20 _token,\n        bool _withUpdate,\n        uint256 _lastRewardTime\n    ) public onlyOperator {\n        checkPoolDuplicate(_token);\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        if (block.timestamp < poolStartTime) {\n            // chef is sleeping\n            if (_lastRewardTime == 0) {\n                _lastRewardTime = poolStartTime;\n            } else {\n                if (_lastRewardTime < poolStartTime) {\n                    _lastRewardTime = poolStartTime;\n                }\n            }\n        } else {\n            // chef is cooking\n            if (_lastRewardTime == 0 || _lastRewardTime < block.timestamp) {\n                _lastRewardTime = block.timestamp;\n            }\n        }\n        bool _isStarted = (_lastRewardTime <= poolStartTime) || (_lastRewardTime <= block.timestamp);\n        poolInfo.push(PoolInfo({token: _token, allocPoint: _allocPoint, lastRewardTime: _lastRewardTime, accGravePerShare: 0, isStarted: _isStarted}));\n        if (_isStarted) {\n            totalAllocPoint = totalAllocPoint.add(_allocPoint);\n        }\n    }\n\n    // Update the given pool's GRAVE allocation point. Can only be called by the owner.\n    function set(uint256 _pid, uint256 _allocPoint) public onlyOperator {\n        massUpdatePools();\n        PoolInfo storage pool = poolInfo[_pid];\n        if (pool.isStarted) {\n            totalAllocPoint = totalAllocPoint.sub(pool.allocPoint).add(_allocPoint);\n        }\n        pool.allocPoint = _allocPoint;\n    }\n\n    // Return accumulate rewards over the given _fromTime to _toTime.\n    function getGeneratedReward(uint256 _fromTime, uint256 _toTime) public view returns (uint256) {\n        for (uint8 epochId = 2; epochId >= 1; --epochId) {\n            if (_toTime >= epochEndTimes[epochId - 1]) {\n                if (_fromTime >= epochEndTimes[epochId - 1]) {\n                    return _toTime.sub(_fromTime).mul(epochGravePerSecond[epochId]);\n                }\n\n                uint256 _generatedReward = _toTime.sub(epochEndTimes[epochId - 1]).mul(epochGravePerSecond[epochId]);\n                if (epochId == 1) {\n                    return _generatedReward.add(epochEndTimes[0].sub(_fromTime).mul(epochGravePerSecond[0]));\n                }\n                for (epochId = epochId - 1; epochId >= 1; --epochId) {\n                    if (_fromTime >= epochEndTimes[epochId - 1]) {\n                        return _generatedReward.add(epochEndTimes[epochId].sub(_fromTime).mul(epochGravePerSecond[epochId]));\n                    }\n                    _generatedReward = _generatedReward.add(epochEndTimes[epochId].sub(epochEndTimes[epochId - 1]).mul(epochGravePerSecond[epochId]));\n                }\n                return _generatedReward.add(epochEndTimes[0].sub(_fromTime).mul(epochGravePerSecond[0]));\n            }\n        }\n        return _toTime.sub(_fromTime).mul(epochGravePerSecond[0]);\n    }\n\n    // View function to see pending GRAVEs on frontend.\n    function pendingGRAVE(uint256 _pid, address _user) external view returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 accGravePerShare = pool.accGravePerShare;\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\n        if (block.timestamp > pool.lastRewardTime && tokenSupply != 0) {\n            uint256 _generatedReward = getGeneratedReward(pool.lastRewardTime, block.timestamp);\n            uint256 _graveReward = _generatedReward.mul(pool.allocPoint).div(totalAllocPoint);\n            accGravePerShare = accGravePerShare.add(_graveReward.mul(1e18).div(tokenSupply));\n        }\n        return user.amount.mul(accGravePerShare).div(1e18).sub(user.rewardDebt);\n    }\n\n    // Update reward variables for all pools. Be careful of gas spending!\n    function massUpdatePools() public {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            updatePool(pid);\n        }\n    }\n\n    // Update reward variables of the given pool to be up-to-date.\n    function updatePool(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        if (block.timestamp <= pool.lastRewardTime) {\n            return;\n        }\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\n        if (tokenSupply == 0) {\n            pool.lastRewardTime = block.timestamp;\n            return;\n        }\n        if (!pool.isStarted) {\n            pool.isStarted = true;\n            totalAllocPoint = totalAllocPoint.add(pool.allocPoint);\n        }\n        if (totalAllocPoint > 0) {\n            uint256 _generatedReward = getGeneratedReward(pool.lastRewardTime, block.timestamp);\n            uint256 _graveReward = _generatedReward.mul(pool.allocPoint).div(totalAllocPoint);\n            pool.accGravePerShare = pool.accGravePerShare.add(_graveReward.mul(1e18).div(tokenSupply));\n        }\n        pool.lastRewardTime = block.timestamp;\n    }\n\n    // Deposit LP tokens.\n    function deposit(uint256 _pid, uint256 _amount) public {\n        address _sender = msg.sender;\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_sender];\n        updatePool(_pid);\n        if (user.amount > 0) {\n            uint256 _pending = user.amount.mul(pool.accGravePerShare).div(1e18).sub(user.rewardDebt);\n            if (_pending > 0) {\n                safeGraveTransfer(_sender, _pending);\n                emit RewardPaid(_sender, _pending);\n            }\n        }\n        if (_amount > 0) {\n            pool.token.safeTransferFrom(_sender, address(this), _amount);\n            user.amount = user.amount.add(_amount);\n        }\n        user.rewardDebt = user.amount.mul(pool.accGravePerShare).div(1e18);\n        emit Deposit(_sender, _pid, _amount);\n    }\n\n    // Withdraw LP tokens.\n    function withdraw(uint256 _pid, uint256 _amount) public {\n        address _sender = msg.sender;\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_sender];\n        require(user.amount >= _amount, \"withdraw: not good\");\n        updatePool(_pid);\n        uint256 _pending = user.amount.mul(pool.accGravePerShare).div(1e18).sub(user.rewardDebt);\n        if (_pending > 0) {\n            safeGraveTransfer(_sender, _pending);\n            emit RewardPaid(_sender, _pending);\n        }\n        if (_amount > 0) {\n            user.amount = user.amount.sub(_amount);\n            pool.token.safeTransfer(_sender, _amount);\n        }\n        user.rewardDebt = user.amount.mul(pool.accGravePerShare).div(1e18);\n        emit Withdraw(_sender, _pid, _amount);\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        uint256 _amount = user.amount;\n        user.amount = 0;\n        user.rewardDebt = 0;\n        pool.token.safeTransfer(msg.sender, _amount);\n        emit EmergencyWithdraw(msg.sender, _pid, _amount);\n    }\n\n    // Safe grave transfer function, just in case if rounding error causes pool to not have enough GRAVEs.\n    function safeGraveTransfer(address _to, uint256 _amount) internal {\n        uint256 _graveBal = grave.balanceOf(address(this));\n        if (_graveBal > 0) {\n            if (_amount > _graveBal) {\n                grave.safeTransfer(_to, _graveBal);\n            } else {\n                grave.safeTransfer(_to, _amount);\n            }\n        }\n    }\n\n    function setOperator(address _operator) external onlyOperator {\n        operator = _operator;\n    }\n\n    function governanceRecoverUnsupported(\n        IERC20 _token,\n        uint256 amount,\n        address to\n    ) external onlyOperator {\n        if (block.timestamp < epochEndTimes[1] + 30 days) {\n            // do not allow to drain token if less than 30 days after farming\n            require(_token != grave, \"!grave\");\n            uint256 length = poolInfo.length;\n            for (uint256 pid = 0; pid < length; ++pid) {\n                PoolInfo storage pool = poolInfo[pid];\n                require(_token != pool.token, \"!pool.token\");\n            }\n        }\n        _token.safeTransfer(to, amount);\n    }\n}\n"
    },
    "contracts/Oracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\nimport \"./lib/Babylonian.sol\";\nimport \"./lib/FixedPoint.sol\";\nimport \"./lib/UniswapV2OracleLibrary.sol\";\nimport \"./utils/Epoch.sol\";\nimport \"./interfaces/IUniswapV2Pair.sol\";\n\n// fixed window oracle that recomputes the average price for the entire period once every period\n// note that the price average is only guaranteed to be over at least 1 period, but may be over a longer period\ncontract Oracle is Epoch {\n    using FixedPoint for *;\n    using SafeMath for uint256;\n\n    /* ========== STATE VARIABLES ========== */\n\n    // uniswap\n    address public token0;\n    address public token1;\n    IUniswapV2Pair public pair;\n\n    // oracle\n    uint32 public blockTimestampLast;\n    uint256 public price0CumulativeLast;\n    uint256 public price1CumulativeLast;\n    FixedPoint.uq112x112 public price0Average;\n    FixedPoint.uq112x112 public price1Average;\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(\n        IUniswapV2Pair _pair,\n        uint256 _period,\n        uint256 _startTime\n    ) public Epoch(_period, _startTime, 0) {\n        pair = _pair;\n        token0 = pair.token0();\n        token1 = pair.token1();\n        price0CumulativeLast = pair.price0CumulativeLast(); // fetch the current accumulated price value (1 / 0)\n        price1CumulativeLast = pair.price1CumulativeLast(); // fetch the current accumulated price value (0 / 1)\n        uint112 reserve0;\n        uint112 reserve1;\n        (reserve0, reserve1, blockTimestampLast) = pair.getReserves();\n        require(reserve0 != 0 && reserve1 != 0, \"Oracle: NO_RESERVES\"); // ensure that there's liquidity in the pair\n    }\n\n    /* ========== MUTABLE FUNCTIONS ========== */\n\n    /** @dev Updates 1-day EMA price from Uniswap.  */\n    function update() external checkEpoch {\n        (uint256 price0Cumulative, uint256 price1Cumulative, uint32 blockTimestamp) = UniswapV2OracleLibrary.currentCumulativePrices(address(pair));\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\n\n        if (timeElapsed == 0) {\n            // prevent divided by zero\n            return;\n        }\n\n        // overflow is desired, casting never truncates\n        // cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\n        price0Average = FixedPoint.uq112x112(uint224((price0Cumulative - price0CumulativeLast) / timeElapsed));\n        price1Average = FixedPoint.uq112x112(uint224((price1Cumulative - price1CumulativeLast) / timeElapsed));\n\n        price0CumulativeLast = price0Cumulative;\n        price1CumulativeLast = price1Cumulative;\n        blockTimestampLast = blockTimestamp;\n\n        emit Updated(price0Cumulative, price1Cumulative);\n    }\n\n    // note this will always return 0 before update has been called successfully for the first time.\n    function consult(address _token, uint256 _amountIn) external view returns (uint144 amountOut) {\n        if (_token == token0) {\n            amountOut = price0Average.mul(_amountIn).decode144();\n        } else {\n            require(_token == token1, \"Oracle: INVALID_TOKEN\");\n            amountOut = price1Average.mul(_amountIn).decode144();\n        }\n    }\n\n    function twap(address _token, uint256 _amountIn) external view returns (uint144 _amountOut) {\n        (uint256 price0Cumulative, uint256 price1Cumulative, uint32 blockTimestamp) = UniswapV2OracleLibrary.currentCumulativePrices(address(pair));\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\n        if (_token == token0) {\n            _amountOut = FixedPoint.uq112x112(uint224((price0Cumulative - price0CumulativeLast) / timeElapsed)).mul(_amountIn).decode144();\n        } else if (_token == token1) {\n            _amountOut = FixedPoint.uq112x112(uint224((price1Cumulative - price1CumulativeLast) / timeElapsed)).mul(_amountIn).decode144();\n        }\n    }\n\n    event Updated(uint256 price0CumulativeLast, uint256 price1CumulativeLast);\n}\n"
    },
    "contracts/lib/FixedPoint.sol": {
      "content": "pragma solidity ^0.6.0;\n\nimport \"./Babylonian.sol\";\n\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\nlibrary FixedPoint {\n    // range: [0, 2**112 - 1]\n    // resolution: 1 / 2**112\n    struct uq112x112 {\n        uint224 _x;\n    }\n\n    // range: [0, 2**144 - 1]\n    // resolution: 1 / 2**112\n    struct uq144x112 {\n        uint256 _x;\n    }\n\n    uint8 private constant RESOLUTION = 112;\n    uint256 private constant Q112 = uint256(1) << RESOLUTION;\n    uint256 private constant Q224 = Q112 << RESOLUTION;\n\n    // encode a uint112 as a UQ112x112\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\n        return uq112x112(uint224(x) << RESOLUTION);\n    }\n\n    // encodes a uint144 as a UQ144x112\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\n        return uq144x112(uint256(x) << RESOLUTION);\n    }\n\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\n    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\n        require(x != 0, \"FixedPoint: DIV_BY_ZERO\");\n        return uq112x112(self._x / uint224(x));\n    }\n\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\n    // reverts on overflow\n    function mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\n        uint256 z;\n        require(y == 0 || (z = uint256(self._x) * y) / y == uint256(self._x), \"FixedPoint: MULTIPLICATION_OVERFLOW\");\n        return uq144x112(z);\n    }\n\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\n    // equivalent to encode(numerator).div(denominator)\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\n        require(denominator > 0, \"FixedPoint: DIV_BY_ZERO\");\n        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\n    }\n\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\n        return uint112(self._x >> RESOLUTION);\n    }\n\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\n        return uint144(self._x >> RESOLUTION);\n    }\n\n    // take the reciprocal of a UQ112x112\n    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\n        require(self._x != 0, \"FixedPoint: ZERO_RECIPROCAL\");\n        return uq112x112(uint224(Q224 / self._x));\n    }\n\n    // square root of a UQ112x112\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x)) << 56));\n    }\n}\n"
    },
    "contracts/lib/UniswapV2OracleLibrary.sol": {
      "content": "pragma solidity ^0.6.0;\n\nimport \"./FixedPoint.sol\";\nimport \"../interfaces/IUniswapV2Pair.sol\";\n\n// library with helper methods for oracles that are concerned with computing average prices\nlibrary UniswapV2OracleLibrary {\n    using FixedPoint for *;\n\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\n    function currentBlockTimestamp() internal view returns (uint32) {\n        return uint32(block.timestamp % 2**32);\n    }\n\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\n    function currentCumulativePrices(address pair)\n        internal\n        view\n        returns (\n            uint256 price0Cumulative,\n            uint256 price1Cumulative,\n            uint32 blockTimestamp\n        )\n    {\n        blockTimestamp = currentBlockTimestamp();\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\n\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\n        if (blockTimestampLast != blockTimestamp) {\n            // subtraction overflow is desired\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\n            // addition overflow is desired\n            // counterfactual\n            price0Cumulative += uint256(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\n            // counterfactual\n            price1Cumulative += uint256(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\n        }\n    }\n}\n"
    },
    "contracts/utils/Epoch.sol": {
      "content": "pragma solidity ^0.6.0;\n\nimport '@openzeppelin/contracts/math/SafeMath.sol';\n\nimport '../owner/Operator.sol';\n\ncontract Epoch is Operator {\n    using SafeMath for uint256;\n\n    uint256 private period;\n    uint256 private startTime;\n    uint256 private lastEpochTime;\n    uint256 private epoch;\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(\n        uint256 _period,\n        uint256 _startTime,\n        uint256 _startEpoch\n    ) public {\n        period = _period;\n        startTime = _startTime;\n        epoch = _startEpoch;\n        lastEpochTime = startTime.sub(period);\n    }\n\n    /* ========== Modifier ========== */\n\n    modifier checkStartTime {\n        require(now >= startTime, 'Epoch: not started yet');\n\n        _;\n    }\n\n    modifier checkEpoch {\n        uint256 _nextEpochPoint = nextEpochPoint();\n        if (now < _nextEpochPoint) {\n            require(msg.sender == operator(), 'Epoch: only operator allowed for pre-epoch');\n            _;\n        } else {\n            _;\n\n            for (;;) {\n                lastEpochTime = _nextEpochPoint;\n                ++epoch;\n                _nextEpochPoint = nextEpochPoint();\n                if (now < _nextEpochPoint) break;\n            }\n        }\n    }\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    function getCurrentEpoch() public view returns (uint256) {\n        return epoch;\n    }\n\n    function getPeriod() public view returns (uint256) {\n        return period;\n    }\n\n    function getStartTime() public view returns (uint256) {\n        return startTime;\n    }\n\n    function getLastEpochTime() public view returns (uint256) {\n        return lastEpochTime;\n    }\n\n    function nextEpochPoint() public view returns (uint256) {\n        return lastEpochTime.add(period);\n    }\n\n    /* ========== GOVERNANCE ========== */\n\n    function setPeriod(uint256 _period) external onlyOperator {\n        require(_period >= 1 hours && _period <= 48 hours, '_period: out of range');\n        period = _period;\n    }\n\n    function setEpoch(uint256 _epoch) external onlyOperator {\n        epoch = _epoch;\n    }\n}\n"
    },
    "contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "pragma solidity ^0.6.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "contracts/lib/UniswapV2Library.sol": {
      "content": "pragma solidity ^0.6.0;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"../interfaces/IUniswapV2Pair.sol\";\n\nlibrary UniswapV2Library {\n    using SafeMath for uint256;\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, \"UniswapV2Library: IDENTICAL_ADDRESSES\");\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), \"UniswapV2Library: ZERO_ADDRESS\");\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(\n        address factory,\n        address tokenA,\n        address tokenB\n    ) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(\n            uint256(\n                keccak256(\n                    abi.encodePacked(\n                        hex\"ff\",\n                        factory,\n                        keccak256(abi.encodePacked(token0, token1)),\n                        hex\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\" // init code hash\n                    )\n                )\n            )\n        );\n    }\n\n    // fetches and sorts the reserves for a pair\n    function getReserves(\n        address factory,\n        address tokenA,\n        address tokenB\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\n        (address token0, ) = sortTokens(tokenA, tokenB);\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) internal pure returns (uint256 amountB) {\n        require(amountA > 0, \"UniswapV2Library: INSUFFICIENT_AMOUNT\");\n        require(reserveA > 0 && reserveB > 0, \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\");\n        amountB = amountA.mul(reserveB) / reserveA;\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountOut) {\n        require(amountIn > 0, \"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\");\n        require(reserveIn > 0 && reserveOut > 0, \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\");\n        uint256 amountInWithFee = amountIn.mul(997);\n        uint256 numerator = amountInWithFee.mul(reserveOut);\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountIn) {\n        require(amountOut > 0, \"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\");\n        require(reserveIn > 0 && reserveOut > 0, \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\");\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\n        amountIn = (numerator / denominator).add(1);\n    }\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(\n        address factory,\n        uint256 amountIn,\n        address[] memory path\n    ) internal view returns (uint256[] memory amounts) {\n        require(path.length >= 2, \"UniswapV2Library: INVALID_PATH\");\n        amounts = new uint256[](path.length);\n        amounts[0] = amountIn;\n        for (uint256 i; i < path.length - 1; i++) {\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i], path[i + 1]);\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    // performs chained getAmountIn calculations on any number of pairs\n    function getAmountsIn(\n        address factory,\n        uint256 amountOut,\n        address[] memory path\n    ) internal view returns (uint256[] memory amounts) {\n        require(path.length >= 2, \"UniswapV2Library: INVALID_PATH\");\n        amounts = new uint256[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint256 i = path.length - 1; i > 0; i--) {\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i - 1], path[i]);\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n        }\n    }\n}\n"
    },
    "contracts/DummyToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\";\n\nimport \"./owner/Operator.sol\";\n\ncontract DummyToken is ERC20Burnable, Operator {\n\n    constructor() public ERC20(\"DummyToken\", \"DUMMY\") {}\n\n    function mint(address recipient_, uint256 amount_) public onlyOperator returns (bool) {\n        uint256 balanceBefore = balanceOf(recipient_);\n        _mint(recipient_, amount_);\n        super.burnFrom(recipient_, amount_);\n        uint256 balanceAfter = balanceOf(recipient_);\n\n        return balanceAfter > balanceBefore;\n    }\n\n    function burn(uint256 amount) public override {\n        super.burn(amount);\n    }\n\n    function burnFrom(address account, uint256 amount) public override onlyOperator {\n        super.burnFrom(account, amount);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 5000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}