{
  "address": "0x6c6BAdB56D11856ae59214f25902744f6276a35E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_grave",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_poolStartTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "TOTAL_REWARDS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_lastRewardTime",
          "type": "uint256"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fromTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_toTime",
          "type": "uint256"
        }
      ],
      "name": "getGeneratedReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "governanceRecoverUnsupported",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "grave",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gravePerSecond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingGRAVE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accGravePerShare",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isStarted",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "runningTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3e70438871a38e83e20ac1321715d6439442e617694440f81ec1ee74dc6c7f0e",
  "receipt": {
    "to": null,
    "from": "0xB8be57502Ff91CC20BF172FA2dDeef8de117ed59",
    "contractAddress": "0x6c6BAdB56D11856ae59214f25902744f6276a35E",
    "transactionIndex": 0,
    "gasUsed": "1918110",
    "logsBloom": "0x
    "blockHash": "0x0001eab500000656f5521077eb5e4f048753bb3b95ece4063006e844ecf48708",
    "transactionHash": "0x3e70438871a38e83e20ac1321715d6439442e617694440f81ec1ee74dc6c7f0e",
    "logs": [],
    "blockNumber": 41011739,
    "cumulativeGasUsed": "1918110",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF5ed88D813dF0188e3e5681818d37133027038f2",
    1655902800
  ],
  "numDeployments": 1,
  "solcInputHash": "5cae3e7a750181ffc195328a8ebfc355",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_grave\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolStartTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOTAL_REWARDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_lastRewardTime\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fromTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toTime\",\"type\":\"uint256\"}],\"name\":\"getGeneratedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"governanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"grave\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gravePerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingGRAVE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accGravePerShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStarted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"runningTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/distribution/GraveGenesisRewardPool.sol\":\"GraveGenesisRewardPool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/distribution/GraveGenesisRewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n// Note that this pool has no minter key of GRAVE (rewards).\\n// Instead, the governance will call GRAVE distributeReward method and send reward to this pool at the beginning.\\ncontract GraveGenesisRewardPool {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // governance\\n    address public operator;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 token; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. GRAVE to distribute.\\n        uint256 lastRewardTime; // Last time that GRAVE distribution occurs.\\n        uint256 accGravePerShare; // Accumulated GRAVE per share, times 1e18. See below.\\n        bool isStarted; // if lastRewardBlock has passed\\n    }\\n\\n    IERC20 public grave;\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    // The time when GRAVE mining starts.\\n    uint256 public poolStartTime;\\n\\n    // The time when GRAVE mining ends.\\n    uint256 public poolEndTime;\\n\\n    // MAINNET\\n    uint256 public gravePerSecond = 0.09645 ether; // 25000 GRAVE / (72h * 60min * 60s)\\n    uint256 public runningTime = 3 days; // 1 days\\n    uint256 public constant TOTAL_REWARDS = 25000 ether;\\n    // END MAINNET\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 amount);\\n\\n    constructor(\\n        address _grave,\\n        uint256 _poolStartTime\\n    ) public {\\n        require(block.timestamp < _poolStartTime, \\\"late\\\");\\n        if (_grave != address(0)) grave = IERC20(_grave);\\n        poolStartTime = _poolStartTime;\\n        poolEndTime = poolStartTime + runningTime;\\n        operator = msg.sender;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(operator == msg.sender, \\\"GraveGenesisPool: caller is not the operator\\\");\\n        _;\\n    }\\n\\n    function checkPoolDuplicate(IERC20 _token) internal view {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            require(poolInfo[pid].token != _token, \\\"GraveGenesisPool: existing pool?\\\");\\n        }\\n    }\\n\\n    // Add a new token to the pool. Can only be called by the owner.\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _token,\\n        bool _withUpdate,\\n        uint256 _lastRewardTime\\n    ) public onlyOperator {\\n        checkPoolDuplicate(_token);\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        if (block.timestamp < poolStartTime) {\\n            // chef is sleeping\\n            if (_lastRewardTime == 0) {\\n                _lastRewardTime = poolStartTime;\\n            } else {\\n                if (_lastRewardTime < poolStartTime) {\\n                    _lastRewardTime = poolStartTime;\\n                }\\n            }\\n        } else {\\n            // chef is cooking\\n            if (_lastRewardTime == 0 || _lastRewardTime < block.timestamp) {\\n                _lastRewardTime = block.timestamp;\\n            }\\n        }\\n        bool _isStarted =\\n        (_lastRewardTime <= poolStartTime) ||\\n        (_lastRewardTime <= block.timestamp);\\n        poolInfo.push(PoolInfo({\\n            token : _token,\\n            allocPoint : _allocPoint,\\n            lastRewardTime : _lastRewardTime,\\n            accGravePerShare : 0,\\n            isStarted : _isStarted\\n            }));\\n        if (_isStarted) {\\n            totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        }\\n    }\\n\\n    // Update the given pool's GRAVE allocation point. Can only be called by the owner.\\n    function set(uint256 _pid, uint256 _allocPoint) public onlyOperator {\\n        massUpdatePools();\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (pool.isStarted) {\\n            totalAllocPoint = totalAllocPoint.sub(pool.allocPoint).add(\\n                _allocPoint\\n            );\\n        }\\n        pool.allocPoint = _allocPoint;\\n    }\\n\\n    // Return accumulate rewards over the given _from to _to block.\\n    function getGeneratedReward(uint256 _fromTime, uint256 _toTime) public view returns (uint256) {\\n        if (_fromTime >= _toTime) return 0;\\n        if (_toTime >= poolEndTime) {\\n            if (_fromTime >= poolEndTime) return 0;\\n            if (_fromTime <= poolStartTime) return poolEndTime.sub(poolStartTime).mul(gravePerSecond);\\n            return poolEndTime.sub(_fromTime).mul(gravePerSecond);\\n        } else {\\n            if (_toTime <= poolStartTime) return 0;\\n            if (_fromTime <= poolStartTime) return _toTime.sub(poolStartTime).mul(gravePerSecond);\\n            return _toTime.sub(_fromTime).mul(gravePerSecond);\\n        }\\n    }\\n\\n    // View function to see pending GRAVE on frontend.\\n    function pendingGRAVE(uint256 _pid, address _user) external view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accGravePerShare = pool.accGravePerShare;\\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\\n        if (block.timestamp > pool.lastRewardTime && tokenSupply != 0) {\\n            uint256 _generatedReward = getGeneratedReward(pool.lastRewardTime, block.timestamp);\\n            uint256 _graveReward = _generatedReward.mul(pool.allocPoint).div(totalAllocPoint);\\n            accGravePerShare = accGravePerShare.add(_graveReward.mul(1e18).div(tokenSupply));\\n        }\\n        return user.amount.mul(accGravePerShare).div(1e18).sub(user.rewardDebt);\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.timestamp <= pool.lastRewardTime) {\\n            return;\\n        }\\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\\n        if (tokenSupply == 0) {\\n            pool.lastRewardTime = block.timestamp;\\n            return;\\n        }\\n        if (!pool.isStarted) {\\n            pool.isStarted = true;\\n            totalAllocPoint = totalAllocPoint.add(pool.allocPoint);\\n        }\\n        if (totalAllocPoint > 0) {\\n            uint256 _generatedReward = getGeneratedReward(pool.lastRewardTime, block.timestamp);\\n            uint256 _graveReward = _generatedReward.mul(pool.allocPoint).div(totalAllocPoint);\\n            pool.accGravePerShare = pool.accGravePerShare.add(_graveReward.mul(1e18).div(tokenSupply));\\n        }\\n        pool.lastRewardTime = block.timestamp;\\n    }\\n\\n    // Deposit LP tokens.\\n    function deposit(uint256 _pid, uint256 _amount) public {\\n        address _sender = msg.sender;\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_sender];\\n        updatePool(_pid);\\n        if (user.amount > 0) {\\n            uint256 _pending = user.amount.mul(pool.accGravePerShare).div(1e18).sub(user.rewardDebt);\\n            if (_pending > 0) {\\n                safeGraveTransfer(_sender, _pending);\\n                emit RewardPaid(_sender, _pending);\\n            }\\n        }\\n        if (_amount > 0) {\\n            pool.token.safeTransferFrom(_sender, address(this), _amount);\\n            user.amount = user.amount.add(_amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accGravePerShare).div(1e18);\\n        emit Deposit(_sender, _pid, _amount);\\n    }\\n\\n    // Withdraw LP tokens.\\n    function withdraw(uint256 _pid, uint256 _amount) public {\\n        address _sender = msg.sender;\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_sender];\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\n        updatePool(_pid);\\n        uint256 _pending = user.amount.mul(pool.accGravePerShare).div(1e18).sub(user.rewardDebt);\\n        if (_pending > 0) {\\n            safeGraveTransfer(_sender, _pending);\\n            emit RewardPaid(_sender, _pending);\\n        }\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.token.safeTransfer(_sender, _amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accGravePerShare).div(1e18);\\n        emit Withdraw(_sender, _pid, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        uint256 _amount = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        pool.token.safeTransfer(msg.sender, _amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    // Safe GRAVE transfer function, just in case if rounding error causes pool to not have enough GRAVEs.\\n    function safeGraveTransfer(address _to, uint256 _amount) internal {\\n        uint256 _graveBalance = grave.balanceOf(address(this));\\n        if (_graveBalance > 0) {\\n            if (_amount > _graveBalance) {\\n                grave.safeTransfer(_to, _graveBalance);\\n            } else {\\n                grave.safeTransfer(_to, _amount);\\n            }\\n        }\\n    }\\n\\n    function setOperator(address _operator) external onlyOperator {\\n        operator = _operator;\\n    }\\n\\n    function governanceRecoverUnsupported(IERC20 _token, uint256 amount, address to) external onlyOperator {\\n        if (block.timestamp < poolEndTime + 90 days) {\\n            // do not allow to drain core token (GRAVE or lps) if less than 90 days after pool ends\\n            require(_token != grave, \\\"grave\\\");\\n            uint256 length = poolInfo.length;\\n            for (uint256 pid = 0; pid < length; ++pid) {\\n                PoolInfo storage pool = poolInfo[pid];\\n                require(_token != pool.token, \\\"pool.token\\\");\\n            }\\n        }\\n        _token.safeTransfer(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x9ef10a473bb1f82d9b606f14821b4c93204c65b5aa96c9e20ed8e328d3f264e0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000600455670156a8c3949620006007556203f48060085534801561002857600080fd5b506040516119fd3803806119fd8339818101604052604081101561004b57600080fd5b508051602090910151428111610091576040805162461bcd60e51b815260206004808301919091526024820152636c61746560e01b604482015290519081900360640190fd5b6001600160a01b038216156100bc57600180546001600160a01b0319166001600160a01b0384161790555b60058190556008540160065550600080546001600160a01b03191633179055611913806100ea6000396000f3fe608060405234801561001057600080fd5b50600436106101775760003560e01c8063570ca735116100d8578063943f013d1161008c578063a41cd03411610066578063a41cd034146103c4578063b3ab15fb146103cc578063e2bbb158146103f257610177565b8063943f013d1461035657806396805e541461035e5780639e987a191461039857610177565b8063630b5ba1116100bd578063630b5ba1146103015780636e271dd51461030957806393f1a40b1461031157610177565b8063570ca735146102d55780635f96dc11146102f957610177565b8063441a3e701161012f57806351eb05a61161011457806351eb05a6146102655780635312ea8e1461028257806354575af41461029f57610177565b8063441a3e701461023a578063456ebd021461025d57610177565b806317caf6f11161016057806317caf6f1146101ea5780631ab06ee5146101f2578063231f0c6a1461021757610177565b806309cf60911461017c5780631526fe2714610196575b600080fd5b610184610415565b60408051918252519081900360200190f35b6101b3600480360360208110156101ac57600080fd5b5035610423565b604080516001600160a01b039096168652602086019490945284840192909252606084015215156080830152519081900360a00190f35b61018461046e565b6102156004803603604081101561020857600080fd5b5080359060200135610474565b005b6101846004803603604081101561022d57600080fd5b5080359060200135610522565b6102156004803603604081101561025057600080fd5b50803590602001356105e7565b6101846107af565b6102156004803603602081101561027b57600080fd5b50356107b5565b6102156004803603602081101561029857600080fd5b503561094a565b610215600480360360608110156102b557600080fd5b506001600160a01b038135811691602081013591604090910135166109e6565b6102dd610b58565b604080516001600160a01b039092168252519081900360200190f35b610184610b67565b610215610b6d565b610184610b90565b61033d6004803603604081101561032757600080fd5b50803590602001356001600160a01b0316610b96565b6040805192835260208301919091528051918290030190f35b610184610bba565b6102156004803603608081101561037457600080fd5b508035906001600160a01b0360208201351690604081013515159060600135610bc0565b610184600480360360408110156103ae57600080fd5b50803590602001356001600160a01b0316610df3565b6102dd610f68565b610215600480360360208110156103e257600080fd5b50356001600160a01b0316610f77565b6102156004803603604081101561040857600080fd5b5080359060200135610ffa565b69054b40b1f852bda0000081565b6002818154811061043057fe5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b0390931694509092909160ff1685565b60045481565b6000546001600160a01b031633146104bd5760405162461bcd60e51b815260040180806020018281038252602c8152602001806118b2602c913960400191505060405180910390fd5b6104c5610b6d565b6000600283815481106104d457fe5b60009182526020909120600590910201600481015490915060ff161561051b5761051782610511836001015460045461116a90919063ffffffff16565b906111c7565b6004555b6001015550565b6000818310610533575060006105e1565b600654821061059b57600654831061054d575060006105e1565b60055483116105805761057960075461057360055460065461116a90919063ffffffff16565b90611228565b90506105e1565b6105796007546105738560065461116a90919063ffffffff16565b60055482116105ac575060006105e1565b60055483116105d0576105796007546105736005548561116a90919063ffffffff16565b60075461057990610573848661116a565b92915050565b60003390506000600284815481106105fb57fe5b600091825260208083208784526003825260408085206001600160a01b03881686529092529220805460059092029092019250841115610682576040805162461bcd60e51b815260206004820152601260248201527f77697468647261773a206e6f7420676f6f640000000000000000000000000000604482015290519081900360640190fd5b61068b856107b5565b60006106c882600101546106c2670de0b6b3a76400006106bc8760030154876000015461122890919063ffffffff16565b90611281565b9061116a565b9050801561071a576106da84826112e8565b6040805182815290516001600160a01b038616917fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486919081900360200190a25b841561074457815461072c908661116a565b82558254610744906001600160a01b031685876113b7565b6003830154825461076291670de0b6b3a7640000916106bc91611228565b600183015560408051868152905187916001600160a01b038716917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a3505050505050565b60075481565b6000600282815481106107c457fe5b90600052602060002090600502019050806002015442116107e55750610947565b8054604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561084857600080fd5b505afa15801561085c573d6000803e3d6000fd5b505050506040513d602081101561087257600080fd5b5051905080610888575042600290910155610947565b600482015460ff166108d757600480830180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600190811790915583015490546108d3916111c7565b6004555b6004541561093e5760006108ef836002015442610522565b905060006109106004546106bc86600101548561122890919063ffffffff16565b905061093661092b846106bc84670de0b6b3a7640000611228565b6003860154906111c7565b600385015550505b50426002909101555b50565b60006002828154811061095957fe5b6000918252602080832085845260038252604080852033808752935284208054858255600182019590955560059093020180549094509192916109a9916001600160a01b039190911690836113b7565b604080518281529051859133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959181900360200190a350505050565b6000546001600160a01b03163314610a2f5760405162461bcd60e51b815260040180806020018281038252602c8152602001806118b2602c913960400191505060405180910390fd5b6006546276a70001421015610b3f576001546001600160a01b0384811691161415610aa1576040805162461bcd60e51b815260206004820152600560248201527f6772617665000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60025460005b81811015610b3c57600060028281548110610abe57fe5b6000918252602090912060059091020180549091506001600160a01b0387811691161415610b33576040805162461bcd60e51b815260206004820152600a60248201527f706f6f6c2e746f6b656e00000000000000000000000000000000000000000000604482015290519081900360640190fd5b50600101610aa7565b50505b610b536001600160a01b03841682846113b7565b505050565b6000546001600160a01b031681565b60055481565b60025460005b81811015610b8c57610b84816107b5565b600101610b73565b5050565b60065481565b60036020908152600092835260408084209091529082529020805460019091015482565b60085481565b6000546001600160a01b03163314610c095760405162461bcd60e51b815260040180806020018281038252602c8152602001806118b2602c913960400191505060405180910390fd5b610c1283611437565b8115610c2057610c20610b6d565b600554421015610c4c5780610c385750600554610c47565b600554811015610c4757506005545b610c60565b801580610c5857504281105b15610c605750425b600060055482111580610c735750428211155b6040805160a0810182526001600160a01b03878116825260208201898152928201868152600060608401818152861580156080870190815260028054600181018255945295517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace600590940293840180547fffffffffffffffffffffffff000000000000000000000000000000000000000016919096161790945594517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf82015590517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad082015592517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad184015590517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad290920180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001692151592909217909155909150610dec57600454610de890866111c7565b6004555b5050505050565b60008060028481548110610e0357fe5b60009182526020808320878452600380835260408086206001600160a01b03808b168852908552818720600590960290930191820154825482517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015292519398509596909590949316926370a0823192602480840193829003018186803b158015610e9457600080fd5b505afa158015610ea8573d6000803e3d6000fd5b505050506040513d6020811015610ebe57600080fd5b5051600285015490915042118015610ed557508015155b15610f32576000610eea856002015442610522565b90506000610f0b6004546106bc88600101548561122890919063ffffffff16565b9050610f2d610f26846106bc84670de0b6b3a7640000611228565b85906111c7565b935050505b610f5d83600101546106c2670de0b6b3a76400006106bc86886000015461122890919063ffffffff16565b979650505050505050565b6001546001600160a01b031681565b6000546001600160a01b03163314610fc05760405162461bcd60e51b815260040180806020018281038252602c8152602001806118b2602c913960400191505060405180910390fd5b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600033905060006002848154811061100e57fe5b600091825260208083208784526003825260408085206001600160a01b0388168652909252922060059091029091019150611048856107b5565b8054156110d457600061108082600101546106c2670de0b6b3a76400006106bc8760030154876000015461122890919063ffffffff16565b905080156110d25761109284826112e8565b6040805182815290516001600160a01b038616917fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486919081900360200190a25b505b83156111005781546110f1906001600160a01b03168430876114d1565b80546110fd90856111c7565b81555b6003820154815461111e91670de0b6b3a7640000916106bc91611228565b600182015560408051858152905186916001600160a01b038616917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a35050505050565b6000828211156111c1576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082820183811015611221576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b600082611237575060006105e1565b8282028284828161124457fe5b04146112215760405162461bcd60e51b81526004018080602001828103825260218152602001806118676021913960400191505060405180910390fd5b60008082116112d7576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816112e057fe5b049392505050565b600154604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561134c57600080fd5b505afa158015611360573d6000803e3d6000fd5b505050506040513d602081101561137657600080fd5b505190508015610b5357808211156113a45760015461139f906001600160a01b031684836113b7565b610b53565b600154610b53906001600160a01b031684845b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610b5390849061155f565b60025460005b81811015610b5357826001600160a01b03166002828154811061145c57fe5b60009182526020909120600590910201546001600160a01b031614156114c9576040805162461bcd60e51b815260206004820181905260248201527f477261766547656e65736973506f6f6c3a206578697374696e6720706f6f6c3f604482015290519081900360640190fd5b60010161143d565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905261155990859061155f565b50505050565b60606115b4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166116109092919063ffffffff16565b805190915015610b53578080602001905160208110156115d357600080fd5b5051610b535760405162461bcd60e51b815260040180806020018281038252602a815260200180611888602a913960400191505060405180910390fd5b606061161f8484600085611627565b949350505050565b6060824710156116685760405162461bcd60e51b81526004018080602001828103825260268152602001806118416026913960400191505060405180910390fd5b61167185611796565b6116c2576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061171f57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016116e2565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611781576040519150601f19603f3d011682016040523d82523d6000602084013e611786565b606091505b5091509150610f5d82828661179c565b3b151590565b606083156117ab575081611221565b8251156117bb5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156118055781810151838201526020016117ed565b50505050905090810190601f1680156118325780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564477261766547656e65736973506f6f6c3a2063616c6c6572206973206e6f7420746865206f70657261746f72a2646970667358221220df8158aa35f3f5739eff83041af8604a339d1e553c716ebf4d0adafaa30d243264736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101775760003560e01c8063570ca735116100d8578063943f013d1161008c578063a41cd03411610066578063a41cd034146103c4578063b3ab15fb146103cc578063e2bbb158146103f257610177565b8063943f013d1461035657806396805e541461035e5780639e987a191461039857610177565b8063630b5ba1116100bd578063630b5ba1146103015780636e271dd51461030957806393f1a40b1461031157610177565b8063570ca735146102d55780635f96dc11146102f957610177565b8063441a3e701161012f57806351eb05a61161011457806351eb05a6146102655780635312ea8e1461028257806354575af41461029f57610177565b8063441a3e701461023a578063456ebd021461025d57610177565b806317caf6f11161016057806317caf6f1146101ea5780631ab06ee5146101f2578063231f0c6a1461021757610177565b806309cf60911461017c5780631526fe2714610196575b600080fd5b610184610415565b60408051918252519081900360200190f35b6101b3600480360360208110156101ac57600080fd5b5035610423565b604080516001600160a01b039096168652602086019490945284840192909252606084015215156080830152519081900360a00190f35b61018461046e565b6102156004803603604081101561020857600080fd5b5080359060200135610474565b005b6101846004803603604081101561022d57600080fd5b5080359060200135610522565b6102156004803603604081101561025057600080fd5b50803590602001356105e7565b6101846107af565b6102156004803603602081101561027b57600080fd5b50356107b5565b6102156004803603602081101561029857600080fd5b503561094a565b610215600480360360608110156102b557600080fd5b506001600160a01b038135811691602081013591604090910135166109e6565b6102dd610b58565b604080516001600160a01b039092168252519081900360200190f35b610184610b67565b610215610b6d565b610184610b90565b61033d6004803603604081101561032757600080fd5b50803590602001356001600160a01b0316610b96565b6040805192835260208301919091528051918290030190f35b610184610bba565b6102156004803603608081101561037457600080fd5b508035906001600160a01b0360208201351690604081013515159060600135610bc0565b610184600480360360408110156103ae57600080fd5b50803590602001356001600160a01b0316610df3565b6102dd610f68565b610215600480360360208110156103e257600080fd5b50356001600160a01b0316610f77565b6102156004803603604081101561040857600080fd5b5080359060200135610ffa565b69054b40b1f852bda0000081565b6002818154811061043057fe5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b0390931694509092909160ff1685565b60045481565b6000546001600160a01b031633146104bd5760405162461bcd60e51b815260040180806020018281038252602c8152602001806118b2602c913960400191505060405180910390fd5b6104c5610b6d565b6000600283815481106104d457fe5b60009182526020909120600590910201600481015490915060ff161561051b5761051782610511836001015460045461116a90919063ffffffff16565b906111c7565b6004555b6001015550565b6000818310610533575060006105e1565b600654821061059b57600654831061054d575060006105e1565b60055483116105805761057960075461057360055460065461116a90919063ffffffff16565b90611228565b90506105e1565b6105796007546105738560065461116a90919063ffffffff16565b60055482116105ac575060006105e1565b60055483116105d0576105796007546105736005548561116a90919063ffffffff16565b60075461057990610573848661116a565b92915050565b60003390506000600284815481106105fb57fe5b600091825260208083208784526003825260408085206001600160a01b03881686529092529220805460059092029092019250841115610682576040805162461bcd60e51b815260206004820152601260248201527f77697468647261773a206e6f7420676f6f640000000000000000000000000000604482015290519081900360640190fd5b61068b856107b5565b60006106c882600101546106c2670de0b6b3a76400006106bc8760030154876000015461122890919063ffffffff16565b90611281565b9061116a565b9050801561071a576106da84826112e8565b6040805182815290516001600160a01b038616917fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486919081900360200190a25b841561074457815461072c908661116a565b82558254610744906001600160a01b031685876113b7565b6003830154825461076291670de0b6b3a7640000916106bc91611228565b600183015560408051868152905187916001600160a01b038716917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a3505050505050565b60075481565b6000600282815481106107c457fe5b90600052602060002090600502019050806002015442116107e55750610947565b8054604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561084857600080fd5b505afa15801561085c573d6000803e3d6000fd5b505050506040513d602081101561087257600080fd5b5051905080610888575042600290910155610947565b600482015460ff166108d757600480830180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600190811790915583015490546108d3916111c7565b6004555b6004541561093e5760006108ef836002015442610522565b905060006109106004546106bc86600101548561122890919063ffffffff16565b905061093661092b846106bc84670de0b6b3a7640000611228565b6003860154906111c7565b600385015550505b50426002909101555b50565b60006002828154811061095957fe5b6000918252602080832085845260038252604080852033808752935284208054858255600182019590955560059093020180549094509192916109a9916001600160a01b039190911690836113b7565b604080518281529051859133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959181900360200190a350505050565b6000546001600160a01b03163314610a2f5760405162461bcd60e51b815260040180806020018281038252602c8152602001806118b2602c913960400191505060405180910390fd5b6006546276a70001421015610b3f576001546001600160a01b0384811691161415610aa1576040805162461bcd60e51b815260206004820152600560248201527f6772617665000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60025460005b81811015610b3c57600060028281548110610abe57fe5b6000918252602090912060059091020180549091506001600160a01b0387811691161415610b33576040805162461bcd60e51b815260206004820152600a60248201527f706f6f6c2e746f6b656e00000000000000000000000000000000000000000000604482015290519081900360640190fd5b50600101610aa7565b50505b610b536001600160a01b03841682846113b7565b505050565b6000546001600160a01b031681565b60055481565b60025460005b81811015610b8c57610b84816107b5565b600101610b73565b5050565b60065481565b60036020908152600092835260408084209091529082529020805460019091015482565b60085481565b6000546001600160a01b03163314610c095760405162461bcd60e51b815260040180806020018281038252602c8152602001806118b2602c913960400191505060405180910390fd5b610c1283611437565b8115610c2057610c20610b6d565b600554421015610c4c5780610c385750600554610c47565b600554811015610c4757506005545b610c60565b801580610c5857504281105b15610c605750425b600060055482111580610c735750428211155b6040805160a0810182526001600160a01b03878116825260208201898152928201868152600060608401818152861580156080870190815260028054600181018255945295517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace600590940293840180547fffffffffffffffffffffffff000000000000000000000000000000000000000016919096161790945594517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf82015590517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad082015592517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad184015590517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad290920180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001692151592909217909155909150610dec57600454610de890866111c7565b6004555b5050505050565b60008060028481548110610e0357fe5b60009182526020808320878452600380835260408086206001600160a01b03808b168852908552818720600590960290930191820154825482517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015292519398509596909590949316926370a0823192602480840193829003018186803b158015610e9457600080fd5b505afa158015610ea8573d6000803e3d6000fd5b505050506040513d6020811015610ebe57600080fd5b5051600285015490915042118015610ed557508015155b15610f32576000610eea856002015442610522565b90506000610f0b6004546106bc88600101548561122890919063ffffffff16565b9050610f2d610f26846106bc84670de0b6b3a7640000611228565b85906111c7565b935050505b610f5d83600101546106c2670de0b6b3a76400006106bc86886000015461122890919063ffffffff16565b979650505050505050565b6001546001600160a01b031681565b6000546001600160a01b03163314610fc05760405162461bcd60e51b815260040180806020018281038252602c8152602001806118b2602c913960400191505060405180910390fd5b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600033905060006002848154811061100e57fe5b600091825260208083208784526003825260408085206001600160a01b0388168652909252922060059091029091019150611048856107b5565b8054156110d457600061108082600101546106c2670de0b6b3a76400006106bc8760030154876000015461122890919063ffffffff16565b905080156110d25761109284826112e8565b6040805182815290516001600160a01b038616917fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486919081900360200190a25b505b83156111005781546110f1906001600160a01b03168430876114d1565b80546110fd90856111c7565b81555b6003820154815461111e91670de0b6b3a7640000916106bc91611228565b600182015560408051858152905186916001600160a01b038616917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a35050505050565b6000828211156111c1576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082820183811015611221576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b600082611237575060006105e1565b8282028284828161124457fe5b04146112215760405162461bcd60e51b81526004018080602001828103825260218152602001806118676021913960400191505060405180910390fd5b60008082116112d7576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816112e057fe5b049392505050565b600154604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561134c57600080fd5b505afa158015611360573d6000803e3d6000fd5b505050506040513d602081101561137657600080fd5b505190508015610b5357808211156113a45760015461139f906001600160a01b031684836113b7565b610b53565b600154610b53906001600160a01b031684845b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610b5390849061155f565b60025460005b81811015610b5357826001600160a01b03166002828154811061145c57fe5b60009182526020909120600590910201546001600160a01b031614156114c9576040805162461bcd60e51b815260206004820181905260248201527f477261766547656e65736973506f6f6c3a206578697374696e6720706f6f6c3f604482015290519081900360640190fd5b60010161143d565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905261155990859061155f565b50505050565b60606115b4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166116109092919063ffffffff16565b805190915015610b53578080602001905160208110156115d357600080fd5b5051610b535760405162461bcd60e51b815260040180806020018281038252602a815260200180611888602a913960400191505060405180910390fd5b606061161f8484600085611627565b949350505050565b6060824710156116685760405162461bcd60e51b81526004018080602001828103825260268152602001806118416026913960400191505060405180910390fd5b61167185611796565b6116c2576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061171f57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016116e2565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611781576040519150601f19603f3d011682016040523d82523d6000602084013e611786565b606091505b5091509150610f5d82828661179c565b3b151590565b606083156117ab575081611221565b8251156117bb5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156118055781810151838201526020016117ed565b50505050905090810190601f1680156118325780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564477261766547656e65736973506f6f6c3a2063616c6c6572206973206e6f7420746865206f70657261746f72a2646970667358221220df8158aa35f3f5739eff83041af8604a339d1e553c716ebf4d0adafaa30d243264736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6531,
        "contract": "contracts/distribution/GraveGenesisRewardPool.sol:GraveGenesisRewardPool",
        "label": "operator",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6549,
        "contract": "contracts/distribution/GraveGenesisRewardPool.sol:GraveGenesisRewardPool",
        "label": "grave",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)1180"
      },
      {
        "astId": 6552,
        "contract": "contracts/distribution/GraveGenesisRewardPool.sol:GraveGenesisRewardPool",
        "label": "poolInfo",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(PoolInfo)6547_storage)dyn_storage"
      },
      {
        "astId": 6558,
        "contract": "contracts/distribution/GraveGenesisRewardPool.sol:GraveGenesisRewardPool",
        "label": "userInfo",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)6536_storage))"
      },
      {
        "astId": 6561,
        "contract": "contracts/distribution/GraveGenesisRewardPool.sol:GraveGenesisRewardPool",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 6563,
        "contract": "contracts/distribution/GraveGenesisRewardPool.sol:GraveGenesisRewardPool",
        "label": "poolStartTime",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 6565,
        "contract": "contracts/distribution/GraveGenesisRewardPool.sol:GraveGenesisRewardPool",
        "label": "poolEndTime",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 6568,
        "contract": "contracts/distribution/GraveGenesisRewardPool.sol:GraveGenesisRewardPool",
        "label": "gravePerSecond",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 6571,
        "contract": "contracts/distribution/GraveGenesisRewardPool.sol:GraveGenesisRewardPool",
        "label": "runningTime",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)6547_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)6547_storage",
        "encoding": "dynamic_array",
        "label": "struct GraveGenesisRewardPool.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1180": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)6536_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct GraveGenesisRewardPool.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)6536_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)6536_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct GraveGenesisRewardPool.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)6536_storage)"
      },
      "t_struct(PoolInfo)6547_storage": {
        "encoding": "inplace",
        "label": "struct GraveGenesisRewardPool.PoolInfo",
        "members": [
          {
            "astId": 6538,
            "contract": "contracts/distribution/GraveGenesisRewardPool.sol:GraveGenesisRewardPool",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)1180"
          },
          {
            "astId": 6540,
            "contract": "contracts/distribution/GraveGenesisRewardPool.sol:GraveGenesisRewardPool",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6542,
            "contract": "contracts/distribution/GraveGenesisRewardPool.sol:GraveGenesisRewardPool",
            "label": "lastRewardTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6544,
            "contract": "contracts/distribution/GraveGenesisRewardPool.sol:GraveGenesisRewardPool",
            "label": "accGravePerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6546,
            "contract": "contracts/distribution/GraveGenesisRewardPool.sol:GraveGenesisRewardPool",
            "label": "isStarted",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(UserInfo)6536_storage": {
        "encoding": "inplace",
        "label": "struct GraveGenesisRewardPool.UserInfo",
        "members": [
          {
            "astId": 6533,
            "contract": "contracts/distribution/GraveGenesisRewardPool.sol:GraveGenesisRewardPool",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6535,
            "contract": "contracts/distribution/GraveGenesisRewardPool.sol:GraveGenesisRewardPool",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}