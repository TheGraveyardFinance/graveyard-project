/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TreasuryInterface extends ethers.utils.Interface {
  functions: {
    "PERIOD()": FunctionFragment;
    "allocateSeigniorage()": FunctionFragment;
    "boardroom()": FunctionFragment;
    "boardroomAllocateSeigniorage(uint256)": FunctionFragment;
    "boardroomGovernanceRecoverUnsupported(address,uint256,address)": FunctionFragment;
    "boardroomSetLockUp(uint256,uint256)": FunctionFragment;
    "boardroomSetOperator(address)": FunctionFragment;
    "bondDepletionFloorPercent()": FunctionFragment;
    "bondSupplyExpansionPercent()": FunctionFragment;
    "bootstrapEpochs()": FunctionFragment;
    "bootstrapSupplyExpansionPercent()": FunctionFragment;
    "buyBonds(uint256,uint256)": FunctionFragment;
    "daoFund()": FunctionFragment;
    "daoFundSharedPercent()": FunctionFragment;
    "devFund()": FunctionFragment;
    "devFundSharedPercent()": FunctionFragment;
    "discountPercent()": FunctionFragment;
    "epoch()": FunctionFragment;
    "epochSupplyContractionLeft()": FunctionFragment;
    "excludedFromTotalSupply(uint256)": FunctionFragment;
    "getBondDiscountRate()": FunctionFragment;
    "getBondPremiumRate()": FunctionFragment;
    "getBurnableLibraLeft()": FunctionFragment;
    "getLibraCirculatingSupply()": FunctionFragment;
    "getLibraPrice()": FunctionFragment;
    "getLibraUpdatedPrice()": FunctionFragment;
    "getRedeemableBonds()": FunctionFragment;
    "getReserve()": FunctionFragment;
    "governanceRecoverUnsupported(address,uint256,address)": FunctionFragment;
    "initialize(address,address,address,address,address,address,uint256)": FunctionFragment;
    "initialized()": FunctionFragment;
    "insuranceFund()": FunctionFragment;
    "insuranceFundSharedPercent()": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "lbond()": FunctionFragment;
    "libra()": FunctionFragment;
    "libraOracle()": FunctionFragment;
    "libraPriceCeiling()": FunctionFragment;
    "libraPriceOne()": FunctionFragment;
    "lshare()": FunctionFragment;
    "maxDebtRatioPercent()": FunctionFragment;
    "maxDiscountRate()": FunctionFragment;
    "maxExpansionTiers(uint256)": FunctionFragment;
    "maxPremiumRate()": FunctionFragment;
    "maxSupplyContractionPercent()": FunctionFragment;
    "maxSupplyExpansionPercent()": FunctionFragment;
    "mintingFactorForPayingDebt()": FunctionFragment;
    "nextEpochPoint()": FunctionFragment;
    "operator()": FunctionFragment;
    "premiumPercent()": FunctionFragment;
    "premiumThreshold()": FunctionFragment;
    "previousEpochLibraPrice()": FunctionFragment;
    "redeemBonds(uint256,uint256)": FunctionFragment;
    "seigniorageExpansionFloorPercent()": FunctionFragment;
    "seigniorageSaved()": FunctionFragment;
    "setBoardroom(address)": FunctionFragment;
    "setBondDepletionFloorPercent(uint256)": FunctionFragment;
    "setBondSupplyExpansionPercent(uint256)": FunctionFragment;
    "setBootstrap(uint256,uint256)": FunctionFragment;
    "setDiscountPercent(uint256)": FunctionFragment;
    "setExtraFunds(address,uint256,address,uint256,address,uint256)": FunctionFragment;
    "setLibraOracle(address)": FunctionFragment;
    "setLibraPriceCeiling(uint256)": FunctionFragment;
    "setMaxDebtRatioPercent(uint256)": FunctionFragment;
    "setMaxDiscountRate(uint256)": FunctionFragment;
    "setMaxExpansionTiersEntry(uint8,uint256)": FunctionFragment;
    "setMaxPremiumRate(uint256)": FunctionFragment;
    "setMaxSupplyContractionPercent(uint256)": FunctionFragment;
    "setMaxSupplyExpansionPercents(uint256)": FunctionFragment;
    "setMintingFactorForPayingDebt(uint256)": FunctionFragment;
    "setOperator(address)": FunctionFragment;
    "setPremiumPercent(uint256)": FunctionFragment;
    "setPremiumThreshold(uint256)": FunctionFragment;
    "setSupplyTiersEntry(uint8,uint256)": FunctionFragment;
    "startTime()": FunctionFragment;
    "supplyTiers(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "PERIOD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allocateSeigniorage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "boardroom", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "boardroomAllocateSeigniorage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "boardroomGovernanceRecoverUnsupported",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "boardroomSetLockUp",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "boardroomSetOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "bondDepletionFloorPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bondSupplyExpansionPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bootstrapEpochs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bootstrapSupplyExpansionPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyBonds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "daoFund", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "daoFundSharedPercent",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "devFund", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "devFundSharedPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "discountPercent",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "epoch", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "epochSupplyContractionLeft",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludedFromTotalSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBondDiscountRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBondPremiumRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBurnableLibraLeft",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLibraCirculatingSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLibraPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLibraUpdatedPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRedeemableBonds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReserve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceRecoverUnsupported",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "insuranceFund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "insuranceFundSharedPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lbond", values?: undefined): string;
  encodeFunctionData(functionFragment: "libra", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "libraOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "libraPriceCeiling",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "libraPriceOne",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lshare", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxDebtRatioPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxDiscountRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxExpansionTiers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxPremiumRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxSupplyContractionPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxSupplyExpansionPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintingFactorForPayingDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextEpochPoint",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "operator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "premiumPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "premiumThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "previousEpochLibraPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemBonds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "seigniorageExpansionFloorPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seigniorageSaved",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBoardroom",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBondDepletionFloorPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBondSupplyExpansionPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBootstrap",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDiscountPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExtraFunds",
    values: [string, BigNumberish, string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLibraOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLibraPriceCeiling",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDebtRatioPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDiscountRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxExpansionTiersEntry",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPremiumRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxSupplyContractionPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxSupplyExpansionPercents",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintingFactorForPayingDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setOperator", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPremiumPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPremiumThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupplyTiersEntry",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supplyTiers",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "PERIOD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allocateSeigniorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "boardroom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "boardroomAllocateSeigniorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "boardroomGovernanceRecoverUnsupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "boardroomSetLockUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "boardroomSetOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondDepletionFloorPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondSupplyExpansionPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bootstrapEpochs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bootstrapSupplyExpansionPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyBonds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "daoFund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "daoFundSharedPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "devFund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "devFundSharedPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "discountPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epoch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "epochSupplyContractionLeft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludedFromTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBondDiscountRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBondPremiumRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBurnableLibraLeft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLibraCirculatingSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLibraPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLibraUpdatedPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedeemableBonds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReserve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "governanceRecoverUnsupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insuranceFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insuranceFundSharedPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lbond", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "libra", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "libraOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "libraPriceCeiling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "libraPriceOne",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lshare", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxDebtRatioPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxDiscountRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxExpansionTiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPremiumRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxSupplyContractionPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxSupplyExpansionPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintingFactorForPayingDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextEpochPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "operator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "premiumPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "premiumThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previousEpochLibraPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemBonds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seigniorageExpansionFloorPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seigniorageSaved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBoardroom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBondDepletionFloorPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBondSupplyExpansionPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBootstrap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDiscountPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExtraFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLibraOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLibraPriceCeiling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxDebtRatioPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxDiscountRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxExpansionTiersEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPremiumRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSupplyContractionPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSupplyExpansionPercents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintingFactorForPayingDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPremiumPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPremiumThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupplyTiersEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supplyTiers",
    data: BytesLike
  ): Result;

  events: {
    "BoardroomFunded(uint256,uint256)": EventFragment;
    "BoughtBonds(address,uint256,uint256)": EventFragment;
    "BurnedBonds(address,uint256)": EventFragment;
    "DaoFundFunded(uint256,uint256)": EventFragment;
    "DevFundFunded(uint256,uint256)": EventFragment;
    "Initialized(address,uint256)": EventFragment;
    "InsuranceFundFunded(uint256,uint256)": EventFragment;
    "RedeemedBonds(address,uint256,uint256)": EventFragment;
    "TreasuryFunded(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BoardroomFunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BoughtBonds"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BurnedBonds"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DaoFundFunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DevFundFunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InsuranceFundFunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemedBonds"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryFunded"): EventFragment;
}

export type BoardroomFundedEvent = TypedEvent<
  [BigNumber, BigNumber] & { timestamp: BigNumber; seigniorage: BigNumber }
>;

export type BoughtBondsEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    from: string;
    libraAmount: BigNumber;
    bondAmount: BigNumber;
  }
>;

export type BurnedBondsEvent = TypedEvent<
  [string, BigNumber] & { from: string; bondAmount: BigNumber }
>;

export type DaoFundFundedEvent = TypedEvent<
  [BigNumber, BigNumber] & { timestamp: BigNumber; seigniorage: BigNumber }
>;

export type DevFundFundedEvent = TypedEvent<
  [BigNumber, BigNumber] & { timestamp: BigNumber; seigniorage: BigNumber }
>;

export type InitializedEvent = TypedEvent<
  [string, BigNumber] & { executor: string; at: BigNumber }
>;

export type InsuranceFundFundedEvent = TypedEvent<
  [BigNumber, BigNumber] & { timestamp: BigNumber; seigniorage: BigNumber }
>;

export type RedeemedBondsEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    from: string;
    libraAmount: BigNumber;
    bondAmount: BigNumber;
  }
>;

export type TreasuryFundedEvent = TypedEvent<
  [BigNumber, BigNumber] & { timestamp: BigNumber; seigniorage: BigNumber }
>;

export class Treasury extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TreasuryInterface;

  functions: {
    PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    allocateSeigniorage(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    boardroom(overrides?: CallOverrides): Promise<[string]>;

    boardroomAllocateSeigniorage(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    boardroomGovernanceRecoverUnsupported(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    boardroomSetLockUp(
      _withdrawLockupEpochs: BigNumberish,
      _rewardLockupEpochs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    boardroomSetOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bondDepletionFloorPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    bondSupplyExpansionPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    bootstrapEpochs(overrides?: CallOverrides): Promise<[BigNumber]>;

    bootstrapSupplyExpansionPercent(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    buyBonds(
      _libraAmount: BigNumberish,
      targetPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    daoFund(overrides?: CallOverrides): Promise<[string]>;

    daoFundSharedPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    devFund(overrides?: CallOverrides): Promise<[string]>;

    devFundSharedPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    discountPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    epoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    epochSupplyContractionLeft(overrides?: CallOverrides): Promise<[BigNumber]>;

    excludedFromTotalSupply(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getBondDiscountRate(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _rate: BigNumber }>;

    getBondPremiumRate(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _rate: BigNumber }>;

    getBurnableLibraLeft(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _burnableLibraLeft: BigNumber }>;

    getLibraCirculatingSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLibraPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { libraPrice: BigNumber }>;

    getLibraUpdatedPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _libraPrice: BigNumber }>;

    getRedeemableBonds(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _redeemableBonds: BigNumber }>;

    getReserve(overrides?: CallOverrides): Promise<[BigNumber]>;

    governanceRecoverUnsupported(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _libra: string,
      _lbond: string,
      _lshare: string,
      _libraOracle: string,
      _boardroom: string,
      _genesisPool: string,
      _startTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    insuranceFund(overrides?: CallOverrides): Promise<[string]>;

    insuranceFundSharedPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    lbond(overrides?: CallOverrides): Promise<[string]>;

    libra(overrides?: CallOverrides): Promise<[string]>;

    libraOracle(overrides?: CallOverrides): Promise<[string]>;

    libraPriceCeiling(overrides?: CallOverrides): Promise<[BigNumber]>;

    libraPriceOne(overrides?: CallOverrides): Promise<[BigNumber]>;

    lshare(overrides?: CallOverrides): Promise<[string]>;

    maxDebtRatioPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxDiscountRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxExpansionTiers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxPremiumRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxSupplyContractionPercent(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxSupplyExpansionPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintingFactorForPayingDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextEpochPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    operator(overrides?: CallOverrides): Promise<[string]>;

    premiumPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    premiumThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    previousEpochLibraPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    redeemBonds(
      _bondAmount: BigNumberish,
      targetPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    seigniorageExpansionFloorPercent(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    seigniorageSaved(overrides?: CallOverrides): Promise<[BigNumber]>;

    setBoardroom(
      _boardroom: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBondDepletionFloorPercent(
      _bondDepletionFloorPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBondSupplyExpansionPercent(
      _bondSupplyExpansionPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBootstrap(
      _bootstrapEpochs: BigNumberish,
      _bootstrapSupplyExpansionPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDiscountPercent(
      _discountPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExtraFunds(
      _daoFund: string,
      _daoFundSharedPercent: BigNumberish,
      _devFund: string,
      _devFundSharedPercent: BigNumberish,
      _insuranceFund: string,
      _insuranceFundSharedPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLibraOracle(
      _libraOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLibraPriceCeiling(
      _libraPriceCeiling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxDebtRatioPercent(
      _maxDebtRatioPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxDiscountRate(
      _maxDiscountRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxExpansionTiersEntry(
      _index: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxPremiumRate(
      _maxPremiumRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxSupplyContractionPercent(
      _maxSupplyContractionPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxSupplyExpansionPercents(
      _maxSupplyExpansionPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMintingFactorForPayingDebt(
      _mintingFactorForPayingDebt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPremiumPercent(
      _premiumPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPremiumThreshold(
      _premiumThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSupplyTiersEntry(
      _index: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    supplyTiers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  allocateSeigniorage(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  boardroom(overrides?: CallOverrides): Promise<string>;

  boardroomAllocateSeigniorage(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  boardroomGovernanceRecoverUnsupported(
    _token: string,
    _amount: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  boardroomSetLockUp(
    _withdrawLockupEpochs: BigNumberish,
    _rewardLockupEpochs: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  boardroomSetOperator(
    _operator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bondDepletionFloorPercent(overrides?: CallOverrides): Promise<BigNumber>;

  bondSupplyExpansionPercent(overrides?: CallOverrides): Promise<BigNumber>;

  bootstrapEpochs(overrides?: CallOverrides): Promise<BigNumber>;

  bootstrapSupplyExpansionPercent(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buyBonds(
    _libraAmount: BigNumberish,
    targetPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  daoFund(overrides?: CallOverrides): Promise<string>;

  daoFundSharedPercent(overrides?: CallOverrides): Promise<BigNumber>;

  devFund(overrides?: CallOverrides): Promise<string>;

  devFundSharedPercent(overrides?: CallOverrides): Promise<BigNumber>;

  discountPercent(overrides?: CallOverrides): Promise<BigNumber>;

  epoch(overrides?: CallOverrides): Promise<BigNumber>;

  epochSupplyContractionLeft(overrides?: CallOverrides): Promise<BigNumber>;

  excludedFromTotalSupply(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getBondDiscountRate(overrides?: CallOverrides): Promise<BigNumber>;

  getBondPremiumRate(overrides?: CallOverrides): Promise<BigNumber>;

  getBurnableLibraLeft(overrides?: CallOverrides): Promise<BigNumber>;

  getLibraCirculatingSupply(overrides?: CallOverrides): Promise<BigNumber>;

  getLibraPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getLibraUpdatedPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getRedeemableBonds(overrides?: CallOverrides): Promise<BigNumber>;

  getReserve(overrides?: CallOverrides): Promise<BigNumber>;

  governanceRecoverUnsupported(
    _token: string,
    _amount: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _libra: string,
    _lbond: string,
    _lshare: string,
    _libraOracle: string,
    _boardroom: string,
    _genesisPool: string,
    _startTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  insuranceFund(overrides?: CallOverrides): Promise<string>;

  insuranceFundSharedPercent(overrides?: CallOverrides): Promise<BigNumber>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  lbond(overrides?: CallOverrides): Promise<string>;

  libra(overrides?: CallOverrides): Promise<string>;

  libraOracle(overrides?: CallOverrides): Promise<string>;

  libraPriceCeiling(overrides?: CallOverrides): Promise<BigNumber>;

  libraPriceOne(overrides?: CallOverrides): Promise<BigNumber>;

  lshare(overrides?: CallOverrides): Promise<string>;

  maxDebtRatioPercent(overrides?: CallOverrides): Promise<BigNumber>;

  maxDiscountRate(overrides?: CallOverrides): Promise<BigNumber>;

  maxExpansionTiers(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxPremiumRate(overrides?: CallOverrides): Promise<BigNumber>;

  maxSupplyContractionPercent(overrides?: CallOverrides): Promise<BigNumber>;

  maxSupplyExpansionPercent(overrides?: CallOverrides): Promise<BigNumber>;

  mintingFactorForPayingDebt(overrides?: CallOverrides): Promise<BigNumber>;

  nextEpochPoint(overrides?: CallOverrides): Promise<BigNumber>;

  operator(overrides?: CallOverrides): Promise<string>;

  premiumPercent(overrides?: CallOverrides): Promise<BigNumber>;

  premiumThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  previousEpochLibraPrice(overrides?: CallOverrides): Promise<BigNumber>;

  redeemBonds(
    _bondAmount: BigNumberish,
    targetPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  seigniorageExpansionFloorPercent(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  seigniorageSaved(overrides?: CallOverrides): Promise<BigNumber>;

  setBoardroom(
    _boardroom: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBondDepletionFloorPercent(
    _bondDepletionFloorPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBondSupplyExpansionPercent(
    _bondSupplyExpansionPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBootstrap(
    _bootstrapEpochs: BigNumberish,
    _bootstrapSupplyExpansionPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDiscountPercent(
    _discountPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExtraFunds(
    _daoFund: string,
    _daoFundSharedPercent: BigNumberish,
    _devFund: string,
    _devFundSharedPercent: BigNumberish,
    _insuranceFund: string,
    _insuranceFundSharedPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLibraOracle(
    _libraOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLibraPriceCeiling(
    _libraPriceCeiling: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxDebtRatioPercent(
    _maxDebtRatioPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxDiscountRate(
    _maxDiscountRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxExpansionTiersEntry(
    _index: BigNumberish,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxPremiumRate(
    _maxPremiumRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxSupplyContractionPercent(
    _maxSupplyContractionPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxSupplyExpansionPercents(
    _maxSupplyExpansionPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMintingFactorForPayingDebt(
    _mintingFactorForPayingDebt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOperator(
    _operator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPremiumPercent(
    _premiumPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPremiumThreshold(
    _premiumThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSupplyTiersEntry(
    _index: BigNumberish,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  supplyTiers(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    allocateSeigniorage(overrides?: CallOverrides): Promise<void>;

    boardroom(overrides?: CallOverrides): Promise<string>;

    boardroomAllocateSeigniorage(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    boardroomGovernanceRecoverUnsupported(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    boardroomSetLockUp(
      _withdrawLockupEpochs: BigNumberish,
      _rewardLockupEpochs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    boardroomSetOperator(
      _operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    bondDepletionFloorPercent(overrides?: CallOverrides): Promise<BigNumber>;

    bondSupplyExpansionPercent(overrides?: CallOverrides): Promise<BigNumber>;

    bootstrapEpochs(overrides?: CallOverrides): Promise<BigNumber>;

    bootstrapSupplyExpansionPercent(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyBonds(
      _libraAmount: BigNumberish,
      targetPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    daoFund(overrides?: CallOverrides): Promise<string>;

    daoFundSharedPercent(overrides?: CallOverrides): Promise<BigNumber>;

    devFund(overrides?: CallOverrides): Promise<string>;

    devFundSharedPercent(overrides?: CallOverrides): Promise<BigNumber>;

    discountPercent(overrides?: CallOverrides): Promise<BigNumber>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    epochSupplyContractionLeft(overrides?: CallOverrides): Promise<BigNumber>;

    excludedFromTotalSupply(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getBondDiscountRate(overrides?: CallOverrides): Promise<BigNumber>;

    getBondPremiumRate(overrides?: CallOverrides): Promise<BigNumber>;

    getBurnableLibraLeft(overrides?: CallOverrides): Promise<BigNumber>;

    getLibraCirculatingSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getLibraPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getLibraUpdatedPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getRedeemableBonds(overrides?: CallOverrides): Promise<BigNumber>;

    getReserve(overrides?: CallOverrides): Promise<BigNumber>;

    governanceRecoverUnsupported(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _libra: string,
      _lbond: string,
      _lshare: string,
      _libraOracle: string,
      _boardroom: string,
      _genesisPool: string,
      _startTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    insuranceFund(overrides?: CallOverrides): Promise<string>;

    insuranceFundSharedPercent(overrides?: CallOverrides): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    lbond(overrides?: CallOverrides): Promise<string>;

    libra(overrides?: CallOverrides): Promise<string>;

    libraOracle(overrides?: CallOverrides): Promise<string>;

    libraPriceCeiling(overrides?: CallOverrides): Promise<BigNumber>;

    libraPriceOne(overrides?: CallOverrides): Promise<BigNumber>;

    lshare(overrides?: CallOverrides): Promise<string>;

    maxDebtRatioPercent(overrides?: CallOverrides): Promise<BigNumber>;

    maxDiscountRate(overrides?: CallOverrides): Promise<BigNumber>;

    maxExpansionTiers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxPremiumRate(overrides?: CallOverrides): Promise<BigNumber>;

    maxSupplyContractionPercent(overrides?: CallOverrides): Promise<BigNumber>;

    maxSupplyExpansionPercent(overrides?: CallOverrides): Promise<BigNumber>;

    mintingFactorForPayingDebt(overrides?: CallOverrides): Promise<BigNumber>;

    nextEpochPoint(overrides?: CallOverrides): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<string>;

    premiumPercent(overrides?: CallOverrides): Promise<BigNumber>;

    premiumThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    previousEpochLibraPrice(overrides?: CallOverrides): Promise<BigNumber>;

    redeemBonds(
      _bondAmount: BigNumberish,
      targetPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    seigniorageExpansionFloorPercent(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seigniorageSaved(overrides?: CallOverrides): Promise<BigNumber>;

    setBoardroom(_boardroom: string, overrides?: CallOverrides): Promise<void>;

    setBondDepletionFloorPercent(
      _bondDepletionFloorPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBondSupplyExpansionPercent(
      _bondSupplyExpansionPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBootstrap(
      _bootstrapEpochs: BigNumberish,
      _bootstrapSupplyExpansionPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDiscountPercent(
      _discountPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setExtraFunds(
      _daoFund: string,
      _daoFundSharedPercent: BigNumberish,
      _devFund: string,
      _devFundSharedPercent: BigNumberish,
      _insuranceFund: string,
      _insuranceFundSharedPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLibraOracle(
      _libraOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLibraPriceCeiling(
      _libraPriceCeiling: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxDebtRatioPercent(
      _maxDebtRatioPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxDiscountRate(
      _maxDiscountRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxExpansionTiersEntry(
      _index: BigNumberish,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setMaxPremiumRate(
      _maxPremiumRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxSupplyContractionPercent(
      _maxSupplyContractionPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxSupplyExpansionPercents(
      _maxSupplyExpansionPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintingFactorForPayingDebt(
      _mintingFactorForPayingDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperator(_operator: string, overrides?: CallOverrides): Promise<void>;

    setPremiumPercent(
      _premiumPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPremiumThreshold(
      _premiumThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSupplyTiersEntry(
      _index: BigNumberish,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    supplyTiers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "BoardroomFunded(uint256,uint256)"(
      timestamp?: null,
      seigniorage?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { timestamp: BigNumber; seigniorage: BigNumber }
    >;

    BoardroomFunded(
      timestamp?: null,
      seigniorage?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { timestamp: BigNumber; seigniorage: BigNumber }
    >;

    "BoughtBonds(address,uint256,uint256)"(
      from?: string | null,
      libraAmount?: null,
      bondAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { from: string; libraAmount: BigNumber; bondAmount: BigNumber }
    >;

    BoughtBonds(
      from?: string | null,
      libraAmount?: null,
      bondAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { from: string; libraAmount: BigNumber; bondAmount: BigNumber }
    >;

    "BurnedBonds(address,uint256)"(
      from?: string | null,
      bondAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { from: string; bondAmount: BigNumber }
    >;

    BurnedBonds(
      from?: string | null,
      bondAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { from: string; bondAmount: BigNumber }
    >;

    "DaoFundFunded(uint256,uint256)"(
      timestamp?: null,
      seigniorage?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { timestamp: BigNumber; seigniorage: BigNumber }
    >;

    DaoFundFunded(
      timestamp?: null,
      seigniorage?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { timestamp: BigNumber; seigniorage: BigNumber }
    >;

    "DevFundFunded(uint256,uint256)"(
      timestamp?: null,
      seigniorage?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { timestamp: BigNumber; seigniorage: BigNumber }
    >;

    DevFundFunded(
      timestamp?: null,
      seigniorage?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { timestamp: BigNumber; seigniorage: BigNumber }
    >;

    "Initialized(address,uint256)"(
      executor?: string | null,
      at?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { executor: string; at: BigNumber }
    >;

    Initialized(
      executor?: string | null,
      at?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { executor: string; at: BigNumber }
    >;

    "InsuranceFundFunded(uint256,uint256)"(
      timestamp?: null,
      seigniorage?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { timestamp: BigNumber; seigniorage: BigNumber }
    >;

    InsuranceFundFunded(
      timestamp?: null,
      seigniorage?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { timestamp: BigNumber; seigniorage: BigNumber }
    >;

    "RedeemedBonds(address,uint256,uint256)"(
      from?: string | null,
      libraAmount?: null,
      bondAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { from: string; libraAmount: BigNumber; bondAmount: BigNumber }
    >;

    RedeemedBonds(
      from?: string | null,
      libraAmount?: null,
      bondAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { from: string; libraAmount: BigNumber; bondAmount: BigNumber }
    >;

    "TreasuryFunded(uint256,uint256)"(
      timestamp?: null,
      seigniorage?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { timestamp: BigNumber; seigniorage: BigNumber }
    >;

    TreasuryFunded(
      timestamp?: null,
      seigniorage?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { timestamp: BigNumber; seigniorage: BigNumber }
    >;
  };

  estimateGas: {
    PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    allocateSeigniorage(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    boardroom(overrides?: CallOverrides): Promise<BigNumber>;

    boardroomAllocateSeigniorage(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    boardroomGovernanceRecoverUnsupported(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    boardroomSetLockUp(
      _withdrawLockupEpochs: BigNumberish,
      _rewardLockupEpochs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    boardroomSetOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bondDepletionFloorPercent(overrides?: CallOverrides): Promise<BigNumber>;

    bondSupplyExpansionPercent(overrides?: CallOverrides): Promise<BigNumber>;

    bootstrapEpochs(overrides?: CallOverrides): Promise<BigNumber>;

    bootstrapSupplyExpansionPercent(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyBonds(
      _libraAmount: BigNumberish,
      targetPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    daoFund(overrides?: CallOverrides): Promise<BigNumber>;

    daoFundSharedPercent(overrides?: CallOverrides): Promise<BigNumber>;

    devFund(overrides?: CallOverrides): Promise<BigNumber>;

    devFundSharedPercent(overrides?: CallOverrides): Promise<BigNumber>;

    discountPercent(overrides?: CallOverrides): Promise<BigNumber>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    epochSupplyContractionLeft(overrides?: CallOverrides): Promise<BigNumber>;

    excludedFromTotalSupply(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBondDiscountRate(overrides?: CallOverrides): Promise<BigNumber>;

    getBondPremiumRate(overrides?: CallOverrides): Promise<BigNumber>;

    getBurnableLibraLeft(overrides?: CallOverrides): Promise<BigNumber>;

    getLibraCirculatingSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getLibraPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getLibraUpdatedPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getRedeemableBonds(overrides?: CallOverrides): Promise<BigNumber>;

    getReserve(overrides?: CallOverrides): Promise<BigNumber>;

    governanceRecoverUnsupported(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _libra: string,
      _lbond: string,
      _lshare: string,
      _libraOracle: string,
      _boardroom: string,
      _genesisPool: string,
      _startTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    insuranceFund(overrides?: CallOverrides): Promise<BigNumber>;

    insuranceFundSharedPercent(overrides?: CallOverrides): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    lbond(overrides?: CallOverrides): Promise<BigNumber>;

    libra(overrides?: CallOverrides): Promise<BigNumber>;

    libraOracle(overrides?: CallOverrides): Promise<BigNumber>;

    libraPriceCeiling(overrides?: CallOverrides): Promise<BigNumber>;

    libraPriceOne(overrides?: CallOverrides): Promise<BigNumber>;

    lshare(overrides?: CallOverrides): Promise<BigNumber>;

    maxDebtRatioPercent(overrides?: CallOverrides): Promise<BigNumber>;

    maxDiscountRate(overrides?: CallOverrides): Promise<BigNumber>;

    maxExpansionTiers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxPremiumRate(overrides?: CallOverrides): Promise<BigNumber>;

    maxSupplyContractionPercent(overrides?: CallOverrides): Promise<BigNumber>;

    maxSupplyExpansionPercent(overrides?: CallOverrides): Promise<BigNumber>;

    mintingFactorForPayingDebt(overrides?: CallOverrides): Promise<BigNumber>;

    nextEpochPoint(overrides?: CallOverrides): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<BigNumber>;

    premiumPercent(overrides?: CallOverrides): Promise<BigNumber>;

    premiumThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    previousEpochLibraPrice(overrides?: CallOverrides): Promise<BigNumber>;

    redeemBonds(
      _bondAmount: BigNumberish,
      targetPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    seigniorageExpansionFloorPercent(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seigniorageSaved(overrides?: CallOverrides): Promise<BigNumber>;

    setBoardroom(
      _boardroom: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBondDepletionFloorPercent(
      _bondDepletionFloorPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBondSupplyExpansionPercent(
      _bondSupplyExpansionPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBootstrap(
      _bootstrapEpochs: BigNumberish,
      _bootstrapSupplyExpansionPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDiscountPercent(
      _discountPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExtraFunds(
      _daoFund: string,
      _daoFundSharedPercent: BigNumberish,
      _devFund: string,
      _devFundSharedPercent: BigNumberish,
      _insuranceFund: string,
      _insuranceFundSharedPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLibraOracle(
      _libraOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLibraPriceCeiling(
      _libraPriceCeiling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxDebtRatioPercent(
      _maxDebtRatioPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxDiscountRate(
      _maxDiscountRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxExpansionTiersEntry(
      _index: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxPremiumRate(
      _maxPremiumRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxSupplyContractionPercent(
      _maxSupplyContractionPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxSupplyExpansionPercents(
      _maxSupplyExpansionPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMintingFactorForPayingDebt(
      _mintingFactorForPayingDebt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPremiumPercent(
      _premiumPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPremiumThreshold(
      _premiumThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSupplyTiersEntry(
      _index: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    supplyTiers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allocateSeigniorage(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    boardroom(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    boardroomAllocateSeigniorage(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    boardroomGovernanceRecoverUnsupported(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    boardroomSetLockUp(
      _withdrawLockupEpochs: BigNumberish,
      _rewardLockupEpochs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    boardroomSetOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bondDepletionFloorPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bondSupplyExpansionPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bootstrapEpochs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bootstrapSupplyExpansionPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyBonds(
      _libraAmount: BigNumberish,
      targetPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    daoFund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    daoFundSharedPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    devFund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    devFundSharedPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    discountPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochSupplyContractionLeft(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    excludedFromTotalSupply(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBondDiscountRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBondPremiumRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBurnableLibraLeft(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLibraCirculatingSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLibraPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLibraUpdatedPrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRedeemableBonds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governanceRecoverUnsupported(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _libra: string,
      _lbond: string,
      _lshare: string,
      _libraOracle: string,
      _boardroom: string,
      _genesisPool: string,
      _startTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    insuranceFund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    insuranceFundSharedPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lbond(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    libra(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    libraOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    libraPriceCeiling(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    libraPriceOne(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lshare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxDebtRatioPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxDiscountRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxExpansionTiers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxPremiumRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxSupplyContractionPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxSupplyExpansionPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintingFactorForPayingDebt(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextEpochPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    premiumPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    premiumThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previousEpochLibraPrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeemBonds(
      _bondAmount: BigNumberish,
      targetPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    seigniorageExpansionFloorPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    seigniorageSaved(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBoardroom(
      _boardroom: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBondDepletionFloorPercent(
      _bondDepletionFloorPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBondSupplyExpansionPercent(
      _bondSupplyExpansionPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBootstrap(
      _bootstrapEpochs: BigNumberish,
      _bootstrapSupplyExpansionPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDiscountPercent(
      _discountPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExtraFunds(
      _daoFund: string,
      _daoFundSharedPercent: BigNumberish,
      _devFund: string,
      _devFundSharedPercent: BigNumberish,
      _insuranceFund: string,
      _insuranceFundSharedPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLibraOracle(
      _libraOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLibraPriceCeiling(
      _libraPriceCeiling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxDebtRatioPercent(
      _maxDebtRatioPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxDiscountRate(
      _maxDiscountRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxExpansionTiersEntry(
      _index: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPremiumRate(
      _maxPremiumRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxSupplyContractionPercent(
      _maxSupplyContractionPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxSupplyExpansionPercents(
      _maxSupplyExpansionPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMintingFactorForPayingDebt(
      _mintingFactorForPayingDebt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPremiumPercent(
      _premiumPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPremiumThreshold(
      _premiumThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSupplyTiersEntry(
      _index: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supplyTiers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
